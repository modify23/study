
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004864  08004864  00014864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e0  080048e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048e8  080048e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048ec  080048ec  000148ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080048f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007d4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000844  20000844  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010dfa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002206  00000000  00000000  00030e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  000330a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bd0  00000000  00000000  00033d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f02  00000000  00000000  00034908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e161  00000000  00000000  0005980a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc062  00000000  00000000  0006796b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001439cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003aec  00000000  00000000  00143a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800484c 	.word	0x0800484c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	0800484c 	.word	0x0800484c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <_write>:
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

int _write(int fd, char *ptr, int len){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (unsigned char*)ptr, len, HAL_MAX_DELAY);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	b29a      	uxth	r2, r3
 8000500:	f04f 33ff 	mov.w	r3, #4294967295
 8000504:	68b9      	ldr	r1, [r7, #8]
 8000506:	4804      	ldr	r0, [pc, #16]	; (8000518 <_write+0x28>)
 8000508:	f002 f9bd 	bl	8002886 <HAL_UART_Transmit>
	return len;
 800050c:	687b      	ldr	r3, [r7, #4]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	200002b4 	.word	0x200002b4

0800051c <_read>:

int _read(int file, char *ptr, int len){
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive(&huart3, (unsigned char*)ptr, len, HAL_MAX_DELAY);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	b29a      	uxth	r2, r3
 800052c:	f04f 33ff 	mov.w	r3, #4294967295
 8000530:	68b9      	ldr	r1, [r7, #8]
 8000532:	4804      	ldr	r0, [pc, #16]	; (8000544 <_read+0x28>)
 8000534:	f002 fa39 	bl	80029aa <HAL_UART_Receive>
	return len;
 8000538:	687b      	ldr	r3, [r7, #4]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3710      	adds	r7, #16
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200002b4 	.word	0x200002b4

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b0c0      	sub	sp, #256	; 0x100
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fc71 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f83f 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f959 	bl	800080c <MX_GPIO_Init>
  MX_ETH_Init();
 800055a:	f000 f8b1 	bl	80006c0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800055e:	f000 f8fd 	bl	800075c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000562:	f000 f925 	bl	80007b0 <MX_USB_OTG_FS_PCD_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000566:	f000 f89f 	bl	80006a8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //char *str = "Hello world!";

  char str_2[256] = {0, };
 800056a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800056e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	3304      	adds	r3, #4
 8000578:	22fc      	movs	r2, #252	; 0xfc
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f003 fd17 	bl	8003fb0 <memset>

  setvbuf(stdin, NULL, _IONBF, 0);
 8000582:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <main+0x80>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	6858      	ldr	r0, [r3, #4]
 8000588:	2300      	movs	r3, #0
 800058a:	2202      	movs	r2, #2
 800058c:	2100      	movs	r1, #0
 800058e:	f003 fd17 	bl	8003fc0 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <main+0x80>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	6898      	ldr	r0, [r3, #8]
 8000598:	2300      	movs	r3, #0
 800059a:	2202      	movs	r2, #2
 800059c:	2100      	movs	r1, #0
 800059e:	f003 fd0f 	bl	8003fc0 <setvbuf>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  if(HAL_UART_Receive(&huart3, (uint8_t *)&uart_buf,1,1000) == HAL_OK){
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	2201      	movs	r2, #1
 80005a8:	4908      	ldr	r1, [pc, #32]	; (80005cc <main+0x84>)
 80005aa:	4809      	ldr	r0, [pc, #36]	; (80005d0 <main+0x88>)
 80005ac:	f002 f9fd 	bl	80029aa <HAL_UART_Receive>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1f5      	bne.n	80005a2 <main+0x5a>
		  HAL_UART_Transmit(&huart3,(uint8_t *)&uart_buf, 1, 1000);
 80005b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ba:	2201      	movs	r2, #1
 80005bc:	4903      	ldr	r1, [pc, #12]	; (80005cc <main+0x84>)
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <main+0x88>)
 80005c0:	f002 f961 	bl	8002886 <HAL_UART_Transmit>
	  if(HAL_UART_Receive(&huart3, (uint8_t *)&uart_buf,1,1000) == HAL_OK){
 80005c4:	e7ed      	b.n	80005a2 <main+0x5a>
 80005c6:	bf00      	nop
 80005c8:	2000000c 	.word	0x2000000c
 80005cc:	20000804 	.word	0x20000804
 80005d0:	200002b4 	.word	0x200002b4

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 fce4 	bl	8003fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <SystemClock_Config+0xcc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <SystemClock_Config+0xd0>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000634:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000648:	23a8      	movs	r3, #168	; 0xa8
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000650:	2307      	movs	r3, #7
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fc2f 	bl	8001ebc <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000664:	f000 f980 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000674:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2105      	movs	r1, #5
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fe90 	bl	80023ac <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000692:	f000 f969 	bl	8000968 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2100      	movs	r1, #0
 80006b0:	2027      	movs	r0, #39	; 0x27
 80006b2:	f000 fd30 	bl	8001116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80006b6:	2027      	movs	r0, #39	; 0x27
 80006b8:	f000 fd49 	bl	800114e <HAL_NVIC_EnableIRQ>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <MX_ETH_Init+0x84>)
 80006c6:	4a20      	ldr	r2, [pc, #128]	; (8000748 <MX_ETH_Init+0x88>)
 80006c8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <MX_ETH_Init+0x8c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <MX_ETH_Init+0x8c>)
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_ETH_Init+0x8c>)
 80006d8:	22e1      	movs	r2, #225	; 0xe1
 80006da:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_ETH_Init+0x8c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_ETH_Init+0x8c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_ETH_Init+0x8c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <MX_ETH_Init+0x84>)
 80006f0:	4a16      	ldr	r2, [pc, #88]	; (800074c <MX_ETH_Init+0x8c>)
 80006f2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_ETH_Init+0x84>)
 80006f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006fa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_ETH_Init+0x84>)
 80006fe:	4a14      	ldr	r2, [pc, #80]	; (8000750 <MX_ETH_Init+0x90>)
 8000700:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_ETH_Init+0x84>)
 8000704:	4a13      	ldr	r2, [pc, #76]	; (8000754 <MX_ETH_Init+0x94>)
 8000706:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_ETH_Init+0x84>)
 800070a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800070e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <MX_ETH_Init+0x84>)
 8000712:	f000 fdc9 	bl	80012a8 <HAL_ETH_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800071c:	f000 f924 	bl	8000968 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000720:	2238      	movs	r2, #56	; 0x38
 8000722:	2100      	movs	r1, #0
 8000724:	480c      	ldr	r0, [pc, #48]	; (8000758 <MX_ETH_Init+0x98>)
 8000726:	f003 fc43 	bl	8003fb0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_ETH_Init+0x98>)
 800072c:	2221      	movs	r2, #33	; 0x21
 800072e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_ETH_Init+0x98>)
 8000732:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000736:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <MX_ETH_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000204 	.word	0x20000204
 8000748:	40028000 	.word	0x40028000
 800074c:	20000824 	.word	0x20000824
 8000750:	20000164 	.word	0x20000164
 8000754:	200000c4 	.word	0x200000c4
 8000758:	2000008c 	.word	0x2000008c

0800075c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART3_UART_Init+0x4c>)
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <MX_USART3_UART_Init+0x50>)
 8000764:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_USART3_UART_Init+0x4c>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART3_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART3_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART3_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART3_UART_Init+0x4c>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART3_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART3_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART3_UART_Init+0x4c>)
 8000794:	f002 f82a 	bl	80027ec <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800079e:	f000 f8e3 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200002b4 	.word	0x200002b4
 80007ac:	40004800 	.word	0x40004800

080007b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007be:	2204      	movs	r2, #4
 80007c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f4:	f001 fa45 	bl	8001c82 <HAL_PCD_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f8b3 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200002f8 	.word	0x200002f8

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
 8000826:	4b4c      	ldr	r3, [pc, #304]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a4b      	ldr	r2, [pc, #300]	; (8000958 <MX_GPIO_Init+0x14c>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b49      	ldr	r3, [pc, #292]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	4b45      	ldr	r3, [pc, #276]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a44      	ldr	r2, [pc, #272]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b42      	ldr	r3, [pc, #264]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b3e      	ldr	r3, [pc, #248]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a3d      	ldr	r2, [pc, #244]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b3b      	ldr	r3, [pc, #236]	; (8000958 <MX_GPIO_Init+0x14c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b37      	ldr	r3, [pc, #220]	; (8000958 <MX_GPIO_Init+0x14c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a36      	ldr	r2, [pc, #216]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b34      	ldr	r3, [pc, #208]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b30      	ldr	r3, [pc, #192]	; (8000958 <MX_GPIO_Init+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a2f      	ldr	r2, [pc, #188]	; (8000958 <MX_GPIO_Init+0x14c>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <MX_GPIO_Init+0x14c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b29      	ldr	r3, [pc, #164]	; (8000958 <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a28      	ldr	r2, [pc, #160]	; (8000958 <MX_GPIO_Init+0x14c>)
 80008b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b26      	ldr	r3, [pc, #152]	; (8000958 <MX_GPIO_Init+0x14c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f244 0181 	movw	r1, #16513	; 0x4081
 80008d0:	4822      	ldr	r0, [pc, #136]	; (800095c <MX_GPIO_Init+0x150>)
 80008d2:	f001 f9bd 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2140      	movs	r1, #64	; 0x40
 80008da:	4821      	ldr	r0, [pc, #132]	; (8000960 <MX_GPIO_Init+0x154>)
 80008dc:	f001 f9b8 	bl	8001c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	481b      	ldr	r0, [pc, #108]	; (8000964 <MX_GPIO_Init+0x158>)
 80008f8:	f000 fffe 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008fc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4811      	ldr	r0, [pc, #68]	; (800095c <MX_GPIO_Init+0x150>)
 8000916:	f000 ffef 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800091a:	2340      	movs	r3, #64	; 0x40
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	480b      	ldr	r0, [pc, #44]	; (8000960 <MX_GPIO_Init+0x154>)
 8000932:	f000 ffe1 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000936:	2380      	movs	r3, #128	; 0x80
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_GPIO_Init+0x154>)
 800094a:	f000 ffd5 	bl	80018f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094e:	bf00      	nop
 8000950:	3730      	adds	r7, #48	; 0x30
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40020400 	.word	0x40020400
 8000960:	40021800 	.word	0x40021800
 8000964:	40020800 	.word	0x40020800

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <HAL_MspInit+0x4c>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08e      	sub	sp, #56	; 0x38
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a55      	ldr	r2, [pc, #340]	; (8000b38 <HAL_ETH_MspInit+0x174>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	f040 80a4 	bne.w	8000b30 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
 80009ec:	4b53      	ldr	r3, [pc, #332]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	4a52      	ldr	r2, [pc, #328]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 80009f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009f6:	6313      	str	r3, [r2, #48]	; 0x30
 80009f8:	4b50      	ldr	r3, [pc, #320]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a00:	623b      	str	r3, [r7, #32]
 8000a02:	6a3b      	ldr	r3, [r7, #32]
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
 8000a08:	4b4c      	ldr	r3, [pc, #304]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0c:	4a4b      	ldr	r2, [pc, #300]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000a0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a12:	6313      	str	r3, [r2, #48]	; 0x30
 8000a14:	4b49      	ldr	r3, [pc, #292]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a1c:	61fb      	str	r3, [r7, #28]
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
 8000a24:	4b45      	ldr	r3, [pc, #276]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	4a44      	ldr	r2, [pc, #272]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000a2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a30:	4b42      	ldr	r3, [pc, #264]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a38:	61bb      	str	r3, [r7, #24]
 8000a3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	4b3e      	ldr	r3, [pc, #248]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	4a3d      	ldr	r2, [pc, #244]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4c:	4b3b      	ldr	r3, [pc, #236]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	4a36      	ldr	r2, [pc, #216]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6313      	str	r3, [r2, #48]	; 0x30
 8000a68:	4b34      	ldr	r3, [pc, #208]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	4a2f      	ldr	r2, [pc, #188]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000a7e:	f043 0302 	orr.w	r3, r3, #2
 8000a82:	6313      	str	r3, [r2, #48]	; 0x30
 8000a84:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	f003 0302 	and.w	r3, r3, #2
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	4a28      	ldr	r2, [pc, #160]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa0:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <HAL_ETH_MspInit+0x178>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000aac:	2332      	movs	r3, #50	; 0x32
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000abc:	230b      	movs	r3, #11
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	481e      	ldr	r0, [pc, #120]	; (8000b40 <HAL_ETH_MspInit+0x17c>)
 8000ac8:	f000 ff16 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000acc:	2386      	movs	r3, #134	; 0x86
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000adc:	230b      	movs	r3, #11
 8000ade:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4817      	ldr	r0, [pc, #92]	; (8000b44 <HAL_ETH_MspInit+0x180>)
 8000ae8:	f000 ff06 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000afe:	230b      	movs	r3, #11
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	480f      	ldr	r0, [pc, #60]	; (8000b48 <HAL_ETH_MspInit+0x184>)
 8000b0a:	f000 fef5 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b20:	230b      	movs	r3, #11
 8000b22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4808      	ldr	r0, [pc, #32]	; (8000b4c <HAL_ETH_MspInit+0x188>)
 8000b2c:	f000 fee4 	bl	80018f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b30:	bf00      	nop
 8000b32:	3738      	adds	r7, #56	; 0x38
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40028000 	.word	0x40028000
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020800 	.word	0x40020800
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40020400 	.word	0x40020400
 8000b4c:	40021800 	.word	0x40021800

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <HAL_UART_MspInit+0x84>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12c      	bne.n	8000bcc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000baa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bbc:	2307      	movs	r3, #7
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <HAL_UART_MspInit+0x8c>)
 8000bc8:	f000 fe96 	bl	80018f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	; 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40004800 	.word	0x40004800
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020c00 	.word	0x40020c00

08000be0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c00:	d13f      	bne.n	8000c82 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <HAL_PCD_MspInit+0xac>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <HAL_PCD_MspInit+0xac>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <HAL_PCD_MspInit+0xac>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c1e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c30:	230a      	movs	r3, #10
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4815      	ldr	r0, [pc, #84]	; (8000c90 <HAL_PCD_MspInit+0xb0>)
 8000c3c:	f000 fe5c 	bl	80018f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	480e      	ldr	r0, [pc, #56]	; (8000c90 <HAL_PCD_MspInit+0xb0>)
 8000c56:	f000 fe4f 	bl	80018f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_PCD_MspInit+0xac>)
 8000c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <HAL_PCD_MspInit+0xac>)
 8000c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c64:	6353      	str	r3, [r2, #52]	; 0x34
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_PCD_MspInit+0xac>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_PCD_MspInit+0xac>)
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_PCD_MspInit+0xac>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <NMI_Handler+0x4>

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce0:	f000 f8fa 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <USART3_IRQHandler+0x10>)
 8000cee:	f001 feff 	bl	8002af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200002b4 	.word	0x200002b4

08000cfc <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d24:	605a      	str	r2, [r3, #4]
  return 0;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <_lseek>:
  (void)file;
  return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d58:	4a14      	ldr	r2, [pc, #80]	; (8000dac <_sbrk+0x5c>)
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <_sbrk+0x60>)
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <_sbrk+0x64>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <_sbrk+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d207      	bcs.n	8000d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d80:	f003 f8ec 	bl	8003f5c <__errno>
 8000d84:	4603      	mov	r3, r0
 8000d86:	220c      	movs	r2, #12
 8000d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	e009      	b.n	8000da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <_sbrk+0x64>)
 8000da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20030000 	.word	0x20030000
 8000db0:	00000400 	.word	0x00000400
 8000db4:	2000082c 	.word	0x2000082c
 8000db8:	20000848 	.word	0x20000848

08000dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <SystemInit+0x20>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <SystemInit+0x20>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e18 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de6:	490e      	ldr	r1, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dfc:	4c0b      	ldr	r4, [pc, #44]	; (8000e2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e0a:	f7ff ffd7 	bl	8000dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f003 f8ab 	bl	8003f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fb99 	bl	8000548 <main>
  bx  lr    
 8000e16:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e18:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e24:	080048f0 	.word	0x080048f0
  ldr r2, =_sbss
 8000e28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e2c:	20000844 	.word	0x20000844

08000e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <HAL_Init+0x40>)
 8000e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_Init+0x40>)
 8000e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_Init+0x40>)
 8000e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f94f 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f000 f808 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff fd84 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023c00 	.word	0x40023c00

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x54>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x58>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f967 	bl	800116a <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d80a      	bhi.n	8000ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 f92f 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_InitTick+0x5c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000830 	.word	0x20000830

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000830 	.word	0x20000830

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff ffee 	bl	8000f00 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_Delay+0x44>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3e:	bf00      	nop
 8000f40:	f7ff ffde 	bl	8000f00 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	; (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff29 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff3e 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff8e 	bl	8001054 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5d 	bl	8001000 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff31 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffa2 	bl	80010bc <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff feb6 	bl	8000f00 <HAL_GetTick>
 8001194:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d008      	beq.n	80011b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2280      	movs	r2, #128	; 0x80
 80011a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e052      	b.n	800125a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0216 	bic.w	r2, r2, #22
 80011c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	695a      	ldr	r2, [r3, #20]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d103      	bne.n	80011e4 <HAL_DMA_Abort+0x62>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d007      	beq.n	80011f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0208 	bic.w	r2, r2, #8
 80011f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0201 	bic.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001204:	e013      	b.n	800122e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001206:	f7ff fe7b 	bl	8000f00 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b05      	cmp	r3, #5
 8001212:	d90c      	bls.n	800122e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2220      	movs	r2, #32
 8001218:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2203      	movs	r2, #3
 800121e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e015      	b.n	800125a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1e4      	bne.n	8001206 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001240:	223f      	movs	r2, #63	; 0x3f
 8001242:	409a      	lsls	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d004      	beq.n	8001280 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2280      	movs	r2, #128	; 0x80
 800127a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e00c      	b.n	800129a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2205      	movs	r2, #5
 8001284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e06c      	b.n	8001394 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d106      	bne.n	80012d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2223      	movs	r2, #35	; 0x23
 80012c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fb79 	bl	80009c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <HAL_ETH_Init+0xf4>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a30      	ldr	r2, [pc, #192]	; (800139c <HAL_ETH_Init+0xf4>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b2e      	ldr	r3, [pc, #184]	; (800139c <HAL_ETH_Init+0xf4>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012ee:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <HAL_ETH_Init+0xf8>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4a2b      	ldr	r2, [pc, #172]	; (80013a0 <HAL_ETH_Init+0xf8>)
 80012f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <HAL_ETH_Init+0xf8>)
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	4927      	ldr	r1, [pc, #156]	; (80013a0 <HAL_ETH_Init+0xf8>)
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <HAL_ETH_Init+0xf8>)
 800130a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001322:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001324:	f7ff fdec 	bl	8000f00 <HAL_GetTick>
 8001328:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800132a:	e011      	b.n	8001350 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800132c:	f7ff fde8 	bl	8000f00 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800133a:	d909      	bls.n	8001350 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2204      	movs	r2, #4
 8001340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	22e0      	movs	r2, #224	; 0xe0
 8001348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e021      	b.n	8001394 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1e4      	bne.n	800132c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f958 	bl	8001618 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 f9ff 	bl	800176c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fa55 	bl	800181e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	461a      	mov	r2, r3
 800137a:	2100      	movs	r1, #0
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f9bd 	bl	80016fc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2210      	movs	r2, #16
 800138e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	40013800 	.word	0x40013800

080013a4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	4b51      	ldr	r3, [pc, #324]	; (8001500 <ETH_SetMACConfig+0x15c>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	7c1b      	ldrb	r3, [r3, #16]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d102      	bne.n	80013cc <ETH_SetMACConfig+0x28>
 80013c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013ca:	e000      	b.n	80013ce <ETH_SetMACConfig+0x2a>
 80013cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	7c5b      	ldrb	r3, [r3, #17]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <ETH_SetMACConfig+0x38>
 80013d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013da:	e000      	b.n	80013de <ETH_SetMACConfig+0x3a>
 80013dc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	7fdb      	ldrb	r3, [r3, #31]
 80013ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80013ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	7f92      	ldrb	r2, [r2, #30]
 80013f8:	2a00      	cmp	r2, #0
 80013fa:	d102      	bne.n	8001402 <ETH_SetMACConfig+0x5e>
 80013fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001400:	e000      	b.n	8001404 <ETH_SetMACConfig+0x60>
 8001402:	2200      	movs	r2, #0
                        macconf->Speed |
 8001404:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	7f1b      	ldrb	r3, [r3, #28]
 800140a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800140c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001412:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	791b      	ldrb	r3, [r3, #4]
 8001418:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800141a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001422:	2a00      	cmp	r2, #0
 8001424:	d102      	bne.n	800142c <ETH_SetMACConfig+0x88>
 8001426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800142a:	e000      	b.n	800142e <ETH_SetMACConfig+0x8a>
 800142c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800142e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	7bdb      	ldrb	r3, [r3, #15]
 8001434:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001436:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800143c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001444:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001446:	4313      	orrs	r3, r2
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800145e:	2001      	movs	r0, #1
 8001460:	f7ff fd5a 	bl	8000f18 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	f64f 7341 	movw	r3, #65345	; 0xff41
 800147a:	4013      	ands	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001482:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800148a:	2a00      	cmp	r2, #0
 800148c:	d101      	bne.n	8001492 <ETH_SetMACConfig+0xee>
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	e000      	b.n	8001494 <ETH_SetMACConfig+0xf0>
 8001492:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001494:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800149a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80014a2:	2a01      	cmp	r2, #1
 80014a4:	d101      	bne.n	80014aa <ETH_SetMACConfig+0x106>
 80014a6:	2208      	movs	r2, #8
 80014a8:	e000      	b.n	80014ac <ETH_SetMACConfig+0x108>
 80014aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80014ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80014b4:	2a01      	cmp	r2, #1
 80014b6:	d101      	bne.n	80014bc <ETH_SetMACConfig+0x118>
 80014b8:	2204      	movs	r2, #4
 80014ba:	e000      	b.n	80014be <ETH_SetMACConfig+0x11a>
 80014bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80014c6:	2a01      	cmp	r2, #1
 80014c8:	d101      	bne.n	80014ce <ETH_SetMACConfig+0x12a>
 80014ca:	2202      	movs	r2, #2
 80014cc:	e000      	b.n	80014d0 <ETH_SetMACConfig+0x12c>
 80014ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014d0:	4313      	orrs	r3, r2
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f7ff fd15 	bl	8000f18 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	619a      	str	r2, [r3, #24]
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	ff20810f 	.word	0xff20810f

08001504 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <ETH_SetDMAConfig+0x110>)
 800151e:	4013      	ands	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	7b1b      	ldrb	r3, [r3, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <ETH_SetDMAConfig+0x2c>
 800152a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800152e:	e000      	b.n	8001532 <ETH_SetDMAConfig+0x2e>
 8001530:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	7b5b      	ldrb	r3, [r3, #13]
 8001536:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001538:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	7f52      	ldrb	r2, [r2, #29]
 800153e:	2a00      	cmp	r2, #0
 8001540:	d102      	bne.n	8001548 <ETH_SetDMAConfig+0x44>
 8001542:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001546:	e000      	b.n	800154a <ETH_SetDMAConfig+0x46>
 8001548:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800154a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	7b9b      	ldrb	r3, [r3, #14]
 8001550:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001552:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001558:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	7f1b      	ldrb	r3, [r3, #28]
 800155e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001560:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	7f9b      	ldrb	r3, [r3, #30]
 8001566:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001568:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800156e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001576:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001578:	4313      	orrs	r3, r2
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4313      	orrs	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001588:	461a      	mov	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800159a:	2001      	movs	r0, #1
 800159c:	f7ff fcbc 	bl	8000f18 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a8:	461a      	mov	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	791b      	ldrb	r3, [r3, #4]
 80015b2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015b8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015be:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015c4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015cc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015ce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015d6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015dc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff fc8d 	bl	8000f18 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	f8de3f23 	.word	0xf8de3f23

08001618 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b0a6      	sub	sp, #152	; 0x98
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001620:	2301      	movs	r3, #1
 8001622:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800162c:	2300      	movs	r3, #0
 800162e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001636:	2301      	movs	r3, #1
 8001638:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001642:	2301      	movs	r3, #1
 8001644:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001654:	2300      	movs	r3, #0
 8001656:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800165e:	2300      	movs	r3, #0
 8001660:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001668:	2300      	movs	r3, #0
 800166a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800167a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800167e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001680:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001684:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800168c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001690:	4619      	mov	r1, r3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fe86 	bl	80013a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001698:	2301      	movs	r3, #1
 800169a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800169c:	2301      	movs	r3, #1
 800169e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80016a0:	2301      	movs	r3, #1
 80016a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80016a6:	2301      	movs	r3, #1
 80016a8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016be:	2301      	movs	r3, #1
 80016c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016c4:	2301      	movs	r3, #1
 80016c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016cc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016d2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80016da:	2301      	movs	r3, #1
 80016dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	4619      	mov	r1, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ff08 	bl	8001504 <ETH_SetDMAConfig>
}
 80016f4:	bf00      	nop
 80016f6:	3798      	adds	r7, #152	; 0x98
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3305      	adds	r3, #5
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	3204      	adds	r2, #4
 8001714:	7812      	ldrb	r2, [r2, #0]
 8001716:	4313      	orrs	r3, r2
 8001718:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <ETH_MACAddressConfig+0x68>)
 800171e:	4413      	add	r3, r2
 8001720:	461a      	mov	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3303      	adds	r3, #3
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	061a      	lsls	r2, r3, #24
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3302      	adds	r3, #2
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	041b      	lsls	r3, r3, #16
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3301      	adds	r3, #1
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	4313      	orrs	r3, r2
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	7812      	ldrb	r2, [r2, #0]
 8001746:	4313      	orrs	r3, r2
 8001748:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <ETH_MACAddressConfig+0x6c>)
 800174e:	4413      	add	r3, r2
 8001750:	461a      	mov	r2, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	6013      	str	r3, [r2, #0]
}
 8001756:	bf00      	nop
 8001758:	371c      	adds	r7, #28
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40028040 	.word	0x40028040
 8001768:	40028044 	.word	0x40028044

0800176c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	e03e      	b.n	80017f8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68d9      	ldr	r1, [r3, #12]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2200      	movs	r2, #0
 8001796:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	3206      	adds	r2, #6
 80017ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d80c      	bhi.n	80017dc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68d9      	ldr	r1, [r3, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	440b      	add	r3, r1
 80017d4:	461a      	mov	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	e004      	b.n	80017e6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	461a      	mov	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3301      	adds	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d9bd      	bls.n	800177a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001810:	611a      	str	r2, [r3, #16]
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800181e:	b480      	push	{r7}
 8001820:	b085      	sub	sp, #20
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	e046      	b.n	80018ba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6919      	ldr	r1, [r3, #16]
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	440b      	add	r3, r1
 800183c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2200      	movs	r2, #0
 8001848:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001868:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001870:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800187e:	68b9      	ldr	r1, [r7, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	3212      	adds	r2, #18
 8001886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d80c      	bhi.n	80018aa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6919      	ldr	r1, [r3, #16]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	440b      	add	r3, r1
 80018a2:	461a      	mov	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	e004      	b.n	80018b4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	461a      	mov	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3301      	adds	r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d9b5      	bls.n	800182c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ea:	60da      	str	r2, [r3, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	e177      	b.n	8001c04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001914:	2201      	movs	r2, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	429a      	cmp	r2, r3
 800192e:	f040 8166 	bne.w	8001bfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b01      	cmp	r3, #1
 800193c:	d005      	beq.n	800194a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001946:	2b02      	cmp	r3, #2
 8001948:	d130      	bne.n	80019ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	2203      	movs	r2, #3
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001980:	2201      	movs	r2, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 0201 	and.w	r2, r3, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d017      	beq.n	80019e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d123      	bne.n	8001a3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	08da      	lsrs	r2, r3, #3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3208      	adds	r2, #8
 80019fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	220f      	movs	r2, #15
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	08da      	lsrs	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3208      	adds	r2, #8
 8001a36:	69b9      	ldr	r1, [r7, #24]
 8001a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	2203      	movs	r2, #3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0203 	and.w	r2, r3, #3
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80c0 	beq.w	8001bfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b66      	ldr	r3, [pc, #408]	; (8001c1c <HAL_GPIO_Init+0x324>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a65      	ldr	r2, [pc, #404]	; (8001c1c <HAL_GPIO_Init+0x324>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b63      	ldr	r3, [pc, #396]	; (8001c1c <HAL_GPIO_Init+0x324>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a9a:	4a61      	ldr	r2, [pc, #388]	; (8001c20 <HAL_GPIO_Init+0x328>)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a58      	ldr	r2, [pc, #352]	; (8001c24 <HAL_GPIO_Init+0x32c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d037      	beq.n	8001b36 <HAL_GPIO_Init+0x23e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a57      	ldr	r2, [pc, #348]	; (8001c28 <HAL_GPIO_Init+0x330>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d031      	beq.n	8001b32 <HAL_GPIO_Init+0x23a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a56      	ldr	r2, [pc, #344]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d02b      	beq.n	8001b2e <HAL_GPIO_Init+0x236>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a55      	ldr	r2, [pc, #340]	; (8001c30 <HAL_GPIO_Init+0x338>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d025      	beq.n	8001b2a <HAL_GPIO_Init+0x232>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a54      	ldr	r2, [pc, #336]	; (8001c34 <HAL_GPIO_Init+0x33c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d01f      	beq.n	8001b26 <HAL_GPIO_Init+0x22e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a53      	ldr	r2, [pc, #332]	; (8001c38 <HAL_GPIO_Init+0x340>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d019      	beq.n	8001b22 <HAL_GPIO_Init+0x22a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a52      	ldr	r2, [pc, #328]	; (8001c3c <HAL_GPIO_Init+0x344>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <HAL_GPIO_Init+0x226>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a51      	ldr	r2, [pc, #324]	; (8001c40 <HAL_GPIO_Init+0x348>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00d      	beq.n	8001b1a <HAL_GPIO_Init+0x222>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a50      	ldr	r2, [pc, #320]	; (8001c44 <HAL_GPIO_Init+0x34c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d007      	beq.n	8001b16 <HAL_GPIO_Init+0x21e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4f      	ldr	r2, [pc, #316]	; (8001c48 <HAL_GPIO_Init+0x350>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <HAL_GPIO_Init+0x21a>
 8001b0e:	2309      	movs	r3, #9
 8001b10:	e012      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b12:	230a      	movs	r3, #10
 8001b14:	e010      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b16:	2308      	movs	r3, #8
 8001b18:	e00e      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	e00c      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b1e:	2306      	movs	r3, #6
 8001b20:	e00a      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b22:	2305      	movs	r3, #5
 8001b24:	e008      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b26:	2304      	movs	r3, #4
 8001b28:	e006      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e004      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e002      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b36:	2300      	movs	r3, #0
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	f002 0203 	and.w	r2, r2, #3
 8001b3e:	0092      	lsls	r2, r2, #2
 8001b40:	4093      	lsls	r3, r2
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b48:	4935      	ldr	r1, [pc, #212]	; (8001c20 <HAL_GPIO_Init+0x328>)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	3302      	adds	r3, #2
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <HAL_GPIO_Init+0x354>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7a:	4a34      	ldr	r2, [pc, #208]	; (8001c4c <HAL_GPIO_Init+0x354>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b80:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <HAL_GPIO_Init+0x354>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba4:	4a29      	ldr	r2, [pc, #164]	; (8001c4c <HAL_GPIO_Init+0x354>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001baa:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_GPIO_Init+0x354>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bce:	4a1f      	ldr	r2, [pc, #124]	; (8001c4c <HAL_GPIO_Init+0x354>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_GPIO_Init+0x354>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <HAL_GPIO_Init+0x354>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3301      	adds	r3, #1
 8001c02:	61fb      	str	r3, [r7, #28]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b0f      	cmp	r3, #15
 8001c08:	f67f ae84 	bls.w	8001914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3724      	adds	r7, #36	; 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40013800 	.word	0x40013800
 8001c24:	40020000 	.word	0x40020000
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40020c00 	.word	0x40020c00
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40021400 	.word	0x40021400
 8001c3c:	40021800 	.word	0x40021800
 8001c40:	40021c00 	.word	0x40021c00
 8001c44:	40022000 	.word	0x40022000
 8001c48:	40022400 	.word	0x40022400
 8001c4c:	40013c00 	.word	0x40013c00

08001c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c60:	787b      	ldrb	r3, [r7, #1]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c6c:	e003      	b.n	8001c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c6e:	887b      	ldrh	r3, [r7, #2]
 8001c70:	041a      	lsls	r2, r3, #16
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	619a      	str	r2, [r3, #24]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c84:	b08f      	sub	sp, #60	; 0x3c
 8001c86:	af0a      	add	r7, sp, #40	; 0x28
 8001c88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e10f      	b.n	8001eb4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7fe ff96 	bl	8000be0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d102      	bne.n	8001cce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 fea1 	bl	8003a1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	687e      	ldr	r6, [r7, #4]
 8001ce0:	466d      	mov	r5, sp
 8001ce2:	f106 0410 	add.w	r4, r6, #16
 8001ce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cf2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cf6:	1d33      	adds	r3, r6, #4
 8001cf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cfa:	6838      	ldr	r0, [r7, #0]
 8001cfc:	f001 fe2c 	bl	8003958 <USB_CoreInit>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e0d0      	b.n	8001eb4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2100      	movs	r1, #0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f001 fe8f 	bl	8003a3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]
 8001d22:	e04a      	b.n	8001dba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	333d      	adds	r3, #61	; 0x3d
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d38:	7bfa      	ldrb	r2, [r7, #15]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	333c      	adds	r3, #60	; 0x3c
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d4c:	7bfa      	ldrb	r2, [r7, #15]
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	b298      	uxth	r0, r3
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3344      	adds	r3, #68	; 0x44
 8001d60:	4602      	mov	r2, r0
 8001d62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	3340      	adds	r3, #64	; 0x40
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	3348      	adds	r3, #72	; 0x48
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	334c      	adds	r3, #76	; 0x4c
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	3354      	adds	r3, #84	; 0x54
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	3301      	adds	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d3af      	bcc.n	8001d24 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e044      	b.n	8001e54 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001df2:	7bfa      	ldrb	r2, [r7, #15]
 8001df4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	3301      	adds	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d3b5      	bcc.n	8001dca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	687e      	ldr	r6, [r7, #4]
 8001e66:	466d      	mov	r5, sp
 8001e68:	f106 0410 	add.w	r4, r6, #16
 8001e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e78:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e7c:	1d33      	adds	r3, r6, #4
 8001e7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e80:	6838      	ldr	r0, [r7, #0]
 8001e82:	f001 fe27 	bl	8003ad4 <USB_DevInit>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e00d      	b.n	8001eb4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f001 fff2 	bl	8003e96 <USB_DevDisconnect>

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ebc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e267      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d075      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eda:	4b88      	ldr	r3, [pc, #544]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d00c      	beq.n	8001f00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee6:	4b85      	ldr	r3, [pc, #532]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d112      	bne.n	8001f18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef2:	4b82      	ldr	r3, [pc, #520]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001efe:	d10b      	bne.n	8001f18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	4b7e      	ldr	r3, [pc, #504]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d05b      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x108>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d157      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e242      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f20:	d106      	bne.n	8001f30 <HAL_RCC_OscConfig+0x74>
 8001f22:	4b76      	ldr	r3, [pc, #472]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a75      	ldr	r2, [pc, #468]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e01d      	b.n	8001f6c <HAL_RCC_OscConfig+0xb0>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x98>
 8001f3a:	4b70      	ldr	r3, [pc, #448]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a6f      	ldr	r2, [pc, #444]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b6d      	ldr	r3, [pc, #436]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a6c      	ldr	r2, [pc, #432]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e00b      	b.n	8001f6c <HAL_RCC_OscConfig+0xb0>
 8001f54:	4b69      	ldr	r3, [pc, #420]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a68      	ldr	r2, [pc, #416]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4b66      	ldr	r3, [pc, #408]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a65      	ldr	r2, [pc, #404]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7fe ffc4 	bl	8000f00 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7fe ffc0 	bl	8000f00 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	; 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e207      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	4b5b      	ldr	r3, [pc, #364]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0xc0>
 8001f9a:	e014      	b.n	8001fc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7fe ffb0 	bl	8000f00 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7fe ffac 	bl	8000f00 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e1f3      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	4b51      	ldr	r3, [pc, #324]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0xe8>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d063      	beq.n	800209a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fd2:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fde:	4b47      	ldr	r3, [pc, #284]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d11c      	bne.n	8002024 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fea:	4b44      	ldr	r3, [pc, #272]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d116      	bne.n	8002024 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff6:	4b41      	ldr	r3, [pc, #260]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_RCC_OscConfig+0x152>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d001      	beq.n	800200e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e1c7      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200e:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4937      	ldr	r1, [pc, #220]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002022:	e03a      	b.n	800209a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d020      	beq.n	800206e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800202c:	4b34      	ldr	r3, [pc, #208]	; (8002100 <HAL_RCC_OscConfig+0x244>)
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7fe ff65 	bl	8000f00 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800203a:	f7fe ff61 	bl	8000f00 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e1a8      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204c:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002058:	4b28      	ldr	r3, [pc, #160]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4925      	ldr	r1, [pc, #148]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8002068:	4313      	orrs	r3, r2
 800206a:	600b      	str	r3, [r1, #0]
 800206c:	e015      	b.n	800209a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_RCC_OscConfig+0x244>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7fe ff44 	bl	8000f00 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207c:	f7fe ff40 	bl	8000f00 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e187      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d036      	beq.n	8002114 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d016      	beq.n	80020dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <HAL_RCC_OscConfig+0x248>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b4:	f7fe ff24 	bl	8000f00 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020bc:	f7fe ff20 	bl	8000f00 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e167      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 80020d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0x200>
 80020da:	e01b      	b.n	8002114 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_OscConfig+0x248>)
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e2:	f7fe ff0d 	bl	8000f00 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e8:	e00e      	b.n	8002108 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ea:	f7fe ff09 	bl	8000f00 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d907      	bls.n	8002108 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e150      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
 80020fc:	40023800 	.word	0x40023800
 8002100:	42470000 	.word	0x42470000
 8002104:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002108:	4b88      	ldr	r3, [pc, #544]	; (800232c <HAL_RCC_OscConfig+0x470>)
 800210a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ea      	bne.n	80020ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 8097 	beq.w	8002250 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002126:	4b81      	ldr	r3, [pc, #516]	; (800232c <HAL_RCC_OscConfig+0x470>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10f      	bne.n	8002152 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	4b7d      	ldr	r3, [pc, #500]	; (800232c <HAL_RCC_OscConfig+0x470>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a7c      	ldr	r2, [pc, #496]	; (800232c <HAL_RCC_OscConfig+0x470>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b7a      	ldr	r3, [pc, #488]	; (800232c <HAL_RCC_OscConfig+0x470>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214e:	2301      	movs	r3, #1
 8002150:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002152:	4b77      	ldr	r3, [pc, #476]	; (8002330 <HAL_RCC_OscConfig+0x474>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d118      	bne.n	8002190 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215e:	4b74      	ldr	r3, [pc, #464]	; (8002330 <HAL_RCC_OscConfig+0x474>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a73      	ldr	r2, [pc, #460]	; (8002330 <HAL_RCC_OscConfig+0x474>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216a:	f7fe fec9 	bl	8000f00 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002172:	f7fe fec5 	bl	8000f00 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e10c      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	4b6a      	ldr	r3, [pc, #424]	; (8002330 <HAL_RCC_OscConfig+0x474>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_OscConfig+0x2ea>
 8002198:	4b64      	ldr	r3, [pc, #400]	; (800232c <HAL_RCC_OscConfig+0x470>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	4a63      	ldr	r2, [pc, #396]	; (800232c <HAL_RCC_OscConfig+0x470>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6713      	str	r3, [r2, #112]	; 0x70
 80021a4:	e01c      	b.n	80021e0 <HAL_RCC_OscConfig+0x324>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b05      	cmp	r3, #5
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x30c>
 80021ae:	4b5f      	ldr	r3, [pc, #380]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b2:	4a5e      	ldr	r2, [pc, #376]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80021b4:	f043 0304 	orr.w	r3, r3, #4
 80021b8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ba:	4b5c      	ldr	r3, [pc, #368]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	4a5b      	ldr	r2, [pc, #364]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6713      	str	r3, [r2, #112]	; 0x70
 80021c6:	e00b      	b.n	80021e0 <HAL_RCC_OscConfig+0x324>
 80021c8:	4b58      	ldr	r3, [pc, #352]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	4a57      	ldr	r2, [pc, #348]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80021ce:	f023 0301 	bic.w	r3, r3, #1
 80021d2:	6713      	str	r3, [r2, #112]	; 0x70
 80021d4:	4b55      	ldr	r3, [pc, #340]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	4a54      	ldr	r2, [pc, #336]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80021da:	f023 0304 	bic.w	r3, r3, #4
 80021de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d015      	beq.n	8002214 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e8:	f7fe fe8a 	bl	8000f00 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ee:	e00a      	b.n	8002206 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f0:	f7fe fe86 	bl	8000f00 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e0cb      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002206:	4b49      	ldr	r3, [pc, #292]	; (800232c <HAL_RCC_OscConfig+0x470>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0ee      	beq.n	80021f0 <HAL_RCC_OscConfig+0x334>
 8002212:	e014      	b.n	800223e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002214:	f7fe fe74 	bl	8000f00 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221a:	e00a      	b.n	8002232 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800221c:	f7fe fe70 	bl	8000f00 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f241 3288 	movw	r2, #5000	; 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e0b5      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002232:	4b3e      	ldr	r3, [pc, #248]	; (800232c <HAL_RCC_OscConfig+0x470>)
 8002234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1ee      	bne.n	800221c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800223e:	7dfb      	ldrb	r3, [r7, #23]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d105      	bne.n	8002250 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002244:	4b39      	ldr	r3, [pc, #228]	; (800232c <HAL_RCC_OscConfig+0x470>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	4a38      	ldr	r2, [pc, #224]	; (800232c <HAL_RCC_OscConfig+0x470>)
 800224a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800224e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80a1 	beq.w	800239c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800225a:	4b34      	ldr	r3, [pc, #208]	; (800232c <HAL_RCC_OscConfig+0x470>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b08      	cmp	r3, #8
 8002264:	d05c      	beq.n	8002320 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d141      	bne.n	80022f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226e:	4b31      	ldr	r3, [pc, #196]	; (8002334 <HAL_RCC_OscConfig+0x478>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7fe fe44 	bl	8000f00 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227c:	f7fe fe40 	bl	8000f00 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e087      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228e:	4b27      	ldr	r3, [pc, #156]	; (800232c <HAL_RCC_OscConfig+0x470>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69da      	ldr	r2, [r3, #28]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	019b      	lsls	r3, r3, #6
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	085b      	lsrs	r3, r3, #1
 80022b2:	3b01      	subs	r3, #1
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	061b      	lsls	r3, r3, #24
 80022be:	491b      	ldr	r1, [pc, #108]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c4:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <HAL_RCC_OscConfig+0x478>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7fe fe19 	bl	8000f00 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d2:	f7fe fe15 	bl	8000f00 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e05c      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x416>
 80022f0:	e054      	b.n	800239c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_RCC_OscConfig+0x478>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7fe fe02 	bl	8000f00 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002300:	f7fe fdfe 	bl	8000f00 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e045      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_RCC_OscConfig+0x470>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x444>
 800231e:	e03d      	b.n	800239c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d107      	bne.n	8002338 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e038      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
 800232c:	40023800 	.word	0x40023800
 8002330:	40007000 	.word	0x40007000
 8002334:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <HAL_RCC_OscConfig+0x4ec>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d028      	beq.n	8002398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002350:	429a      	cmp	r2, r3
 8002352:	d121      	bne.n	8002398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d11a      	bne.n	8002398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002368:	4013      	ands	r3, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800236e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002370:	4293      	cmp	r3, r2
 8002372:	d111      	bne.n	8002398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	085b      	lsrs	r3, r3, #1
 8002380:	3b01      	subs	r3, #1
 8002382:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002384:	429a      	cmp	r2, r3
 8002386:	d107      	bne.n	8002398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800

080023ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0cc      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c0:	4b68      	ldr	r3, [pc, #416]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d90c      	bls.n	80023e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b65      	ldr	r3, [pc, #404]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	4b63      	ldr	r3, [pc, #396]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0b8      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d020      	beq.n	8002436 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002400:	4b59      	ldr	r3, [pc, #356]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	4a58      	ldr	r2, [pc, #352]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800240a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002418:	4b53      	ldr	r3, [pc, #332]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	4a52      	ldr	r2, [pc, #328]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002422:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002424:	4b50      	ldr	r3, [pc, #320]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	494d      	ldr	r1, [pc, #308]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d044      	beq.n	80024cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b47      	ldr	r3, [pc, #284]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d119      	bne.n	800248a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e07f      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d003      	beq.n	800246a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002466:	2b03      	cmp	r3, #3
 8002468:	d107      	bne.n	800247a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246a:	4b3f      	ldr	r3, [pc, #252]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e06f      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247a:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e067      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800248a:	4b37      	ldr	r3, [pc, #220]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f023 0203 	bic.w	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4934      	ldr	r1, [pc, #208]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	4313      	orrs	r3, r2
 800249a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800249c:	f7fe fd30 	bl	8000f00 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a2:	e00a      	b.n	80024ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a4:	f7fe fd2c 	bl	8000f00 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e04f      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ba:	4b2b      	ldr	r3, [pc, #172]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 020c 	and.w	r2, r3, #12
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d1eb      	bne.n	80024a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024cc:	4b25      	ldr	r3, [pc, #148]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d20c      	bcs.n	80024f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b22      	ldr	r3, [pc, #136]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b20      	ldr	r3, [pc, #128]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e032      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4916      	ldr	r1, [pc, #88]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	490e      	ldr	r1, [pc, #56]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002532:	f000 f821 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8002536:	4602      	mov	r2, r0
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	490a      	ldr	r1, [pc, #40]	; (800256c <HAL_RCC_ClockConfig+0x1c0>)
 8002544:	5ccb      	ldrb	r3, [r1, r3]
 8002546:	fa22 f303 	lsr.w	r3, r2, r3
 800254a:	4a09      	ldr	r2, [pc, #36]	; (8002570 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x1c8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fc90 	bl	8000e78 <HAL_InitTick>

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40023c00 	.word	0x40023c00
 8002568:	40023800 	.word	0x40023800
 800256c:	08004864 	.word	0x08004864
 8002570:	20000000 	.word	0x20000000
 8002574:	20000004 	.word	0x20000004

08002578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800257c:	b094      	sub	sp, #80	; 0x50
 800257e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	647b      	str	r3, [r7, #68]	; 0x44
 8002584:	2300      	movs	r3, #0
 8002586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002588:	2300      	movs	r3, #0
 800258a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002590:	4b79      	ldr	r3, [pc, #484]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 030c 	and.w	r3, r3, #12
 8002598:	2b08      	cmp	r3, #8
 800259a:	d00d      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x40>
 800259c:	2b08      	cmp	r3, #8
 800259e:	f200 80e1 	bhi.w	8002764 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x34>
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d003      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025aa:	e0db      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025ac:	4b73      	ldr	r3, [pc, #460]	; (800277c <HAL_RCC_GetSysClockFreq+0x204>)
 80025ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80025b0:	e0db      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025b2:	4b73      	ldr	r3, [pc, #460]	; (8002780 <HAL_RCC_GetSysClockFreq+0x208>)
 80025b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025b6:	e0d8      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b8:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025c2:	4b6d      	ldr	r3, [pc, #436]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d063      	beq.n	8002696 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ce:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	099b      	lsrs	r3, r3, #6
 80025d4:	2200      	movs	r2, #0
 80025d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80025d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30
 80025e2:	2300      	movs	r3, #0
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
 80025e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025ea:	4622      	mov	r2, r4
 80025ec:	462b      	mov	r3, r5
 80025ee:	f04f 0000 	mov.w	r0, #0
 80025f2:	f04f 0100 	mov.w	r1, #0
 80025f6:	0159      	lsls	r1, r3, #5
 80025f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025fc:	0150      	lsls	r0, r2, #5
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4621      	mov	r1, r4
 8002604:	1a51      	subs	r1, r2, r1
 8002606:	6139      	str	r1, [r7, #16]
 8002608:	4629      	mov	r1, r5
 800260a:	eb63 0301 	sbc.w	r3, r3, r1
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800261c:	4659      	mov	r1, fp
 800261e:	018b      	lsls	r3, r1, #6
 8002620:	4651      	mov	r1, sl
 8002622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002626:	4651      	mov	r1, sl
 8002628:	018a      	lsls	r2, r1, #6
 800262a:	4651      	mov	r1, sl
 800262c:	ebb2 0801 	subs.w	r8, r2, r1
 8002630:	4659      	mov	r1, fp
 8002632:	eb63 0901 	sbc.w	r9, r3, r1
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800264a:	4690      	mov	r8, r2
 800264c:	4699      	mov	r9, r3
 800264e:	4623      	mov	r3, r4
 8002650:	eb18 0303 	adds.w	r3, r8, r3
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	462b      	mov	r3, r5
 8002658:	eb49 0303 	adc.w	r3, r9, r3
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800266a:	4629      	mov	r1, r5
 800266c:	024b      	lsls	r3, r1, #9
 800266e:	4621      	mov	r1, r4
 8002670:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002674:	4621      	mov	r1, r4
 8002676:	024a      	lsls	r2, r1, #9
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267e:	2200      	movs	r2, #0
 8002680:	62bb      	str	r3, [r7, #40]	; 0x28
 8002682:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002684:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002688:	f7fd fdb0 	bl	80001ec <__aeabi_uldivmod>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4613      	mov	r3, r2
 8002692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002694:	e058      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002696:	4b38      	ldr	r3, [pc, #224]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	099b      	lsrs	r3, r3, #6
 800269c:	2200      	movs	r2, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	4611      	mov	r1, r2
 80026a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	2300      	movs	r3, #0
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
 80026ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026b0:	4642      	mov	r2, r8
 80026b2:	464b      	mov	r3, r9
 80026b4:	f04f 0000 	mov.w	r0, #0
 80026b8:	f04f 0100 	mov.w	r1, #0
 80026bc:	0159      	lsls	r1, r3, #5
 80026be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c2:	0150      	lsls	r0, r2, #5
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4641      	mov	r1, r8
 80026ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80026ce:	4649      	mov	r1, r9
 80026d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026e8:	ebb2 040a 	subs.w	r4, r2, sl
 80026ec:	eb63 050b 	sbc.w	r5, r3, fp
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	00eb      	lsls	r3, r5, #3
 80026fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026fe:	00e2      	lsls	r2, r4, #3
 8002700:	4614      	mov	r4, r2
 8002702:	461d      	mov	r5, r3
 8002704:	4643      	mov	r3, r8
 8002706:	18e3      	adds	r3, r4, r3
 8002708:	603b      	str	r3, [r7, #0]
 800270a:	464b      	mov	r3, r9
 800270c:	eb45 0303 	adc.w	r3, r5, r3
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800271e:	4629      	mov	r1, r5
 8002720:	028b      	lsls	r3, r1, #10
 8002722:	4621      	mov	r1, r4
 8002724:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002728:	4621      	mov	r1, r4
 800272a:	028a      	lsls	r2, r1, #10
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002732:	2200      	movs	r2, #0
 8002734:	61bb      	str	r3, [r7, #24]
 8002736:	61fa      	str	r2, [r7, #28]
 8002738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800273c:	f7fd fd56 	bl	80001ec <__aeabi_uldivmod>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4613      	mov	r3, r2
 8002746:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	0c1b      	lsrs	r3, r3, #16
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	3301      	adds	r3, #1
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800275a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002762:	e002      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_RCC_GetSysClockFreq+0x204>)
 8002766:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800276a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800276c:	4618      	mov	r0, r3
 800276e:	3750      	adds	r7, #80	; 0x50
 8002770:	46bd      	mov	sp, r7
 8002772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800
 800277c:	00f42400 	.word	0x00f42400
 8002780:	007a1200 	.word	0x007a1200

08002784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <HAL_RCC_GetHCLKFreq+0x14>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000000 	.word	0x20000000

0800279c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027a0:	f7ff fff0 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027a4:	4602      	mov	r2, r0
 80027a6:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	0a9b      	lsrs	r3, r3, #10
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	4903      	ldr	r1, [pc, #12]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b2:	5ccb      	ldrb	r3, [r1, r3]
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	08004874 	.word	0x08004874

080027c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027c8:	f7ff ffdc 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	0b5b      	lsrs	r3, r3, #13
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4903      	ldr	r1, [pc, #12]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40023800 	.word	0x40023800
 80027e8:	08004874 	.word	0x08004874

080027ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e03f      	b.n	800287e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe f99c 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2224      	movs	r2, #36	; 0x24
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800282e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fe1d 	bl	8003470 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b08a      	sub	sp, #40	; 0x28
 800288a:	af02      	add	r7, sp, #8
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	4613      	mov	r3, r2
 8002894:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d17c      	bne.n	80029a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <HAL_UART_Transmit+0x2c>
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e075      	b.n	80029a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_UART_Transmit+0x3e>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e06e      	b.n	80029a2 <HAL_UART_Transmit+0x11c>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2221      	movs	r2, #33	; 0x21
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028da:	f7fe fb11 	bl	8000f00 <HAL_GetTick>
 80028de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	88fa      	ldrh	r2, [r7, #6]
 80028e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	88fa      	ldrh	r2, [r7, #6]
 80028ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f4:	d108      	bne.n	8002908 <HAL_UART_Transmit+0x82>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d104      	bne.n	8002908 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	e003      	b.n	8002910 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800290c:	2300      	movs	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002918:	e02a      	b.n	8002970 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2200      	movs	r2, #0
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 fb9b 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e036      	b.n	80029a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10b      	bne.n	8002952 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002948:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	3302      	adds	r3, #2
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	e007      	b.n	8002962 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	781a      	ldrb	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	3301      	adds	r3, #1
 8002960:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1cf      	bne.n	800291a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2200      	movs	r2, #0
 8002982:	2140      	movs	r1, #64	; 0x40
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fb6b 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e006      	b.n	80029a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	e000      	b.n	80029a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029a0:	2302      	movs	r3, #2
  }
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3720      	adds	r7, #32
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b08a      	sub	sp, #40	; 0x28
 80029ae:	af02      	add	r7, sp, #8
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	4613      	mov	r3, r2
 80029b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b20      	cmp	r3, #32
 80029c8:	f040 808c 	bne.w	8002ae4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <HAL_UART_Receive+0x2e>
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e084      	b.n	8002ae6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_UART_Receive+0x40>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e07d      	b.n	8002ae6 <HAL_UART_Receive+0x13c>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2222      	movs	r2, #34	; 0x22
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a06:	f7fe fa7b 	bl	8000f00 <HAL_GetTick>
 8002a0a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	88fa      	ldrh	r2, [r7, #6]
 8002a10:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	88fa      	ldrh	r2, [r7, #6]
 8002a16:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a20:	d108      	bne.n	8002a34 <HAL_UART_Receive+0x8a>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d104      	bne.n	8002a34 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	e003      	b.n	8002a3c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a44:	e043      	b.n	8002ace <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2120      	movs	r1, #32
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fb05 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e042      	b.n	8002ae6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10c      	bne.n	8002a80 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	e01f      	b.n	8002ac0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a88:	d007      	beq.n	8002a9a <HAL_UART_Receive+0xf0>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10a      	bne.n	8002aa8 <HAL_UART_Receive+0xfe>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d106      	bne.n	8002aa8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e008      	b.n	8002aba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3301      	adds	r3, #1
 8002abe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1b6      	bne.n	8002a46 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	e000      	b.n	8002ae6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002ae4:	2302      	movs	r3, #2
  }
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3720      	adds	r7, #32
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b0ba      	sub	sp, #232	; 0xe8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10f      	bne.n	8002b56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_UART_IRQHandler+0x66>
 8002b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fbd3 	bl	80032fa <UART_Receive_IT>
      return;
 8002b54:	e256      	b.n	8003004 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80de 	beq.w	8002d1c <HAL_UART_IRQHandler+0x22c>
 8002b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d106      	bne.n	8002b7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80d1 	beq.w	8002d1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_UART_IRQHandler+0xae>
 8002b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f043 0201 	orr.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00b      	beq.n	8002bc2 <HAL_UART_IRQHandler+0xd2>
 8002baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f043 0202 	orr.w	r2, r3, #2
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <HAL_UART_IRQHandler+0xf6>
 8002bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f043 0204 	orr.w	r2, r3, #4
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d011      	beq.n	8002c16 <HAL_UART_IRQHandler+0x126>
 8002bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d105      	bne.n	8002c0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f043 0208 	orr.w	r2, r3, #8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 81ed 	beq.w	8002ffa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_UART_IRQHandler+0x14e>
 8002c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 fb5e 	bl	80032fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d103      	bne.n	8002c6a <HAL_UART_IRQHandler+0x17a>
 8002c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d04f      	beq.n	8002d0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fa66 	bl	800313c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7a:	2b40      	cmp	r3, #64	; 0x40
 8002c7c:	d141      	bne.n	8002d02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3314      	adds	r3, #20
 8002c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c8c:	e853 3f00 	ldrex	r3, [r3]
 8002c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3314      	adds	r3, #20
 8002ca6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002caa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cba:	e841 2300 	strex	r3, r2, [r1]
 8002cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1d9      	bne.n	8002c7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d013      	beq.n	8002cfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd6:	4a7d      	ldr	r2, [pc, #500]	; (8002ecc <HAL_UART_IRQHandler+0x3dc>)
 8002cd8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fabf 	bl	8001262 <HAL_DMA_Abort_IT>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf8:	e00e      	b.n	8002d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f99a 	bl	8003034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d00:	e00a      	b.n	8002d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f996 	bl	8003034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d08:	e006      	b.n	8002d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f992 	bl	8003034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d16:	e170      	b.n	8002ffa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d18:	bf00      	nop
    return;
 8002d1a:	e16e      	b.n	8002ffa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	f040 814a 	bne.w	8002fba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8143 	beq.w	8002fba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 813c 	beq.w	8002fba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b40      	cmp	r3, #64	; 0x40
 8002d64:	f040 80b4 	bne.w	8002ed0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8140 	beq.w	8002ffe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d86:	429a      	cmp	r2, r3
 8002d88:	f080 8139 	bcs.w	8002ffe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d9e:	f000 8088 	beq.w	8002eb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	330c      	adds	r3, #12
 8002da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	330c      	adds	r3, #12
 8002dca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002dce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dde:	e841 2300 	strex	r3, r2, [r1]
 8002de2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1d9      	bne.n	8002da2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3314      	adds	r3, #20
 8002df4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3314      	adds	r3, #20
 8002e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e1      	bne.n	8002dee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3314      	adds	r3, #20
 8002e30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e34:	e853 3f00 	ldrex	r3, [r3]
 8002e38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3314      	adds	r3, #20
 8002e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e56:	e841 2300 	strex	r3, r2, [r1]
 8002e5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1e3      	bne.n	8002e2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e7a:	e853 3f00 	ldrex	r3, [r3]
 8002e7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e82:	f023 0310 	bic.w	r3, r3, #16
 8002e86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	330c      	adds	r3, #12
 8002e90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e94:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e9c:	e841 2300 	strex	r3, r2, [r1]
 8002ea0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e3      	bne.n	8002e70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe f968 	bl	8001182 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f8c0 	bl	8003048 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ec8:	e099      	b.n	8002ffe <HAL_UART_IRQHandler+0x50e>
 8002eca:	bf00      	nop
 8002ecc:	08003203 	.word	0x08003203
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 808b 	beq.w	8003002 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 8086 	beq.w	8003002 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	330c      	adds	r3, #12
 8002efc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f00:	e853 3f00 	ldrex	r3, [r3]
 8002f04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	330c      	adds	r3, #12
 8002f16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f1a:	647a      	str	r2, [r7, #68]	; 0x44
 8002f1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f22:	e841 2300 	strex	r3, r2, [r1]
 8002f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1e3      	bne.n	8002ef6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3314      	adds	r3, #20
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	e853 3f00 	ldrex	r3, [r3]
 8002f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3314      	adds	r3, #20
 8002f4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f52:	633a      	str	r2, [r7, #48]	; 0x30
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f5a:	e841 2300 	strex	r3, r2, [r1]
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e3      	bne.n	8002f2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	330c      	adds	r3, #12
 8002f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	e853 3f00 	ldrex	r3, [r3]
 8002f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0310 	bic.w	r3, r3, #16
 8002f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	330c      	adds	r3, #12
 8002f94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f98:	61fa      	str	r2, [r7, #28]
 8002f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9c:	69b9      	ldr	r1, [r7, #24]
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	e841 2300 	strex	r3, r2, [r1]
 8002fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1e3      	bne.n	8002f74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f848 	bl	8003048 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fb8:	e023      	b.n	8003002 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HAL_UART_IRQHandler+0x4ea>
 8002fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f929 	bl	800322a <UART_Transmit_IT>
    return;
 8002fd8:	e014      	b.n	8003004 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00e      	beq.n	8003004 <HAL_UART_IRQHandler+0x514>
 8002fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f969 	bl	80032ca <UART_EndTransmit_IT>
    return;
 8002ff8:	e004      	b.n	8003004 <HAL_UART_IRQHandler+0x514>
    return;
 8002ffa:	bf00      	nop
 8002ffc:	e002      	b.n	8003004 <HAL_UART_IRQHandler+0x514>
      return;
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <HAL_UART_IRQHandler+0x514>
      return;
 8003002:	bf00      	nop
  }
}
 8003004:	37e8      	adds	r7, #232	; 0xe8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop

0800300c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b090      	sub	sp, #64	; 0x40
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003070:	e050      	b.n	8003114 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d04c      	beq.n	8003114 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800307a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <UART_WaitOnFlagUntilTimeout+0x30>
 8003080:	f7fd ff3e 	bl	8000f00 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800308c:	429a      	cmp	r2, r3
 800308e:	d241      	bcs.n	8003114 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	330c      	adds	r3, #12
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	e853 3f00 	ldrex	r3, [r3]
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030b0:	637a      	str	r2, [r7, #52]	; 0x34
 80030b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030b8:	e841 2300 	strex	r3, r2, [r1]
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e5      	bne.n	8003090 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3314      	adds	r3, #20
 80030ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	e853 3f00 	ldrex	r3, [r3]
 80030d2:	613b      	str	r3, [r7, #16]
   return(result);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f023 0301 	bic.w	r3, r3, #1
 80030da:	63bb      	str	r3, [r7, #56]	; 0x38
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3314      	adds	r3, #20
 80030e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030e4:	623a      	str	r2, [r7, #32]
 80030e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e8:	69f9      	ldr	r1, [r7, #28]
 80030ea:	6a3a      	ldr	r2, [r7, #32]
 80030ec:	e841 2300 	strex	r3, r2, [r1]
 80030f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1e5      	bne.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e00f      	b.n	8003134 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4013      	ands	r3, r2
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	429a      	cmp	r2, r3
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	429a      	cmp	r2, r3
 8003130:	d09f      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3740      	adds	r7, #64	; 0x40
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800313c:	b480      	push	{r7}
 800313e:	b095      	sub	sp, #84	; 0x54
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	330c      	adds	r3, #12
 800314a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314e:	e853 3f00 	ldrex	r3, [r3]
 8003152:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800315a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	330c      	adds	r3, #12
 8003162:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003164:	643a      	str	r2, [r7, #64]	; 0x40
 8003166:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003168:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800316a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800316c:	e841 2300 	strex	r3, r2, [r1]
 8003170:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e5      	bne.n	8003144 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3314      	adds	r3, #20
 800317e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	e853 3f00 	ldrex	r3, [r3]
 8003186:	61fb      	str	r3, [r7, #28]
   return(result);
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3314      	adds	r3, #20
 8003196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003198:	62fa      	str	r2, [r7, #44]	; 0x2c
 800319a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800319e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031a0:	e841 2300 	strex	r3, r2, [r1]
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e5      	bne.n	8003178 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d119      	bne.n	80031e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	330c      	adds	r3, #12
 80031ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	e853 3f00 	ldrex	r3, [r3]
 80031c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f023 0310 	bic.w	r3, r3, #16
 80031ca:	647b      	str	r3, [r7, #68]	; 0x44
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	330c      	adds	r3, #12
 80031d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031d4:	61ba      	str	r2, [r7, #24]
 80031d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d8:	6979      	ldr	r1, [r7, #20]
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	e841 2300 	strex	r3, r2, [r1]
 80031e0:	613b      	str	r3, [r7, #16]
   return(result);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e5      	bne.n	80031b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031f6:	bf00      	nop
 80031f8:	3754      	adds	r7, #84	; 0x54
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f7ff ff09 	bl	8003034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800322a:	b480      	push	{r7}
 800322c:	b085      	sub	sp, #20
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b21      	cmp	r3, #33	; 0x21
 800323c:	d13e      	bne.n	80032bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003246:	d114      	bne.n	8003272 <UART_Transmit_IT+0x48>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d110      	bne.n	8003272 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003264:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	1c9a      	adds	r2, r3, #2
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	621a      	str	r2, [r3, #32]
 8003270:	e008      	b.n	8003284 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	1c59      	adds	r1, r3, #1
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6211      	str	r1, [r2, #32]
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29b      	uxth	r3, r3
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	4619      	mov	r1, r3
 8003292:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10f      	bne.n	80032b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	e000      	b.n	80032be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032bc:	2302      	movs	r3, #2
  }
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff fe8e 	bl	800300c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b08c      	sub	sp, #48	; 0x30
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b22      	cmp	r3, #34	; 0x22
 800330c:	f040 80ab 	bne.w	8003466 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003318:	d117      	bne.n	800334a <UART_Receive_IT+0x50>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d113      	bne.n	800334a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003322:	2300      	movs	r3, #0
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	b29b      	uxth	r3, r3
 8003334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003338:	b29a      	uxth	r2, r3
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	1c9a      	adds	r2, r3, #2
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	; 0x28
 8003348:	e026      	b.n	8003398 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003350:	2300      	movs	r3, #0
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335c:	d007      	beq.n	800336e <UART_Receive_IT+0x74>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10a      	bne.n	800337c <UART_Receive_IT+0x82>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	e008      	b.n	800338e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003388:	b2da      	uxtb	r2, r3
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	4619      	mov	r1, r3
 80033a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d15a      	bne.n	8003462 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0220 	bic.w	r2, r2, #32
 80033ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d135      	bne.n	8003458 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	330c      	adds	r3, #12
 80033f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	e853 3f00 	ldrex	r3, [r3]
 8003400:	613b      	str	r3, [r7, #16]
   return(result);
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f023 0310 	bic.w	r3, r3, #16
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	330c      	adds	r3, #12
 8003410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003412:	623a      	str	r2, [r7, #32]
 8003414:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003416:	69f9      	ldr	r1, [r7, #28]
 8003418:	6a3a      	ldr	r2, [r7, #32]
 800341a:	e841 2300 	strex	r3, r2, [r1]
 800341e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1e5      	bne.n	80033f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b10      	cmp	r3, #16
 8003432:	d10a      	bne.n	800344a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800344e:	4619      	mov	r1, r3
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff fdf9 	bl	8003048 <HAL_UARTEx_RxEventCallback>
 8003456:	e002      	b.n	800345e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff fde1 	bl	8003020 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e002      	b.n	8003468 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	e000      	b.n	8003468 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003466:	2302      	movs	r3, #2
  }
}
 8003468:	4618      	mov	r0, r3
 800346a:	3730      	adds	r7, #48	; 0x30
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003474:	b0c0      	sub	sp, #256	; 0x100
 8003476:	af00      	add	r7, sp, #0
 8003478:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348c:	68d9      	ldr	r1, [r3, #12]
 800348e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	ea40 0301 	orr.w	r3, r0, r1
 8003498:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034c8:	f021 010c 	bic.w	r1, r1, #12
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034d6:	430b      	orrs	r3, r1
 80034d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ea:	6999      	ldr	r1, [r3, #24]
 80034ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	ea40 0301 	orr.w	r3, r0, r1
 80034f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b8f      	ldr	r3, [pc, #572]	; (800373c <UART_SetConfig+0x2cc>)
 8003500:	429a      	cmp	r2, r3
 8003502:	d005      	beq.n	8003510 <UART_SetConfig+0xa0>
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	4b8d      	ldr	r3, [pc, #564]	; (8003740 <UART_SetConfig+0x2d0>)
 800350c:	429a      	cmp	r2, r3
 800350e:	d104      	bne.n	800351a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003510:	f7ff f958 	bl	80027c4 <HAL_RCC_GetPCLK2Freq>
 8003514:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003518:	e003      	b.n	8003522 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800351a:	f7ff f93f 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 800351e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800352c:	f040 810c 	bne.w	8003748 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003534:	2200      	movs	r2, #0
 8003536:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800353a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800353e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003542:	4622      	mov	r2, r4
 8003544:	462b      	mov	r3, r5
 8003546:	1891      	adds	r1, r2, r2
 8003548:	65b9      	str	r1, [r7, #88]	; 0x58
 800354a:	415b      	adcs	r3, r3
 800354c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800354e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003552:	4621      	mov	r1, r4
 8003554:	eb12 0801 	adds.w	r8, r2, r1
 8003558:	4629      	mov	r1, r5
 800355a:	eb43 0901 	adc.w	r9, r3, r1
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800356a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800356e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003572:	4690      	mov	r8, r2
 8003574:	4699      	mov	r9, r3
 8003576:	4623      	mov	r3, r4
 8003578:	eb18 0303 	adds.w	r3, r8, r3
 800357c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003580:	462b      	mov	r3, r5
 8003582:	eb49 0303 	adc.w	r3, r9, r3
 8003586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800358a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003596:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800359a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800359e:	460b      	mov	r3, r1
 80035a0:	18db      	adds	r3, r3, r3
 80035a2:	653b      	str	r3, [r7, #80]	; 0x50
 80035a4:	4613      	mov	r3, r2
 80035a6:	eb42 0303 	adc.w	r3, r2, r3
 80035aa:	657b      	str	r3, [r7, #84]	; 0x54
 80035ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035b4:	f7fc fe1a 	bl	80001ec <__aeabi_uldivmod>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4b61      	ldr	r3, [pc, #388]	; (8003744 <UART_SetConfig+0x2d4>)
 80035be:	fba3 2302 	umull	r2, r3, r3, r2
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	011c      	lsls	r4, r3, #4
 80035c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035d8:	4642      	mov	r2, r8
 80035da:	464b      	mov	r3, r9
 80035dc:	1891      	adds	r1, r2, r2
 80035de:	64b9      	str	r1, [r7, #72]	; 0x48
 80035e0:	415b      	adcs	r3, r3
 80035e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035e8:	4641      	mov	r1, r8
 80035ea:	eb12 0a01 	adds.w	sl, r2, r1
 80035ee:	4649      	mov	r1, r9
 80035f0:	eb43 0b01 	adc.w	fp, r3, r1
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003600:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003604:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003608:	4692      	mov	sl, r2
 800360a:	469b      	mov	fp, r3
 800360c:	4643      	mov	r3, r8
 800360e:	eb1a 0303 	adds.w	r3, sl, r3
 8003612:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003616:	464b      	mov	r3, r9
 8003618:	eb4b 0303 	adc.w	r3, fp, r3
 800361c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800362c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003630:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003634:	460b      	mov	r3, r1
 8003636:	18db      	adds	r3, r3, r3
 8003638:	643b      	str	r3, [r7, #64]	; 0x40
 800363a:	4613      	mov	r3, r2
 800363c:	eb42 0303 	adc.w	r3, r2, r3
 8003640:	647b      	str	r3, [r7, #68]	; 0x44
 8003642:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003646:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800364a:	f7fc fdcf 	bl	80001ec <__aeabi_uldivmod>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4611      	mov	r1, r2
 8003654:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <UART_SetConfig+0x2d4>)
 8003656:	fba3 2301 	umull	r2, r3, r3, r1
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	2264      	movs	r2, #100	; 0x64
 800365e:	fb02 f303 	mul.w	r3, r2, r3
 8003662:	1acb      	subs	r3, r1, r3
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800366a:	4b36      	ldr	r3, [pc, #216]	; (8003744 <UART_SetConfig+0x2d4>)
 800366c:	fba3 2302 	umull	r2, r3, r3, r2
 8003670:	095b      	lsrs	r3, r3, #5
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003678:	441c      	add	r4, r3
 800367a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800367e:	2200      	movs	r2, #0
 8003680:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003684:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003688:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800368c:	4642      	mov	r2, r8
 800368e:	464b      	mov	r3, r9
 8003690:	1891      	adds	r1, r2, r2
 8003692:	63b9      	str	r1, [r7, #56]	; 0x38
 8003694:	415b      	adcs	r3, r3
 8003696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003698:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800369c:	4641      	mov	r1, r8
 800369e:	1851      	adds	r1, r2, r1
 80036a0:	6339      	str	r1, [r7, #48]	; 0x30
 80036a2:	4649      	mov	r1, r9
 80036a4:	414b      	adcs	r3, r1
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036b4:	4659      	mov	r1, fp
 80036b6:	00cb      	lsls	r3, r1, #3
 80036b8:	4651      	mov	r1, sl
 80036ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036be:	4651      	mov	r1, sl
 80036c0:	00ca      	lsls	r2, r1, #3
 80036c2:	4610      	mov	r0, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	4603      	mov	r3, r0
 80036c8:	4642      	mov	r2, r8
 80036ca:	189b      	adds	r3, r3, r2
 80036cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036d0:	464b      	mov	r3, r9
 80036d2:	460a      	mov	r2, r1
 80036d4:	eb42 0303 	adc.w	r3, r2, r3
 80036d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036f0:	460b      	mov	r3, r1
 80036f2:	18db      	adds	r3, r3, r3
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f6:	4613      	mov	r3, r2
 80036f8:	eb42 0303 	adc.w	r3, r2, r3
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003702:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003706:	f7fc fd71 	bl	80001ec <__aeabi_uldivmod>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <UART_SetConfig+0x2d4>)
 8003710:	fba3 1302 	umull	r1, r3, r3, r2
 8003714:	095b      	lsrs	r3, r3, #5
 8003716:	2164      	movs	r1, #100	; 0x64
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	3332      	adds	r3, #50	; 0x32
 8003722:	4a08      	ldr	r2, [pc, #32]	; (8003744 <UART_SetConfig+0x2d4>)
 8003724:	fba2 2303 	umull	r2, r3, r2, r3
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	f003 0207 	and.w	r2, r3, #7
 800372e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4422      	add	r2, r4
 8003736:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003738:	e105      	b.n	8003946 <UART_SetConfig+0x4d6>
 800373a:	bf00      	nop
 800373c:	40011000 	.word	0x40011000
 8003740:	40011400 	.word	0x40011400
 8003744:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800374c:	2200      	movs	r2, #0
 800374e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003752:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003756:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800375a:	4642      	mov	r2, r8
 800375c:	464b      	mov	r3, r9
 800375e:	1891      	adds	r1, r2, r2
 8003760:	6239      	str	r1, [r7, #32]
 8003762:	415b      	adcs	r3, r3
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
 8003766:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800376a:	4641      	mov	r1, r8
 800376c:	1854      	adds	r4, r2, r1
 800376e:	4649      	mov	r1, r9
 8003770:	eb43 0501 	adc.w	r5, r3, r1
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	00eb      	lsls	r3, r5, #3
 800377e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003782:	00e2      	lsls	r2, r4, #3
 8003784:	4614      	mov	r4, r2
 8003786:	461d      	mov	r5, r3
 8003788:	4643      	mov	r3, r8
 800378a:	18e3      	adds	r3, r4, r3
 800378c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003790:	464b      	mov	r3, r9
 8003792:	eb45 0303 	adc.w	r3, r5, r3
 8003796:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800379a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037b6:	4629      	mov	r1, r5
 80037b8:	008b      	lsls	r3, r1, #2
 80037ba:	4621      	mov	r1, r4
 80037bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037c0:	4621      	mov	r1, r4
 80037c2:	008a      	lsls	r2, r1, #2
 80037c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037c8:	f7fc fd10 	bl	80001ec <__aeabi_uldivmod>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4b60      	ldr	r3, [pc, #384]	; (8003954 <UART_SetConfig+0x4e4>)
 80037d2:	fba3 2302 	umull	r2, r3, r3, r2
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	011c      	lsls	r4, r3, #4
 80037da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037de:	2200      	movs	r2, #0
 80037e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037ec:	4642      	mov	r2, r8
 80037ee:	464b      	mov	r3, r9
 80037f0:	1891      	adds	r1, r2, r2
 80037f2:	61b9      	str	r1, [r7, #24]
 80037f4:	415b      	adcs	r3, r3
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037fc:	4641      	mov	r1, r8
 80037fe:	1851      	adds	r1, r2, r1
 8003800:	6139      	str	r1, [r7, #16]
 8003802:	4649      	mov	r1, r9
 8003804:	414b      	adcs	r3, r1
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003814:	4659      	mov	r1, fp
 8003816:	00cb      	lsls	r3, r1, #3
 8003818:	4651      	mov	r1, sl
 800381a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800381e:	4651      	mov	r1, sl
 8003820:	00ca      	lsls	r2, r1, #3
 8003822:	4610      	mov	r0, r2
 8003824:	4619      	mov	r1, r3
 8003826:	4603      	mov	r3, r0
 8003828:	4642      	mov	r2, r8
 800382a:	189b      	adds	r3, r3, r2
 800382c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003830:	464b      	mov	r3, r9
 8003832:	460a      	mov	r2, r1
 8003834:	eb42 0303 	adc.w	r3, r2, r3
 8003838:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	67bb      	str	r3, [r7, #120]	; 0x78
 8003846:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003854:	4649      	mov	r1, r9
 8003856:	008b      	lsls	r3, r1, #2
 8003858:	4641      	mov	r1, r8
 800385a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800385e:	4641      	mov	r1, r8
 8003860:	008a      	lsls	r2, r1, #2
 8003862:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003866:	f7fc fcc1 	bl	80001ec <__aeabi_uldivmod>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4b39      	ldr	r3, [pc, #228]	; (8003954 <UART_SetConfig+0x4e4>)
 8003870:	fba3 1302 	umull	r1, r3, r3, r2
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	2164      	movs	r1, #100	; 0x64
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	3332      	adds	r3, #50	; 0x32
 8003882:	4a34      	ldr	r2, [pc, #208]	; (8003954 <UART_SetConfig+0x4e4>)
 8003884:	fba2 2303 	umull	r2, r3, r2, r3
 8003888:	095b      	lsrs	r3, r3, #5
 800388a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800388e:	441c      	add	r4, r3
 8003890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003894:	2200      	movs	r2, #0
 8003896:	673b      	str	r3, [r7, #112]	; 0x70
 8003898:	677a      	str	r2, [r7, #116]	; 0x74
 800389a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800389e:	4642      	mov	r2, r8
 80038a0:	464b      	mov	r3, r9
 80038a2:	1891      	adds	r1, r2, r2
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	415b      	adcs	r3, r3
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ae:	4641      	mov	r1, r8
 80038b0:	1851      	adds	r1, r2, r1
 80038b2:	6039      	str	r1, [r7, #0]
 80038b4:	4649      	mov	r1, r9
 80038b6:	414b      	adcs	r3, r1
 80038b8:	607b      	str	r3, [r7, #4]
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038c6:	4659      	mov	r1, fp
 80038c8:	00cb      	lsls	r3, r1, #3
 80038ca:	4651      	mov	r1, sl
 80038cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038d0:	4651      	mov	r1, sl
 80038d2:	00ca      	lsls	r2, r1, #3
 80038d4:	4610      	mov	r0, r2
 80038d6:	4619      	mov	r1, r3
 80038d8:	4603      	mov	r3, r0
 80038da:	4642      	mov	r2, r8
 80038dc:	189b      	adds	r3, r3, r2
 80038de:	66bb      	str	r3, [r7, #104]	; 0x68
 80038e0:	464b      	mov	r3, r9
 80038e2:	460a      	mov	r2, r1
 80038e4:	eb42 0303 	adc.w	r3, r2, r3
 80038e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	663b      	str	r3, [r7, #96]	; 0x60
 80038f4:	667a      	str	r2, [r7, #100]	; 0x64
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003902:	4649      	mov	r1, r9
 8003904:	008b      	lsls	r3, r1, #2
 8003906:	4641      	mov	r1, r8
 8003908:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800390c:	4641      	mov	r1, r8
 800390e:	008a      	lsls	r2, r1, #2
 8003910:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003914:	f7fc fc6a 	bl	80001ec <__aeabi_uldivmod>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <UART_SetConfig+0x4e4>)
 800391e:	fba3 1302 	umull	r1, r3, r3, r2
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	2164      	movs	r1, #100	; 0x64
 8003926:	fb01 f303 	mul.w	r3, r1, r3
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	3332      	adds	r3, #50	; 0x32
 8003930:	4a08      	ldr	r2, [pc, #32]	; (8003954 <UART_SetConfig+0x4e4>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	f003 020f 	and.w	r2, r3, #15
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4422      	add	r2, r4
 8003944:	609a      	str	r2, [r3, #8]
}
 8003946:	bf00      	nop
 8003948:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800394c:	46bd      	mov	sp, r7
 800394e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003952:	bf00      	nop
 8003954:	51eb851f 	.word	0x51eb851f

08003958 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003958:	b084      	sub	sp, #16
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	f107 001c 	add.w	r0, r7, #28
 8003966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	2b01      	cmp	r3, #1
 800396e:	d122      	bne.n	80039b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800399a:	2b01      	cmp	r3, #1
 800399c:	d105      	bne.n	80039aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 faa2 	bl	8003ef4 <USB_CoreReset>
 80039b0:	4603      	mov	r3, r0
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	e01a      	b.n	80039ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fa96 	bl	8003ef4 <USB_CoreReset>
 80039c8:	4603      	mov	r3, r0
 80039ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80039cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	639a      	str	r2, [r3, #56]	; 0x38
 80039de:	e005      	b.n	80039ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80039ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d10b      	bne.n	8003a0a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f043 0206 	orr.w	r2, r3, #6
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a16:	b004      	add	sp, #16
 8003a18:	4770      	bx	lr

08003a1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f023 0201 	bic.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d115      	bne.n	8003a8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	f7fd fa54 	bl	8000f18 <HAL_Delay>
      ms++;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3301      	adds	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fa2e 	bl	8003ed8 <USB_GetMode>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d01e      	beq.n	8003ac0 <USB_SetCurrentMode+0x84>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2b31      	cmp	r3, #49	; 0x31
 8003a86:	d9f0      	bls.n	8003a6a <USB_SetCurrentMode+0x2e>
 8003a88:	e01a      	b.n	8003ac0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d115      	bne.n	8003abc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	f7fd fa3b 	bl	8000f18 <HAL_Delay>
      ms++;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fa15 	bl	8003ed8 <USB_GetMode>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <USB_SetCurrentMode+0x84>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b31      	cmp	r3, #49	; 0x31
 8003ab8:	d9f0      	bls.n	8003a9c <USB_SetCurrentMode+0x60>
 8003aba:	e001      	b.n	8003ac0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e005      	b.n	8003acc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b32      	cmp	r3, #50	; 0x32
 8003ac4:	d101      	bne.n	8003aca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b086      	sub	sp, #24
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ae2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	e009      	b.n	8003b08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	3340      	adds	r3, #64	; 0x40
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	2200      	movs	r2, #0
 8003b00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	3301      	adds	r3, #1
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	2b0e      	cmp	r3, #14
 8003b0c:	d9f2      	bls.n	8003af4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d11c      	bne.n	8003b4e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b22:	f043 0302 	orr.w	r3, r3, #2
 8003b26:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38
 8003b4c:	e00b      	b.n	8003b66 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b52:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2300      	movs	r3, #0
 8003b70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b78:	4619      	mov	r1, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b80:	461a      	mov	r2, r3
 8003b82:	680b      	ldr	r3, [r1, #0]
 8003b84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d10c      	bne.n	8003ba6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d104      	bne.n	8003b9c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b92:	2100      	movs	r1, #0
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f965 	bl	8003e64 <USB_SetDevSpeed>
 8003b9a:	e008      	b.n	8003bae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f960 	bl	8003e64 <USB_SetDevSpeed>
 8003ba4:	e003      	b.n	8003bae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ba6:	2103      	movs	r1, #3
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f95b 	bl	8003e64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003bae:	2110      	movs	r1, #16
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f8f3 	bl	8003d9c <USB_FlushTxFifo>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f91f 	bl	8003e04 <USB_FlushRxFifo>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	2300      	movs	r3, #0
 8003bda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be2:	461a      	mov	r2, r3
 8003be4:	2300      	movs	r3, #0
 8003be6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	e043      	b.n	8003c82 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c10:	d118      	bne.n	8003c44 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c24:	461a      	mov	r2, r3
 8003c26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	e013      	b.n	8003c56 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e008      	b.n	8003c56 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c50:	461a      	mov	r2, r3
 8003c52:	2300      	movs	r3, #0
 8003c54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c62:	461a      	mov	r2, r3
 8003c64:	2300      	movs	r3, #0
 8003c66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c74:	461a      	mov	r2, r3
 8003c76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d3b7      	bcc.n	8003bfa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	e043      	b.n	8003d18 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ca6:	d118      	bne.n	8003cda <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e013      	b.n	8003cec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	e008      	b.n	8003cec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2300      	movs	r3, #0
 8003cea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	3301      	adds	r3, #1
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d3b7      	bcc.n	8003c90 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d105      	bne.n	8003d54 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f043 0210 	orr.w	r2, r3, #16
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699a      	ldr	r2, [r3, #24]
 8003d58:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <USB_DevInit+0x2c4>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d005      	beq.n	8003d72 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f043 0208 	orr.w	r2, r3, #8
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d107      	bne.n	8003d88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d80:	f043 0304 	orr.w	r3, r3, #4
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d94:	b004      	add	sp, #16
 8003d96:	4770      	bx	lr
 8003d98:	803c3800 	.word	0x803c3800

08003d9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3301      	adds	r3, #1
 8003dae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a13      	ldr	r2, [pc, #76]	; (8003e00 <USB_FlushTxFifo+0x64>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e01b      	b.n	8003df4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	daf2      	bge.n	8003daa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	019b      	lsls	r3, r3, #6
 8003dcc:	f043 0220 	orr.w	r2, r3, #32
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a08      	ldr	r2, [pc, #32]	; (8003e00 <USB_FlushTxFifo+0x64>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d901      	bls.n	8003de6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e006      	b.n	8003df4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d0f0      	beq.n	8003dd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	00030d40 	.word	0x00030d40

08003e04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4a11      	ldr	r2, [pc, #68]	; (8003e60 <USB_FlushRxFifo+0x5c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e018      	b.n	8003e54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	daf2      	bge.n	8003e10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2210      	movs	r2, #16
 8003e32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3301      	adds	r3, #1
 8003e38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4a08      	ldr	r2, [pc, #32]	; (8003e60 <USB_FlushRxFifo+0x5c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e006      	b.n	8003e54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d0f0      	beq.n	8003e34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	00030d40 	.word	0x00030d40

08003e64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	68f9      	ldr	r1, [r7, #12]
 8003e80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e84:	4313      	orrs	r3, r2
 8003e86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b085      	sub	sp, #20
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003eb0:	f023 0303 	bic.w	r3, r3, #3
 8003eb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec4:	f043 0302 	orr.w	r3, r3, #2
 8003ec8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3301      	adds	r3, #1
 8003f04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4a13      	ldr	r2, [pc, #76]	; (8003f58 <USB_CoreReset+0x64>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e01b      	b.n	8003f4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	daf2      	bge.n	8003f00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f043 0201 	orr.w	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4a09      	ldr	r2, [pc, #36]	; (8003f58 <USB_CoreReset+0x64>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d901      	bls.n	8003f3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e006      	b.n	8003f4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d0f0      	beq.n	8003f2a <USB_CoreReset+0x36>

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	00030d40 	.word	0x00030d40

08003f5c <__errno>:
 8003f5c:	4b01      	ldr	r3, [pc, #4]	; (8003f64 <__errno+0x8>)
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	2000000c 	.word	0x2000000c

08003f68 <__libc_init_array>:
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	4d0d      	ldr	r5, [pc, #52]	; (8003fa0 <__libc_init_array+0x38>)
 8003f6c:	4c0d      	ldr	r4, [pc, #52]	; (8003fa4 <__libc_init_array+0x3c>)
 8003f6e:	1b64      	subs	r4, r4, r5
 8003f70:	10a4      	asrs	r4, r4, #2
 8003f72:	2600      	movs	r6, #0
 8003f74:	42a6      	cmp	r6, r4
 8003f76:	d109      	bne.n	8003f8c <__libc_init_array+0x24>
 8003f78:	4d0b      	ldr	r5, [pc, #44]	; (8003fa8 <__libc_init_array+0x40>)
 8003f7a:	4c0c      	ldr	r4, [pc, #48]	; (8003fac <__libc_init_array+0x44>)
 8003f7c:	f000 fc66 	bl	800484c <_init>
 8003f80:	1b64      	subs	r4, r4, r5
 8003f82:	10a4      	asrs	r4, r4, #2
 8003f84:	2600      	movs	r6, #0
 8003f86:	42a6      	cmp	r6, r4
 8003f88:	d105      	bne.n	8003f96 <__libc_init_array+0x2e>
 8003f8a:	bd70      	pop	{r4, r5, r6, pc}
 8003f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f90:	4798      	blx	r3
 8003f92:	3601      	adds	r6, #1
 8003f94:	e7ee      	b.n	8003f74 <__libc_init_array+0xc>
 8003f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f9a:	4798      	blx	r3
 8003f9c:	3601      	adds	r6, #1
 8003f9e:	e7f2      	b.n	8003f86 <__libc_init_array+0x1e>
 8003fa0:	080048e8 	.word	0x080048e8
 8003fa4:	080048e8 	.word	0x080048e8
 8003fa8:	080048e8 	.word	0x080048e8
 8003fac:	080048ec 	.word	0x080048ec

08003fb0 <memset>:
 8003fb0:	4402      	add	r2, r0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d100      	bne.n	8003fba <memset+0xa>
 8003fb8:	4770      	bx	lr
 8003fba:	f803 1b01 	strb.w	r1, [r3], #1
 8003fbe:	e7f9      	b.n	8003fb4 <memset+0x4>

08003fc0 <setvbuf>:
 8003fc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003fc4:	461d      	mov	r5, r3
 8003fc6:	4b5d      	ldr	r3, [pc, #372]	; (800413c <setvbuf+0x17c>)
 8003fc8:	681f      	ldr	r7, [r3, #0]
 8003fca:	4604      	mov	r4, r0
 8003fcc:	460e      	mov	r6, r1
 8003fce:	4690      	mov	r8, r2
 8003fd0:	b127      	cbz	r7, 8003fdc <setvbuf+0x1c>
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	b913      	cbnz	r3, 8003fdc <setvbuf+0x1c>
 8003fd6:	4638      	mov	r0, r7
 8003fd8:	f000 f9d2 	bl	8004380 <__sinit>
 8003fdc:	4b58      	ldr	r3, [pc, #352]	; (8004140 <setvbuf+0x180>)
 8003fde:	429c      	cmp	r4, r3
 8003fe0:	d167      	bne.n	80040b2 <setvbuf+0xf2>
 8003fe2:	687c      	ldr	r4, [r7, #4]
 8003fe4:	f1b8 0f02 	cmp.w	r8, #2
 8003fe8:	d006      	beq.n	8003ff8 <setvbuf+0x38>
 8003fea:	f1b8 0f01 	cmp.w	r8, #1
 8003fee:	f200 809f 	bhi.w	8004130 <setvbuf+0x170>
 8003ff2:	2d00      	cmp	r5, #0
 8003ff4:	f2c0 809c 	blt.w	8004130 <setvbuf+0x170>
 8003ff8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ffa:	07db      	lsls	r3, r3, #31
 8003ffc:	d405      	bmi.n	800400a <setvbuf+0x4a>
 8003ffe:	89a3      	ldrh	r3, [r4, #12]
 8004000:	0598      	lsls	r0, r3, #22
 8004002:	d402      	bmi.n	800400a <setvbuf+0x4a>
 8004004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004006:	f000 fa59 	bl	80044bc <__retarget_lock_acquire_recursive>
 800400a:	4621      	mov	r1, r4
 800400c:	4638      	mov	r0, r7
 800400e:	f000 f923 	bl	8004258 <_fflush_r>
 8004012:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004014:	b141      	cbz	r1, 8004028 <setvbuf+0x68>
 8004016:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800401a:	4299      	cmp	r1, r3
 800401c:	d002      	beq.n	8004024 <setvbuf+0x64>
 800401e:	4638      	mov	r0, r7
 8004020:	f000 fa7c 	bl	800451c <_free_r>
 8004024:	2300      	movs	r3, #0
 8004026:	6363      	str	r3, [r4, #52]	; 0x34
 8004028:	2300      	movs	r3, #0
 800402a:	61a3      	str	r3, [r4, #24]
 800402c:	6063      	str	r3, [r4, #4]
 800402e:	89a3      	ldrh	r3, [r4, #12]
 8004030:	0619      	lsls	r1, r3, #24
 8004032:	d503      	bpl.n	800403c <setvbuf+0x7c>
 8004034:	6921      	ldr	r1, [r4, #16]
 8004036:	4638      	mov	r0, r7
 8004038:	f000 fa70 	bl	800451c <_free_r>
 800403c:	89a3      	ldrh	r3, [r4, #12]
 800403e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004042:	f023 0303 	bic.w	r3, r3, #3
 8004046:	f1b8 0f02 	cmp.w	r8, #2
 800404a:	81a3      	strh	r3, [r4, #12]
 800404c:	d06c      	beq.n	8004128 <setvbuf+0x168>
 800404e:	ab01      	add	r3, sp, #4
 8004050:	466a      	mov	r2, sp
 8004052:	4621      	mov	r1, r4
 8004054:	4638      	mov	r0, r7
 8004056:	f000 fa33 	bl	80044c0 <__swhatbuf_r>
 800405a:	89a3      	ldrh	r3, [r4, #12]
 800405c:	4318      	orrs	r0, r3
 800405e:	81a0      	strh	r0, [r4, #12]
 8004060:	2d00      	cmp	r5, #0
 8004062:	d130      	bne.n	80040c6 <setvbuf+0x106>
 8004064:	9d00      	ldr	r5, [sp, #0]
 8004066:	4628      	mov	r0, r5
 8004068:	f000 fa50 	bl	800450c <malloc>
 800406c:	4606      	mov	r6, r0
 800406e:	2800      	cmp	r0, #0
 8004070:	d155      	bne.n	800411e <setvbuf+0x15e>
 8004072:	f8dd 9000 	ldr.w	r9, [sp]
 8004076:	45a9      	cmp	r9, r5
 8004078:	d14a      	bne.n	8004110 <setvbuf+0x150>
 800407a:	f04f 35ff 	mov.w	r5, #4294967295
 800407e:	2200      	movs	r2, #0
 8004080:	60a2      	str	r2, [r4, #8]
 8004082:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004086:	6022      	str	r2, [r4, #0]
 8004088:	6122      	str	r2, [r4, #16]
 800408a:	2201      	movs	r2, #1
 800408c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004090:	6162      	str	r2, [r4, #20]
 8004092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004094:	f043 0302 	orr.w	r3, r3, #2
 8004098:	07d2      	lsls	r2, r2, #31
 800409a:	81a3      	strh	r3, [r4, #12]
 800409c:	d405      	bmi.n	80040aa <setvbuf+0xea>
 800409e:	f413 7f00 	tst.w	r3, #512	; 0x200
 80040a2:	d102      	bne.n	80040aa <setvbuf+0xea>
 80040a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040a6:	f000 fa0a 	bl	80044be <__retarget_lock_release_recursive>
 80040aa:	4628      	mov	r0, r5
 80040ac:	b003      	add	sp, #12
 80040ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040b2:	4b24      	ldr	r3, [pc, #144]	; (8004144 <setvbuf+0x184>)
 80040b4:	429c      	cmp	r4, r3
 80040b6:	d101      	bne.n	80040bc <setvbuf+0xfc>
 80040b8:	68bc      	ldr	r4, [r7, #8]
 80040ba:	e793      	b.n	8003fe4 <setvbuf+0x24>
 80040bc:	4b22      	ldr	r3, [pc, #136]	; (8004148 <setvbuf+0x188>)
 80040be:	429c      	cmp	r4, r3
 80040c0:	bf08      	it	eq
 80040c2:	68fc      	ldreq	r4, [r7, #12]
 80040c4:	e78e      	b.n	8003fe4 <setvbuf+0x24>
 80040c6:	2e00      	cmp	r6, #0
 80040c8:	d0cd      	beq.n	8004066 <setvbuf+0xa6>
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	b913      	cbnz	r3, 80040d4 <setvbuf+0x114>
 80040ce:	4638      	mov	r0, r7
 80040d0:	f000 f956 	bl	8004380 <__sinit>
 80040d4:	f1b8 0f01 	cmp.w	r8, #1
 80040d8:	bf08      	it	eq
 80040da:	89a3      	ldrheq	r3, [r4, #12]
 80040dc:	6026      	str	r6, [r4, #0]
 80040de:	bf04      	itt	eq
 80040e0:	f043 0301 	orreq.w	r3, r3, #1
 80040e4:	81a3      	strheq	r3, [r4, #12]
 80040e6:	89a2      	ldrh	r2, [r4, #12]
 80040e8:	f012 0308 	ands.w	r3, r2, #8
 80040ec:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80040f0:	d01c      	beq.n	800412c <setvbuf+0x16c>
 80040f2:	07d3      	lsls	r3, r2, #31
 80040f4:	bf41      	itttt	mi
 80040f6:	2300      	movmi	r3, #0
 80040f8:	426d      	negmi	r5, r5
 80040fa:	60a3      	strmi	r3, [r4, #8]
 80040fc:	61a5      	strmi	r5, [r4, #24]
 80040fe:	bf58      	it	pl
 8004100:	60a5      	strpl	r5, [r4, #8]
 8004102:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004104:	f015 0501 	ands.w	r5, r5, #1
 8004108:	d115      	bne.n	8004136 <setvbuf+0x176>
 800410a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800410e:	e7c8      	b.n	80040a2 <setvbuf+0xe2>
 8004110:	4648      	mov	r0, r9
 8004112:	f000 f9fb 	bl	800450c <malloc>
 8004116:	4606      	mov	r6, r0
 8004118:	2800      	cmp	r0, #0
 800411a:	d0ae      	beq.n	800407a <setvbuf+0xba>
 800411c:	464d      	mov	r5, r9
 800411e:	89a3      	ldrh	r3, [r4, #12]
 8004120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004124:	81a3      	strh	r3, [r4, #12]
 8004126:	e7d0      	b.n	80040ca <setvbuf+0x10a>
 8004128:	2500      	movs	r5, #0
 800412a:	e7a8      	b.n	800407e <setvbuf+0xbe>
 800412c:	60a3      	str	r3, [r4, #8]
 800412e:	e7e8      	b.n	8004102 <setvbuf+0x142>
 8004130:	f04f 35ff 	mov.w	r5, #4294967295
 8004134:	e7b9      	b.n	80040aa <setvbuf+0xea>
 8004136:	2500      	movs	r5, #0
 8004138:	e7b7      	b.n	80040aa <setvbuf+0xea>
 800413a:	bf00      	nop
 800413c:	2000000c 	.word	0x2000000c
 8004140:	080048a0 	.word	0x080048a0
 8004144:	080048c0 	.word	0x080048c0
 8004148:	08004880 	.word	0x08004880

0800414c <__sflush_r>:
 800414c:	898a      	ldrh	r2, [r1, #12]
 800414e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004152:	4605      	mov	r5, r0
 8004154:	0710      	lsls	r0, r2, #28
 8004156:	460c      	mov	r4, r1
 8004158:	d458      	bmi.n	800420c <__sflush_r+0xc0>
 800415a:	684b      	ldr	r3, [r1, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	dc05      	bgt.n	800416c <__sflush_r+0x20>
 8004160:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	dc02      	bgt.n	800416c <__sflush_r+0x20>
 8004166:	2000      	movs	r0, #0
 8004168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800416c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800416e:	2e00      	cmp	r6, #0
 8004170:	d0f9      	beq.n	8004166 <__sflush_r+0x1a>
 8004172:	2300      	movs	r3, #0
 8004174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004178:	682f      	ldr	r7, [r5, #0]
 800417a:	602b      	str	r3, [r5, #0]
 800417c:	d032      	beq.n	80041e4 <__sflush_r+0x98>
 800417e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	075a      	lsls	r2, r3, #29
 8004184:	d505      	bpl.n	8004192 <__sflush_r+0x46>
 8004186:	6863      	ldr	r3, [r4, #4]
 8004188:	1ac0      	subs	r0, r0, r3
 800418a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800418c:	b10b      	cbz	r3, 8004192 <__sflush_r+0x46>
 800418e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004190:	1ac0      	subs	r0, r0, r3
 8004192:	2300      	movs	r3, #0
 8004194:	4602      	mov	r2, r0
 8004196:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004198:	6a21      	ldr	r1, [r4, #32]
 800419a:	4628      	mov	r0, r5
 800419c:	47b0      	blx	r6
 800419e:	1c43      	adds	r3, r0, #1
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	d106      	bne.n	80041b2 <__sflush_r+0x66>
 80041a4:	6829      	ldr	r1, [r5, #0]
 80041a6:	291d      	cmp	r1, #29
 80041a8:	d82c      	bhi.n	8004204 <__sflush_r+0xb8>
 80041aa:	4a2a      	ldr	r2, [pc, #168]	; (8004254 <__sflush_r+0x108>)
 80041ac:	40ca      	lsrs	r2, r1
 80041ae:	07d6      	lsls	r6, r2, #31
 80041b0:	d528      	bpl.n	8004204 <__sflush_r+0xb8>
 80041b2:	2200      	movs	r2, #0
 80041b4:	6062      	str	r2, [r4, #4]
 80041b6:	04d9      	lsls	r1, r3, #19
 80041b8:	6922      	ldr	r2, [r4, #16]
 80041ba:	6022      	str	r2, [r4, #0]
 80041bc:	d504      	bpl.n	80041c8 <__sflush_r+0x7c>
 80041be:	1c42      	adds	r2, r0, #1
 80041c0:	d101      	bne.n	80041c6 <__sflush_r+0x7a>
 80041c2:	682b      	ldr	r3, [r5, #0]
 80041c4:	b903      	cbnz	r3, 80041c8 <__sflush_r+0x7c>
 80041c6:	6560      	str	r0, [r4, #84]	; 0x54
 80041c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041ca:	602f      	str	r7, [r5, #0]
 80041cc:	2900      	cmp	r1, #0
 80041ce:	d0ca      	beq.n	8004166 <__sflush_r+0x1a>
 80041d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041d4:	4299      	cmp	r1, r3
 80041d6:	d002      	beq.n	80041de <__sflush_r+0x92>
 80041d8:	4628      	mov	r0, r5
 80041da:	f000 f99f 	bl	800451c <_free_r>
 80041de:	2000      	movs	r0, #0
 80041e0:	6360      	str	r0, [r4, #52]	; 0x34
 80041e2:	e7c1      	b.n	8004168 <__sflush_r+0x1c>
 80041e4:	6a21      	ldr	r1, [r4, #32]
 80041e6:	2301      	movs	r3, #1
 80041e8:	4628      	mov	r0, r5
 80041ea:	47b0      	blx	r6
 80041ec:	1c41      	adds	r1, r0, #1
 80041ee:	d1c7      	bne.n	8004180 <__sflush_r+0x34>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0c4      	beq.n	8004180 <__sflush_r+0x34>
 80041f6:	2b1d      	cmp	r3, #29
 80041f8:	d001      	beq.n	80041fe <__sflush_r+0xb2>
 80041fa:	2b16      	cmp	r3, #22
 80041fc:	d101      	bne.n	8004202 <__sflush_r+0xb6>
 80041fe:	602f      	str	r7, [r5, #0]
 8004200:	e7b1      	b.n	8004166 <__sflush_r+0x1a>
 8004202:	89a3      	ldrh	r3, [r4, #12]
 8004204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004208:	81a3      	strh	r3, [r4, #12]
 800420a:	e7ad      	b.n	8004168 <__sflush_r+0x1c>
 800420c:	690f      	ldr	r7, [r1, #16]
 800420e:	2f00      	cmp	r7, #0
 8004210:	d0a9      	beq.n	8004166 <__sflush_r+0x1a>
 8004212:	0793      	lsls	r3, r2, #30
 8004214:	680e      	ldr	r6, [r1, #0]
 8004216:	bf08      	it	eq
 8004218:	694b      	ldreq	r3, [r1, #20]
 800421a:	600f      	str	r7, [r1, #0]
 800421c:	bf18      	it	ne
 800421e:	2300      	movne	r3, #0
 8004220:	eba6 0807 	sub.w	r8, r6, r7
 8004224:	608b      	str	r3, [r1, #8]
 8004226:	f1b8 0f00 	cmp.w	r8, #0
 800422a:	dd9c      	ble.n	8004166 <__sflush_r+0x1a>
 800422c:	6a21      	ldr	r1, [r4, #32]
 800422e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004230:	4643      	mov	r3, r8
 8004232:	463a      	mov	r2, r7
 8004234:	4628      	mov	r0, r5
 8004236:	47b0      	blx	r6
 8004238:	2800      	cmp	r0, #0
 800423a:	dc06      	bgt.n	800424a <__sflush_r+0xfe>
 800423c:	89a3      	ldrh	r3, [r4, #12]
 800423e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004242:	81a3      	strh	r3, [r4, #12]
 8004244:	f04f 30ff 	mov.w	r0, #4294967295
 8004248:	e78e      	b.n	8004168 <__sflush_r+0x1c>
 800424a:	4407      	add	r7, r0
 800424c:	eba8 0800 	sub.w	r8, r8, r0
 8004250:	e7e9      	b.n	8004226 <__sflush_r+0xda>
 8004252:	bf00      	nop
 8004254:	20400001 	.word	0x20400001

08004258 <_fflush_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	690b      	ldr	r3, [r1, #16]
 800425c:	4605      	mov	r5, r0
 800425e:	460c      	mov	r4, r1
 8004260:	b913      	cbnz	r3, 8004268 <_fflush_r+0x10>
 8004262:	2500      	movs	r5, #0
 8004264:	4628      	mov	r0, r5
 8004266:	bd38      	pop	{r3, r4, r5, pc}
 8004268:	b118      	cbz	r0, 8004272 <_fflush_r+0x1a>
 800426a:	6983      	ldr	r3, [r0, #24]
 800426c:	b90b      	cbnz	r3, 8004272 <_fflush_r+0x1a>
 800426e:	f000 f887 	bl	8004380 <__sinit>
 8004272:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <_fflush_r+0x6c>)
 8004274:	429c      	cmp	r4, r3
 8004276:	d11b      	bne.n	80042b0 <_fflush_r+0x58>
 8004278:	686c      	ldr	r4, [r5, #4]
 800427a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0ef      	beq.n	8004262 <_fflush_r+0xa>
 8004282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004284:	07d0      	lsls	r0, r2, #31
 8004286:	d404      	bmi.n	8004292 <_fflush_r+0x3a>
 8004288:	0599      	lsls	r1, r3, #22
 800428a:	d402      	bmi.n	8004292 <_fflush_r+0x3a>
 800428c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800428e:	f000 f915 	bl	80044bc <__retarget_lock_acquire_recursive>
 8004292:	4628      	mov	r0, r5
 8004294:	4621      	mov	r1, r4
 8004296:	f7ff ff59 	bl	800414c <__sflush_r>
 800429a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800429c:	07da      	lsls	r2, r3, #31
 800429e:	4605      	mov	r5, r0
 80042a0:	d4e0      	bmi.n	8004264 <_fflush_r+0xc>
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	059b      	lsls	r3, r3, #22
 80042a6:	d4dd      	bmi.n	8004264 <_fflush_r+0xc>
 80042a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042aa:	f000 f908 	bl	80044be <__retarget_lock_release_recursive>
 80042ae:	e7d9      	b.n	8004264 <_fflush_r+0xc>
 80042b0:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <_fflush_r+0x70>)
 80042b2:	429c      	cmp	r4, r3
 80042b4:	d101      	bne.n	80042ba <_fflush_r+0x62>
 80042b6:	68ac      	ldr	r4, [r5, #8]
 80042b8:	e7df      	b.n	800427a <_fflush_r+0x22>
 80042ba:	4b04      	ldr	r3, [pc, #16]	; (80042cc <_fflush_r+0x74>)
 80042bc:	429c      	cmp	r4, r3
 80042be:	bf08      	it	eq
 80042c0:	68ec      	ldreq	r4, [r5, #12]
 80042c2:	e7da      	b.n	800427a <_fflush_r+0x22>
 80042c4:	080048a0 	.word	0x080048a0
 80042c8:	080048c0 	.word	0x080048c0
 80042cc:	08004880 	.word	0x08004880

080042d0 <std>:
 80042d0:	2300      	movs	r3, #0
 80042d2:	b510      	push	{r4, lr}
 80042d4:	4604      	mov	r4, r0
 80042d6:	e9c0 3300 	strd	r3, r3, [r0]
 80042da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042de:	6083      	str	r3, [r0, #8]
 80042e0:	8181      	strh	r1, [r0, #12]
 80042e2:	6643      	str	r3, [r0, #100]	; 0x64
 80042e4:	81c2      	strh	r2, [r0, #14]
 80042e6:	6183      	str	r3, [r0, #24]
 80042e8:	4619      	mov	r1, r3
 80042ea:	2208      	movs	r2, #8
 80042ec:	305c      	adds	r0, #92	; 0x5c
 80042ee:	f7ff fe5f 	bl	8003fb0 <memset>
 80042f2:	4b05      	ldr	r3, [pc, #20]	; (8004308 <std+0x38>)
 80042f4:	6263      	str	r3, [r4, #36]	; 0x24
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <std+0x3c>)
 80042f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <std+0x40>)
 80042fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <std+0x44>)
 8004300:	6224      	str	r4, [r4, #32]
 8004302:	6323      	str	r3, [r4, #48]	; 0x30
 8004304:	bd10      	pop	{r4, pc}
 8004306:	bf00      	nop
 8004308:	080046fd 	.word	0x080046fd
 800430c:	0800471f 	.word	0x0800471f
 8004310:	08004757 	.word	0x08004757
 8004314:	0800477b 	.word	0x0800477b

08004318 <_cleanup_r>:
 8004318:	4901      	ldr	r1, [pc, #4]	; (8004320 <_cleanup_r+0x8>)
 800431a:	f000 b8af 	b.w	800447c <_fwalk_reent>
 800431e:	bf00      	nop
 8004320:	08004259 	.word	0x08004259

08004324 <__sfmoreglue>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	2268      	movs	r2, #104	; 0x68
 8004328:	1e4d      	subs	r5, r1, #1
 800432a:	4355      	muls	r5, r2
 800432c:	460e      	mov	r6, r1
 800432e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004332:	f000 f95f 	bl	80045f4 <_malloc_r>
 8004336:	4604      	mov	r4, r0
 8004338:	b140      	cbz	r0, 800434c <__sfmoreglue+0x28>
 800433a:	2100      	movs	r1, #0
 800433c:	e9c0 1600 	strd	r1, r6, [r0]
 8004340:	300c      	adds	r0, #12
 8004342:	60a0      	str	r0, [r4, #8]
 8004344:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004348:	f7ff fe32 	bl	8003fb0 <memset>
 800434c:	4620      	mov	r0, r4
 800434e:	bd70      	pop	{r4, r5, r6, pc}

08004350 <__sfp_lock_acquire>:
 8004350:	4801      	ldr	r0, [pc, #4]	; (8004358 <__sfp_lock_acquire+0x8>)
 8004352:	f000 b8b3 	b.w	80044bc <__retarget_lock_acquire_recursive>
 8004356:	bf00      	nop
 8004358:	20000835 	.word	0x20000835

0800435c <__sfp_lock_release>:
 800435c:	4801      	ldr	r0, [pc, #4]	; (8004364 <__sfp_lock_release+0x8>)
 800435e:	f000 b8ae 	b.w	80044be <__retarget_lock_release_recursive>
 8004362:	bf00      	nop
 8004364:	20000835 	.word	0x20000835

08004368 <__sinit_lock_acquire>:
 8004368:	4801      	ldr	r0, [pc, #4]	; (8004370 <__sinit_lock_acquire+0x8>)
 800436a:	f000 b8a7 	b.w	80044bc <__retarget_lock_acquire_recursive>
 800436e:	bf00      	nop
 8004370:	20000836 	.word	0x20000836

08004374 <__sinit_lock_release>:
 8004374:	4801      	ldr	r0, [pc, #4]	; (800437c <__sinit_lock_release+0x8>)
 8004376:	f000 b8a2 	b.w	80044be <__retarget_lock_release_recursive>
 800437a:	bf00      	nop
 800437c:	20000836 	.word	0x20000836

08004380 <__sinit>:
 8004380:	b510      	push	{r4, lr}
 8004382:	4604      	mov	r4, r0
 8004384:	f7ff fff0 	bl	8004368 <__sinit_lock_acquire>
 8004388:	69a3      	ldr	r3, [r4, #24]
 800438a:	b11b      	cbz	r3, 8004394 <__sinit+0x14>
 800438c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004390:	f7ff bff0 	b.w	8004374 <__sinit_lock_release>
 8004394:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004398:	6523      	str	r3, [r4, #80]	; 0x50
 800439a:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <__sinit+0x68>)
 800439c:	4a13      	ldr	r2, [pc, #76]	; (80043ec <__sinit+0x6c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80043a2:	42a3      	cmp	r3, r4
 80043a4:	bf04      	itt	eq
 80043a6:	2301      	moveq	r3, #1
 80043a8:	61a3      	streq	r3, [r4, #24]
 80043aa:	4620      	mov	r0, r4
 80043ac:	f000 f820 	bl	80043f0 <__sfp>
 80043b0:	6060      	str	r0, [r4, #4]
 80043b2:	4620      	mov	r0, r4
 80043b4:	f000 f81c 	bl	80043f0 <__sfp>
 80043b8:	60a0      	str	r0, [r4, #8]
 80043ba:	4620      	mov	r0, r4
 80043bc:	f000 f818 	bl	80043f0 <__sfp>
 80043c0:	2200      	movs	r2, #0
 80043c2:	60e0      	str	r0, [r4, #12]
 80043c4:	2104      	movs	r1, #4
 80043c6:	6860      	ldr	r0, [r4, #4]
 80043c8:	f7ff ff82 	bl	80042d0 <std>
 80043cc:	68a0      	ldr	r0, [r4, #8]
 80043ce:	2201      	movs	r2, #1
 80043d0:	2109      	movs	r1, #9
 80043d2:	f7ff ff7d 	bl	80042d0 <std>
 80043d6:	68e0      	ldr	r0, [r4, #12]
 80043d8:	2202      	movs	r2, #2
 80043da:	2112      	movs	r1, #18
 80043dc:	f7ff ff78 	bl	80042d0 <std>
 80043e0:	2301      	movs	r3, #1
 80043e2:	61a3      	str	r3, [r4, #24]
 80043e4:	e7d2      	b.n	800438c <__sinit+0xc>
 80043e6:	bf00      	nop
 80043e8:	0800487c 	.word	0x0800487c
 80043ec:	08004319 	.word	0x08004319

080043f0 <__sfp>:
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	4607      	mov	r7, r0
 80043f4:	f7ff ffac 	bl	8004350 <__sfp_lock_acquire>
 80043f8:	4b1e      	ldr	r3, [pc, #120]	; (8004474 <__sfp+0x84>)
 80043fa:	681e      	ldr	r6, [r3, #0]
 80043fc:	69b3      	ldr	r3, [r6, #24]
 80043fe:	b913      	cbnz	r3, 8004406 <__sfp+0x16>
 8004400:	4630      	mov	r0, r6
 8004402:	f7ff ffbd 	bl	8004380 <__sinit>
 8004406:	3648      	adds	r6, #72	; 0x48
 8004408:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800440c:	3b01      	subs	r3, #1
 800440e:	d503      	bpl.n	8004418 <__sfp+0x28>
 8004410:	6833      	ldr	r3, [r6, #0]
 8004412:	b30b      	cbz	r3, 8004458 <__sfp+0x68>
 8004414:	6836      	ldr	r6, [r6, #0]
 8004416:	e7f7      	b.n	8004408 <__sfp+0x18>
 8004418:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800441c:	b9d5      	cbnz	r5, 8004454 <__sfp+0x64>
 800441e:	4b16      	ldr	r3, [pc, #88]	; (8004478 <__sfp+0x88>)
 8004420:	60e3      	str	r3, [r4, #12]
 8004422:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004426:	6665      	str	r5, [r4, #100]	; 0x64
 8004428:	f000 f847 	bl	80044ba <__retarget_lock_init_recursive>
 800442c:	f7ff ff96 	bl	800435c <__sfp_lock_release>
 8004430:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004434:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004438:	6025      	str	r5, [r4, #0]
 800443a:	61a5      	str	r5, [r4, #24]
 800443c:	2208      	movs	r2, #8
 800443e:	4629      	mov	r1, r5
 8004440:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004444:	f7ff fdb4 	bl	8003fb0 <memset>
 8004448:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800444c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004450:	4620      	mov	r0, r4
 8004452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004454:	3468      	adds	r4, #104	; 0x68
 8004456:	e7d9      	b.n	800440c <__sfp+0x1c>
 8004458:	2104      	movs	r1, #4
 800445a:	4638      	mov	r0, r7
 800445c:	f7ff ff62 	bl	8004324 <__sfmoreglue>
 8004460:	4604      	mov	r4, r0
 8004462:	6030      	str	r0, [r6, #0]
 8004464:	2800      	cmp	r0, #0
 8004466:	d1d5      	bne.n	8004414 <__sfp+0x24>
 8004468:	f7ff ff78 	bl	800435c <__sfp_lock_release>
 800446c:	230c      	movs	r3, #12
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	e7ee      	b.n	8004450 <__sfp+0x60>
 8004472:	bf00      	nop
 8004474:	0800487c 	.word	0x0800487c
 8004478:	ffff0001 	.word	0xffff0001

0800447c <_fwalk_reent>:
 800447c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004480:	4606      	mov	r6, r0
 8004482:	4688      	mov	r8, r1
 8004484:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004488:	2700      	movs	r7, #0
 800448a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800448e:	f1b9 0901 	subs.w	r9, r9, #1
 8004492:	d505      	bpl.n	80044a0 <_fwalk_reent+0x24>
 8004494:	6824      	ldr	r4, [r4, #0]
 8004496:	2c00      	cmp	r4, #0
 8004498:	d1f7      	bne.n	800448a <_fwalk_reent+0xe>
 800449a:	4638      	mov	r0, r7
 800449c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044a0:	89ab      	ldrh	r3, [r5, #12]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d907      	bls.n	80044b6 <_fwalk_reent+0x3a>
 80044a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044aa:	3301      	adds	r3, #1
 80044ac:	d003      	beq.n	80044b6 <_fwalk_reent+0x3a>
 80044ae:	4629      	mov	r1, r5
 80044b0:	4630      	mov	r0, r6
 80044b2:	47c0      	blx	r8
 80044b4:	4307      	orrs	r7, r0
 80044b6:	3568      	adds	r5, #104	; 0x68
 80044b8:	e7e9      	b.n	800448e <_fwalk_reent+0x12>

080044ba <__retarget_lock_init_recursive>:
 80044ba:	4770      	bx	lr

080044bc <__retarget_lock_acquire_recursive>:
 80044bc:	4770      	bx	lr

080044be <__retarget_lock_release_recursive>:
 80044be:	4770      	bx	lr

080044c0 <__swhatbuf_r>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	460e      	mov	r6, r1
 80044c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c8:	2900      	cmp	r1, #0
 80044ca:	b096      	sub	sp, #88	; 0x58
 80044cc:	4614      	mov	r4, r2
 80044ce:	461d      	mov	r5, r3
 80044d0:	da08      	bge.n	80044e4 <__swhatbuf_r+0x24>
 80044d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	602a      	str	r2, [r5, #0]
 80044da:	061a      	lsls	r2, r3, #24
 80044dc:	d410      	bmi.n	8004500 <__swhatbuf_r+0x40>
 80044de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044e2:	e00e      	b.n	8004502 <__swhatbuf_r+0x42>
 80044e4:	466a      	mov	r2, sp
 80044e6:	f000 f96f 	bl	80047c8 <_fstat_r>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	dbf1      	blt.n	80044d2 <__swhatbuf_r+0x12>
 80044ee:	9a01      	ldr	r2, [sp, #4]
 80044f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80044f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80044f8:	425a      	negs	r2, r3
 80044fa:	415a      	adcs	r2, r3
 80044fc:	602a      	str	r2, [r5, #0]
 80044fe:	e7ee      	b.n	80044de <__swhatbuf_r+0x1e>
 8004500:	2340      	movs	r3, #64	; 0x40
 8004502:	2000      	movs	r0, #0
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	b016      	add	sp, #88	; 0x58
 8004508:	bd70      	pop	{r4, r5, r6, pc}
	...

0800450c <malloc>:
 800450c:	4b02      	ldr	r3, [pc, #8]	; (8004518 <malloc+0xc>)
 800450e:	4601      	mov	r1, r0
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	f000 b86f 	b.w	80045f4 <_malloc_r>
 8004516:	bf00      	nop
 8004518:	2000000c 	.word	0x2000000c

0800451c <_free_r>:
 800451c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800451e:	2900      	cmp	r1, #0
 8004520:	d044      	beq.n	80045ac <_free_r+0x90>
 8004522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004526:	9001      	str	r0, [sp, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	f1a1 0404 	sub.w	r4, r1, #4
 800452e:	bfb8      	it	lt
 8004530:	18e4      	addlt	r4, r4, r3
 8004532:	f000 f96d 	bl	8004810 <__malloc_lock>
 8004536:	4a1e      	ldr	r2, [pc, #120]	; (80045b0 <_free_r+0x94>)
 8004538:	9801      	ldr	r0, [sp, #4]
 800453a:	6813      	ldr	r3, [r2, #0]
 800453c:	b933      	cbnz	r3, 800454c <_free_r+0x30>
 800453e:	6063      	str	r3, [r4, #4]
 8004540:	6014      	str	r4, [r2, #0]
 8004542:	b003      	add	sp, #12
 8004544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004548:	f000 b968 	b.w	800481c <__malloc_unlock>
 800454c:	42a3      	cmp	r3, r4
 800454e:	d908      	bls.n	8004562 <_free_r+0x46>
 8004550:	6825      	ldr	r5, [r4, #0]
 8004552:	1961      	adds	r1, r4, r5
 8004554:	428b      	cmp	r3, r1
 8004556:	bf01      	itttt	eq
 8004558:	6819      	ldreq	r1, [r3, #0]
 800455a:	685b      	ldreq	r3, [r3, #4]
 800455c:	1949      	addeq	r1, r1, r5
 800455e:	6021      	streq	r1, [r4, #0]
 8004560:	e7ed      	b.n	800453e <_free_r+0x22>
 8004562:	461a      	mov	r2, r3
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	b10b      	cbz	r3, 800456c <_free_r+0x50>
 8004568:	42a3      	cmp	r3, r4
 800456a:	d9fa      	bls.n	8004562 <_free_r+0x46>
 800456c:	6811      	ldr	r1, [r2, #0]
 800456e:	1855      	adds	r5, r2, r1
 8004570:	42a5      	cmp	r5, r4
 8004572:	d10b      	bne.n	800458c <_free_r+0x70>
 8004574:	6824      	ldr	r4, [r4, #0]
 8004576:	4421      	add	r1, r4
 8004578:	1854      	adds	r4, r2, r1
 800457a:	42a3      	cmp	r3, r4
 800457c:	6011      	str	r1, [r2, #0]
 800457e:	d1e0      	bne.n	8004542 <_free_r+0x26>
 8004580:	681c      	ldr	r4, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	6053      	str	r3, [r2, #4]
 8004586:	4421      	add	r1, r4
 8004588:	6011      	str	r1, [r2, #0]
 800458a:	e7da      	b.n	8004542 <_free_r+0x26>
 800458c:	d902      	bls.n	8004594 <_free_r+0x78>
 800458e:	230c      	movs	r3, #12
 8004590:	6003      	str	r3, [r0, #0]
 8004592:	e7d6      	b.n	8004542 <_free_r+0x26>
 8004594:	6825      	ldr	r5, [r4, #0]
 8004596:	1961      	adds	r1, r4, r5
 8004598:	428b      	cmp	r3, r1
 800459a:	bf04      	itt	eq
 800459c:	6819      	ldreq	r1, [r3, #0]
 800459e:	685b      	ldreq	r3, [r3, #4]
 80045a0:	6063      	str	r3, [r4, #4]
 80045a2:	bf04      	itt	eq
 80045a4:	1949      	addeq	r1, r1, r5
 80045a6:	6021      	streq	r1, [r4, #0]
 80045a8:	6054      	str	r4, [r2, #4]
 80045aa:	e7ca      	b.n	8004542 <_free_r+0x26>
 80045ac:	b003      	add	sp, #12
 80045ae:	bd30      	pop	{r4, r5, pc}
 80045b0:	20000838 	.word	0x20000838

080045b4 <sbrk_aligned>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	4e0e      	ldr	r6, [pc, #56]	; (80045f0 <sbrk_aligned+0x3c>)
 80045b8:	460c      	mov	r4, r1
 80045ba:	6831      	ldr	r1, [r6, #0]
 80045bc:	4605      	mov	r5, r0
 80045be:	b911      	cbnz	r1, 80045c6 <sbrk_aligned+0x12>
 80045c0:	f000 f88c 	bl	80046dc <_sbrk_r>
 80045c4:	6030      	str	r0, [r6, #0]
 80045c6:	4621      	mov	r1, r4
 80045c8:	4628      	mov	r0, r5
 80045ca:	f000 f887 	bl	80046dc <_sbrk_r>
 80045ce:	1c43      	adds	r3, r0, #1
 80045d0:	d00a      	beq.n	80045e8 <sbrk_aligned+0x34>
 80045d2:	1cc4      	adds	r4, r0, #3
 80045d4:	f024 0403 	bic.w	r4, r4, #3
 80045d8:	42a0      	cmp	r0, r4
 80045da:	d007      	beq.n	80045ec <sbrk_aligned+0x38>
 80045dc:	1a21      	subs	r1, r4, r0
 80045de:	4628      	mov	r0, r5
 80045e0:	f000 f87c 	bl	80046dc <_sbrk_r>
 80045e4:	3001      	adds	r0, #1
 80045e6:	d101      	bne.n	80045ec <sbrk_aligned+0x38>
 80045e8:	f04f 34ff 	mov.w	r4, #4294967295
 80045ec:	4620      	mov	r0, r4
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	2000083c 	.word	0x2000083c

080045f4 <_malloc_r>:
 80045f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f8:	1ccd      	adds	r5, r1, #3
 80045fa:	f025 0503 	bic.w	r5, r5, #3
 80045fe:	3508      	adds	r5, #8
 8004600:	2d0c      	cmp	r5, #12
 8004602:	bf38      	it	cc
 8004604:	250c      	movcc	r5, #12
 8004606:	2d00      	cmp	r5, #0
 8004608:	4607      	mov	r7, r0
 800460a:	db01      	blt.n	8004610 <_malloc_r+0x1c>
 800460c:	42a9      	cmp	r1, r5
 800460e:	d905      	bls.n	800461c <_malloc_r+0x28>
 8004610:	230c      	movs	r3, #12
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	2600      	movs	r6, #0
 8004616:	4630      	mov	r0, r6
 8004618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800461c:	4e2e      	ldr	r6, [pc, #184]	; (80046d8 <_malloc_r+0xe4>)
 800461e:	f000 f8f7 	bl	8004810 <__malloc_lock>
 8004622:	6833      	ldr	r3, [r6, #0]
 8004624:	461c      	mov	r4, r3
 8004626:	bb34      	cbnz	r4, 8004676 <_malloc_r+0x82>
 8004628:	4629      	mov	r1, r5
 800462a:	4638      	mov	r0, r7
 800462c:	f7ff ffc2 	bl	80045b4 <sbrk_aligned>
 8004630:	1c43      	adds	r3, r0, #1
 8004632:	4604      	mov	r4, r0
 8004634:	d14d      	bne.n	80046d2 <_malloc_r+0xde>
 8004636:	6834      	ldr	r4, [r6, #0]
 8004638:	4626      	mov	r6, r4
 800463a:	2e00      	cmp	r6, #0
 800463c:	d140      	bne.n	80046c0 <_malloc_r+0xcc>
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	4631      	mov	r1, r6
 8004642:	4638      	mov	r0, r7
 8004644:	eb04 0803 	add.w	r8, r4, r3
 8004648:	f000 f848 	bl	80046dc <_sbrk_r>
 800464c:	4580      	cmp	r8, r0
 800464e:	d13a      	bne.n	80046c6 <_malloc_r+0xd2>
 8004650:	6821      	ldr	r1, [r4, #0]
 8004652:	3503      	adds	r5, #3
 8004654:	1a6d      	subs	r5, r5, r1
 8004656:	f025 0503 	bic.w	r5, r5, #3
 800465a:	3508      	adds	r5, #8
 800465c:	2d0c      	cmp	r5, #12
 800465e:	bf38      	it	cc
 8004660:	250c      	movcc	r5, #12
 8004662:	4629      	mov	r1, r5
 8004664:	4638      	mov	r0, r7
 8004666:	f7ff ffa5 	bl	80045b4 <sbrk_aligned>
 800466a:	3001      	adds	r0, #1
 800466c:	d02b      	beq.n	80046c6 <_malloc_r+0xd2>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	442b      	add	r3, r5
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	e00e      	b.n	8004694 <_malloc_r+0xa0>
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	1b52      	subs	r2, r2, r5
 800467a:	d41e      	bmi.n	80046ba <_malloc_r+0xc6>
 800467c:	2a0b      	cmp	r2, #11
 800467e:	d916      	bls.n	80046ae <_malloc_r+0xba>
 8004680:	1961      	adds	r1, r4, r5
 8004682:	42a3      	cmp	r3, r4
 8004684:	6025      	str	r5, [r4, #0]
 8004686:	bf18      	it	ne
 8004688:	6059      	strne	r1, [r3, #4]
 800468a:	6863      	ldr	r3, [r4, #4]
 800468c:	bf08      	it	eq
 800468e:	6031      	streq	r1, [r6, #0]
 8004690:	5162      	str	r2, [r4, r5]
 8004692:	604b      	str	r3, [r1, #4]
 8004694:	4638      	mov	r0, r7
 8004696:	f104 060b 	add.w	r6, r4, #11
 800469a:	f000 f8bf 	bl	800481c <__malloc_unlock>
 800469e:	f026 0607 	bic.w	r6, r6, #7
 80046a2:	1d23      	adds	r3, r4, #4
 80046a4:	1af2      	subs	r2, r6, r3
 80046a6:	d0b6      	beq.n	8004616 <_malloc_r+0x22>
 80046a8:	1b9b      	subs	r3, r3, r6
 80046aa:	50a3      	str	r3, [r4, r2]
 80046ac:	e7b3      	b.n	8004616 <_malloc_r+0x22>
 80046ae:	6862      	ldr	r2, [r4, #4]
 80046b0:	42a3      	cmp	r3, r4
 80046b2:	bf0c      	ite	eq
 80046b4:	6032      	streq	r2, [r6, #0]
 80046b6:	605a      	strne	r2, [r3, #4]
 80046b8:	e7ec      	b.n	8004694 <_malloc_r+0xa0>
 80046ba:	4623      	mov	r3, r4
 80046bc:	6864      	ldr	r4, [r4, #4]
 80046be:	e7b2      	b.n	8004626 <_malloc_r+0x32>
 80046c0:	4634      	mov	r4, r6
 80046c2:	6876      	ldr	r6, [r6, #4]
 80046c4:	e7b9      	b.n	800463a <_malloc_r+0x46>
 80046c6:	230c      	movs	r3, #12
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	4638      	mov	r0, r7
 80046cc:	f000 f8a6 	bl	800481c <__malloc_unlock>
 80046d0:	e7a1      	b.n	8004616 <_malloc_r+0x22>
 80046d2:	6025      	str	r5, [r4, #0]
 80046d4:	e7de      	b.n	8004694 <_malloc_r+0xa0>
 80046d6:	bf00      	nop
 80046d8:	20000838 	.word	0x20000838

080046dc <_sbrk_r>:
 80046dc:	b538      	push	{r3, r4, r5, lr}
 80046de:	4d06      	ldr	r5, [pc, #24]	; (80046f8 <_sbrk_r+0x1c>)
 80046e0:	2300      	movs	r3, #0
 80046e2:	4604      	mov	r4, r0
 80046e4:	4608      	mov	r0, r1
 80046e6:	602b      	str	r3, [r5, #0]
 80046e8:	f7fc fb32 	bl	8000d50 <_sbrk>
 80046ec:	1c43      	adds	r3, r0, #1
 80046ee:	d102      	bne.n	80046f6 <_sbrk_r+0x1a>
 80046f0:	682b      	ldr	r3, [r5, #0]
 80046f2:	b103      	cbz	r3, 80046f6 <_sbrk_r+0x1a>
 80046f4:	6023      	str	r3, [r4, #0]
 80046f6:	bd38      	pop	{r3, r4, r5, pc}
 80046f8:	20000840 	.word	0x20000840

080046fc <__sread>:
 80046fc:	b510      	push	{r4, lr}
 80046fe:	460c      	mov	r4, r1
 8004700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004704:	f000 f890 	bl	8004828 <_read_r>
 8004708:	2800      	cmp	r0, #0
 800470a:	bfab      	itete	ge
 800470c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800470e:	89a3      	ldrhlt	r3, [r4, #12]
 8004710:	181b      	addge	r3, r3, r0
 8004712:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004716:	bfac      	ite	ge
 8004718:	6563      	strge	r3, [r4, #84]	; 0x54
 800471a:	81a3      	strhlt	r3, [r4, #12]
 800471c:	bd10      	pop	{r4, pc}

0800471e <__swrite>:
 800471e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004722:	461f      	mov	r7, r3
 8004724:	898b      	ldrh	r3, [r1, #12]
 8004726:	05db      	lsls	r3, r3, #23
 8004728:	4605      	mov	r5, r0
 800472a:	460c      	mov	r4, r1
 800472c:	4616      	mov	r6, r2
 800472e:	d505      	bpl.n	800473c <__swrite+0x1e>
 8004730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004734:	2302      	movs	r3, #2
 8004736:	2200      	movs	r2, #0
 8004738:	f000 f858 	bl	80047ec <_lseek_r>
 800473c:	89a3      	ldrh	r3, [r4, #12]
 800473e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004742:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004746:	81a3      	strh	r3, [r4, #12]
 8004748:	4632      	mov	r2, r6
 800474a:	463b      	mov	r3, r7
 800474c:	4628      	mov	r0, r5
 800474e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004752:	f000 b817 	b.w	8004784 <_write_r>

08004756 <__sseek>:
 8004756:	b510      	push	{r4, lr}
 8004758:	460c      	mov	r4, r1
 800475a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800475e:	f000 f845 	bl	80047ec <_lseek_r>
 8004762:	1c43      	adds	r3, r0, #1
 8004764:	89a3      	ldrh	r3, [r4, #12]
 8004766:	bf15      	itete	ne
 8004768:	6560      	strne	r0, [r4, #84]	; 0x54
 800476a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800476e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004772:	81a3      	strheq	r3, [r4, #12]
 8004774:	bf18      	it	ne
 8004776:	81a3      	strhne	r3, [r4, #12]
 8004778:	bd10      	pop	{r4, pc}

0800477a <__sclose>:
 800477a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800477e:	f000 b813 	b.w	80047a8 <_close_r>
	...

08004784 <_write_r>:
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	4d07      	ldr	r5, [pc, #28]	; (80047a4 <_write_r+0x20>)
 8004788:	4604      	mov	r4, r0
 800478a:	4608      	mov	r0, r1
 800478c:	4611      	mov	r1, r2
 800478e:	2200      	movs	r2, #0
 8004790:	602a      	str	r2, [r5, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	f7fb feac 	bl	80004f0 <_write>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d102      	bne.n	80047a2 <_write_r+0x1e>
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	b103      	cbz	r3, 80047a2 <_write_r+0x1e>
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	bd38      	pop	{r3, r4, r5, pc}
 80047a4:	20000840 	.word	0x20000840

080047a8 <_close_r>:
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	4d06      	ldr	r5, [pc, #24]	; (80047c4 <_close_r+0x1c>)
 80047ac:	2300      	movs	r3, #0
 80047ae:	4604      	mov	r4, r0
 80047b0:	4608      	mov	r0, r1
 80047b2:	602b      	str	r3, [r5, #0]
 80047b4:	f7fc faa2 	bl	8000cfc <_close>
 80047b8:	1c43      	adds	r3, r0, #1
 80047ba:	d102      	bne.n	80047c2 <_close_r+0x1a>
 80047bc:	682b      	ldr	r3, [r5, #0]
 80047be:	b103      	cbz	r3, 80047c2 <_close_r+0x1a>
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	bd38      	pop	{r3, r4, r5, pc}
 80047c4:	20000840 	.word	0x20000840

080047c8 <_fstat_r>:
 80047c8:	b538      	push	{r3, r4, r5, lr}
 80047ca:	4d07      	ldr	r5, [pc, #28]	; (80047e8 <_fstat_r+0x20>)
 80047cc:	2300      	movs	r3, #0
 80047ce:	4604      	mov	r4, r0
 80047d0:	4608      	mov	r0, r1
 80047d2:	4611      	mov	r1, r2
 80047d4:	602b      	str	r3, [r5, #0]
 80047d6:	f7fc fa9d 	bl	8000d14 <_fstat>
 80047da:	1c43      	adds	r3, r0, #1
 80047dc:	d102      	bne.n	80047e4 <_fstat_r+0x1c>
 80047de:	682b      	ldr	r3, [r5, #0]
 80047e0:	b103      	cbz	r3, 80047e4 <_fstat_r+0x1c>
 80047e2:	6023      	str	r3, [r4, #0]
 80047e4:	bd38      	pop	{r3, r4, r5, pc}
 80047e6:	bf00      	nop
 80047e8:	20000840 	.word	0x20000840

080047ec <_lseek_r>:
 80047ec:	b538      	push	{r3, r4, r5, lr}
 80047ee:	4d07      	ldr	r5, [pc, #28]	; (800480c <_lseek_r+0x20>)
 80047f0:	4604      	mov	r4, r0
 80047f2:	4608      	mov	r0, r1
 80047f4:	4611      	mov	r1, r2
 80047f6:	2200      	movs	r2, #0
 80047f8:	602a      	str	r2, [r5, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f7fc fa9a 	bl	8000d34 <_lseek>
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	d102      	bne.n	800480a <_lseek_r+0x1e>
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	b103      	cbz	r3, 800480a <_lseek_r+0x1e>
 8004808:	6023      	str	r3, [r4, #0]
 800480a:	bd38      	pop	{r3, r4, r5, pc}
 800480c:	20000840 	.word	0x20000840

08004810 <__malloc_lock>:
 8004810:	4801      	ldr	r0, [pc, #4]	; (8004818 <__malloc_lock+0x8>)
 8004812:	f7ff be53 	b.w	80044bc <__retarget_lock_acquire_recursive>
 8004816:	bf00      	nop
 8004818:	20000834 	.word	0x20000834

0800481c <__malloc_unlock>:
 800481c:	4801      	ldr	r0, [pc, #4]	; (8004824 <__malloc_unlock+0x8>)
 800481e:	f7ff be4e 	b.w	80044be <__retarget_lock_release_recursive>
 8004822:	bf00      	nop
 8004824:	20000834 	.word	0x20000834

08004828 <_read_r>:
 8004828:	b538      	push	{r3, r4, r5, lr}
 800482a:	4d07      	ldr	r5, [pc, #28]	; (8004848 <_read_r+0x20>)
 800482c:	4604      	mov	r4, r0
 800482e:	4608      	mov	r0, r1
 8004830:	4611      	mov	r1, r2
 8004832:	2200      	movs	r2, #0
 8004834:	602a      	str	r2, [r5, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	f7fb fe70 	bl	800051c <_read>
 800483c:	1c43      	adds	r3, r0, #1
 800483e:	d102      	bne.n	8004846 <_read_r+0x1e>
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	b103      	cbz	r3, 8004846 <_read_r+0x1e>
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	bd38      	pop	{r3, r4, r5, pc}
 8004848:	20000840 	.word	0x20000840

0800484c <_init>:
 800484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484e:	bf00      	nop
 8004850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004852:	bc08      	pop	{r3}
 8004854:	469e      	mov	lr, r3
 8004856:	4770      	bx	lr

08004858 <_fini>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	bf00      	nop
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr
