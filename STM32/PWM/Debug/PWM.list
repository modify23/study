
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d88  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005f38  08005f38  00015f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800600c  0800600c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800600c  0800600c  0001600c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006014  08006014  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006014  08006014  00016014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006018  08006018  00016018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800601c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000848  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008b8  200008b8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016835  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000294f  00000000  00000000  000368d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  00039228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001208  00000000  00000000  0003a528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002724a  00000000  00000000  0003b730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c5c  00000000  00000000  0006297a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0bba  00000000  00000000  000775d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00168190  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059e4  00000000  00000000  001681e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005f20 	.word	0x08005f20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005f20 	.word	0x08005f20

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char *ptr, int len){
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (unsigned char*)ptr, len, HAL_MAX_DELAY);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295
 80005a8:	68b9      	ldr	r1, [r7, #8]
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <_write+0x28>)
 80005ac:	f003 fddf 	bl	800416e <HAL_UART_Transmit>
	return len;
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000344 	.word	0x20000344

080005c0 <_read>:

int _read(int file, char *ptr, int len){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive(&huart3, (unsigned char*)ptr, len, HAL_MAX_DELAY);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	68b9      	ldr	r1, [r7, #8]
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <_read+0x28>)
 80005d8:	f003 fe5b 	bl	8004292 <HAL_UART_Receive>
	return len;
 80005dc:	687b      	ldr	r3, [r7, #4]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000344 	.word	0x20000344

080005ec <scaling>:
char uart_buf[30];
int adc_value;
int a = 0;

int scaling(int x)
  {
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

	return (29*x)*10/4095;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f44f 7291 	mov.w	r2, #290	; 0x122
 80005fa:	fb02 f303 	mul.w	r3, r2, r3
 80005fe:	4a06      	ldr	r2, [pc, #24]	; (8000618 <scaling+0x2c>)
 8000600:	fb82 1203 	smull	r1, r2, r2, r3
 8000604:	441a      	add	r2, r3
 8000606:	12d2      	asrs	r2, r2, #11
 8000608:	17db      	asrs	r3, r3, #31
 800060a:	1ad3      	subs	r3, r2, r3
  }
 800060c:	4618      	mov	r0, r3
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	80080081 	.word	0x80080081

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fdfb 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f83b 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 fa1f 	bl	8000a6c <MX_GPIO_Init>
  MX_ETH_Init();
 800062e:	f000 f8ff 	bl	8000830 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000632:	f000 f9c3 	bl	80009bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000636:	f000 f9eb 	bl	8000a10 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800063a:	f000 f947 	bl	80008cc <MX_TIM3_Init>
  MX_ADC1_Init();
 800063e:	f000 f8a5 	bl	800078c <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000642:	f000 f897 	bl	8000774 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000646:	2108      	movs	r1, #8
 8000648:	4810      	ldr	r0, [pc, #64]	; (800068c <main+0x70>)
 800064a:	f002 ff65 	bl	8003518 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc1);
 800064e:	4810      	ldr	r0, [pc, #64]	; (8000690 <main+0x74>)
 8000650:	f000 febe 	bl	80013d0 <HAL_ADC_Start_IT>
  uint16_t value = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_ADC_Start_IT(&hadc1);
 8000658:	480d      	ldr	r0, [pc, #52]	; (8000690 <main+0x74>)
 800065a:	f000 feb9 	bl	80013d0 <HAL_ADC_Start_IT>
//		if (adc_value > 2000 && adc_value < 3100) {
//			a = 15;
//			HAL_Delay(100);
//		}

		TIM3 -> CCR3 = scaling(adc_value);
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <main+0x78>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ffc2 	bl	80005ec <scaling>
 8000668:	4602      	mov	r2, r0
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <main+0x7c>)
 800066c:	63da      	str	r2, [r3, #60]	; 0x3c
		printf("joystick: %d , scaling value : %d\r\n", adc_value, scaling(adc_value));
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <main+0x78>)
 8000670:	681c      	ldr	r4, [r3, #0]
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <main+0x78>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffb8 	bl	80005ec <scaling>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	4621      	mov	r1, r4
 8000682:	4806      	ldr	r0, [pc, #24]	; (800069c <main+0x80>)
 8000684:	f004 fcbe 	bl	8005004 <iprintf>
	while (1) {
 8000688:	e7e6      	b.n	8000658 <main+0x3c>
 800068a:	bf00      	nop
 800068c:	200002fc 	.word	0x200002fc
 8000690:	20000204 	.word	0x20000204
 8000694:	20000894 	.word	0x20000894
 8000698:	40000400 	.word	0x40000400
 800069c:	08005f38 	.word	0x08005f38

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	; 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 fca0 	bl	8004ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a27      	ldr	r2, [pc, #156]	; (800076c <SystemClock_Config+0xcc>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <SystemClock_Config+0xd0>)
 80006ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000700:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000710:	2304      	movs	r3, #4
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000714:	23a8      	movs	r3, #168	; 0xa8
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800071c:	2307      	movs	r3, #7
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f002 f9b7 	bl	8002a98 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000730:	f000 fa64 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2105      	movs	r1, #5
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fc18 	bl	8002f88 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075e:	f000 fa4d 	bl	8000bfc <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	2012      	movs	r0, #18
 800077e:	f001 fb4a 	bl	8001e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000782:	2012      	movs	r0, #18
 8000784:	f001 fb63 	bl	8001e4e <HAL_NVIC_EnableIRQ>
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000792:	463b      	mov	r3, r7
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_ADC1_Init+0x98>)
 80007a0:	4a21      	ldr	r2, [pc, #132]	; (8000828 <MX_ADC1_Init+0x9c>)
 80007a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007a4:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_ADC1_Init+0x98>)
 80007a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_ADC1_Init+0x98>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_ADC1_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_ADC1_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_ADC1_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_ADC1_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x98>)
 80007ce:	4a17      	ldr	r2, [pc, #92]	; (800082c <MX_ADC1_Init+0xa0>)
 80007d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_ADC1_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_ADC1_Init+0x98>)
 80007da:	2201      	movs	r2, #1
 80007dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_ADC1_Init+0x98>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_ADC1_Init+0x98>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <MX_ADC1_Init+0x98>)
 80007ee:	f000 fdab 	bl	8001348 <HAL_ADC_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007f8:	f000 fa00 	bl	8000bfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007fc:	2303      	movs	r3, #3
 80007fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000800:	2301      	movs	r3, #1
 8000802:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000808:	463b      	mov	r3, r7
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_ADC1_Init+0x98>)
 800080e:	f000 ffef 	bl	80017f0 <HAL_ADC_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000818:	f000 f9f0 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000204 	.word	0x20000204
 8000828:	40012000 	.word	0x40012000
 800082c:	0f000001 	.word	0x0f000001

08000830 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_ETH_Init+0x84>)
 8000836:	4a20      	ldr	r2, [pc, #128]	; (80008b8 <MX_ETH_Init+0x88>)
 8000838:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800083a:	4b20      	ldr	r3, [pc, #128]	; (80008bc <MX_ETH_Init+0x8c>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000840:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_ETH_Init+0x8c>)
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <MX_ETH_Init+0x8c>)
 8000848:	22e1      	movs	r2, #225	; 0xe1
 800084a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_ETH_Init+0x8c>)
 800084e:	2200      	movs	r2, #0
 8000850:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_ETH_Init+0x8c>)
 8000854:	2200      	movs	r2, #0
 8000856:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_ETH_Init+0x8c>)
 800085a:	2200      	movs	r2, #0
 800085c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_ETH_Init+0x84>)
 8000860:	4a16      	ldr	r2, [pc, #88]	; (80008bc <MX_ETH_Init+0x8c>)
 8000862:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_ETH_Init+0x84>)
 8000866:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800086a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_ETH_Init+0x84>)
 800086e:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <MX_ETH_Init+0x90>)
 8000870:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_ETH_Init+0x84>)
 8000874:	4a13      	ldr	r2, [pc, #76]	; (80008c4 <MX_ETH_Init+0x94>)
 8000876:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000878:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_ETH_Init+0x84>)
 800087a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800087e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <MX_ETH_Init+0x84>)
 8000882:	f001 faff 	bl	8001e84 <HAL_ETH_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800088c:	f000 f9b6 	bl	8000bfc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000890:	2238      	movs	r2, #56	; 0x38
 8000892:	2100      	movs	r1, #0
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <MX_ETH_Init+0x98>)
 8000896:	f004 fbad 	bl	8004ff4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_ETH_Init+0x98>)
 800089c:	2221      	movs	r2, #33	; 0x21
 800089e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_ETH_Init+0x98>)
 80008a2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80008a6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_ETH_Init+0x98>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000024c 	.word	0x2000024c
 80008b8:	40028000 	.word	0x40028000
 80008bc:	20000898 	.word	0x20000898
 80008c0:	20000164 	.word	0x20000164
 80008c4:	200000c4 	.word	0x200000c4
 80008c8:	2000008c 	.word	0x2000008c

080008cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08e      	sub	sp, #56	; 0x38
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	f107 0320 	add.w	r3, r7, #32
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
 80008f8:	615a      	str	r2, [r3, #20]
 80008fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008fc:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <MX_TIM3_Init+0xe8>)
 80008fe:	4a2e      	ldr	r2, [pc, #184]	; (80009b8 <MX_TIM3_Init+0xec>)
 8000900:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8000902:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <MX_TIM3_Init+0xe8>)
 8000904:	f240 3247 	movw	r2, #839	; 0x347
 8000908:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090a:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <MX_TIM3_Init+0xe8>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <MX_TIM3_Init+0xe8>)
 8000912:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000916:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000918:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <MX_TIM3_Init+0xe8>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <MX_TIM3_Init+0xe8>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000924:	4823      	ldr	r0, [pc, #140]	; (80009b4 <MX_TIM3_Init+0xe8>)
 8000926:	f002 fd4f 	bl	80033c8 <HAL_TIM_Base_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000930:	f000 f964 	bl	8000bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800093a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800093e:	4619      	mov	r1, r3
 8000940:	481c      	ldr	r0, [pc, #112]	; (80009b4 <MX_TIM3_Init+0xe8>)
 8000942:	f002 ff73 	bl	800382c <HAL_TIM_ConfigClockSource>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800094c:	f000 f956 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000950:	4818      	ldr	r0, [pc, #96]	; (80009b4 <MX_TIM3_Init+0xe8>)
 8000952:	f002 fd88 	bl	8003466 <HAL_TIM_PWM_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800095c:	f000 f94e 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000968:	f107 0320 	add.w	r3, r7, #32
 800096c:	4619      	mov	r1, r3
 800096e:	4811      	ldr	r0, [pc, #68]	; (80009b4 <MX_TIM3_Init+0xe8>)
 8000970:	f003 fb34 	bl	8003fdc <HAL_TIMEx_MasterConfigSynchronization>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800097a:	f000 f93f 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800097e:	2360      	movs	r3, #96	; 0x60
 8000980:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100-1;
 8000982:	2363      	movs	r3, #99	; 0x63
 8000984:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2208      	movs	r2, #8
 8000992:	4619      	mov	r1, r3
 8000994:	4807      	ldr	r0, [pc, #28]	; (80009b4 <MX_TIM3_Init+0xe8>)
 8000996:	f002 fe87 	bl	80036a8 <HAL_TIM_PWM_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80009a0:	f000 f92c 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009a4:	4803      	ldr	r0, [pc, #12]	; (80009b4 <MX_TIM3_Init+0xe8>)
 80009a6:	f000 fa83 	bl	8000eb0 <HAL_TIM_MspPostInit>

}
 80009aa:	bf00      	nop
 80009ac:	3738      	adds	r7, #56	; 0x38
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200002fc 	.word	0x200002fc
 80009b8:	40000400 	.word	0x40000400

080009bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <MX_USART3_UART_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART3_UART_Init+0x4c>)
 80009f4:	f003 fb6e 	bl	80040d4 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009fe:	f000 f8fd 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000344 	.word	0x20000344
 8000a0c:	40004800 	.word	0x40004800

08000a10 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1e:	2204      	movs	r2, #4
 8000a20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a24:	2202      	movs	r2, #2
 8000a26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a30:	2202      	movs	r2, #2
 8000a32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a54:	f001 ff03 	bl	800285e <HAL_PCD_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a5e:	f000 f8cd 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000388 	.word	0x20000388

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	; 0x30
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
 8000a86:	4b4c      	ldr	r3, [pc, #304]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a4b      	ldr	r2, [pc, #300]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b49      	ldr	r3, [pc, #292]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	61bb      	str	r3, [r7, #24]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	4b45      	ldr	r3, [pc, #276]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a44      	ldr	r2, [pc, #272]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b42      	ldr	r3, [pc, #264]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b3e      	ldr	r3, [pc, #248]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a3d      	ldr	r2, [pc, #244]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b3b      	ldr	r3, [pc, #236]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b37      	ldr	r3, [pc, #220]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a36      	ldr	r2, [pc, #216]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b34      	ldr	r3, [pc, #208]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a2f      	ldr	r2, [pc, #188]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b2d      	ldr	r3, [pc, #180]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a28      	ldr	r2, [pc, #160]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <MX_GPIO_Init+0x14c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b30:	4822      	ldr	r0, [pc, #136]	; (8000bbc <MX_GPIO_Init+0x150>)
 8000b32:	f001 fe7b 	bl	800282c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2140      	movs	r1, #64	; 0x40
 8000b3a:	4821      	ldr	r0, [pc, #132]	; (8000bc0 <MX_GPIO_Init+0x154>)
 8000b3c:	f001 fe76 	bl	800282c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	481b      	ldr	r0, [pc, #108]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000b58:	f001 fcbc 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b5c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4811      	ldr	r0, [pc, #68]	; (8000bbc <MX_GPIO_Init+0x150>)
 8000b76:	f001 fcad 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b7a:	2340      	movs	r3, #64	; 0x40
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <MX_GPIO_Init+0x154>)
 8000b92:	f001 fc9f 	bl	80024d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b96:	2380      	movs	r3, #128	; 0x80
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_GPIO_Init+0x154>)
 8000baa:	f001 fc93 	bl	80024d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bae:	bf00      	nop
 8000bb0:	3730      	adds	r7, #48	; 0x30
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	40021800 	.word	0x40021800
 8000bc4:	40020800 	.word	0x40020800

08000bc8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	if(hadc -> Instance == ADC1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <HAL_ADC_ConvCpltCallback+0x28>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d106      	bne.n	8000be8 <HAL_ADC_ConvCpltCallback+0x20>
	{
		adc_value = HAL_ADC_GetValue(&hadc1);
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000bdc:	f000 fde6 	bl	80017ac <HAL_ADC_GetValue>
 8000be0:	4603      	mov	r3, r0
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <HAL_ADC_ConvCpltCallback+0x30>)
 8000be6:	601a      	str	r2, [r3, #0]
	}
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40012000 	.word	0x40012000
 8000bf4:	20000204 	.word	0x20000204
 8000bf8:	20000894 	.word	0x20000894

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <HAL_ADC_MspInit+0x7c>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d127      	bne.n	8000cca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_ADC_MspInit+0x80>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <HAL_ADC_MspInit+0x80>)
 8000c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <HAL_ADC_MspInit+0x80>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_ADC_MspInit+0x80>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <HAL_ADC_MspInit+0x80>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_ADC_MspInit+0x80>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <HAL_ADC_MspInit+0x84>)
 8000cc6:	f001 fc05 	bl	80024d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40012000 	.word	0x40012000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	; 0x38
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a55      	ldr	r2, [pc, #340]	; (8000e54 <HAL_ETH_MspInit+0x174>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	f040 80a4 	bne.w	8000e4c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
 8000d08:	4b53      	ldr	r3, [pc, #332]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	4a52      	ldr	r2, [pc, #328]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000d0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d12:	6313      	str	r3, [r2, #48]	; 0x30
 8000d14:	4b50      	ldr	r3, [pc, #320]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d1c:	623b      	str	r3, [r7, #32]
 8000d1e:	6a3b      	ldr	r3, [r7, #32]
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
 8000d24:	4b4c      	ldr	r3, [pc, #304]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a4b      	ldr	r2, [pc, #300]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000d2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d30:	4b49      	ldr	r3, [pc, #292]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	4b45      	ldr	r3, [pc, #276]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	4a44      	ldr	r2, [pc, #272]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000d46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4c:	4b42      	ldr	r3, [pc, #264]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d54:	61bb      	str	r3, [r7, #24]
 8000d56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	4b3e      	ldr	r3, [pc, #248]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	4a3d      	ldr	r2, [pc, #244]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	6313      	str	r3, [r2, #48]	; 0x30
 8000d68:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	4a36      	ldr	r2, [pc, #216]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6313      	str	r3, [r2, #48]	; 0x30
 8000d84:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	4a2f      	ldr	r2, [pc, #188]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000d9a:	f043 0302 	orr.w	r3, r3, #2
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000da0:	4b2d      	ldr	r3, [pc, #180]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	4a28      	ldr	r2, [pc, #160]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbc:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <HAL_ETH_MspInit+0x178>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dc8:	2332      	movs	r3, #50	; 0x32
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd8:	230b      	movs	r3, #11
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	481e      	ldr	r0, [pc, #120]	; (8000e5c <HAL_ETH_MspInit+0x17c>)
 8000de4:	f001 fb76 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000de8:	2386      	movs	r3, #134	; 0x86
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df8:	230b      	movs	r3, #11
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	4817      	ldr	r0, [pc, #92]	; (8000e60 <HAL_ETH_MspInit+0x180>)
 8000e04:	f001 fb66 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e1a:	230b      	movs	r3, #11
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	480f      	ldr	r0, [pc, #60]	; (8000e64 <HAL_ETH_MspInit+0x184>)
 8000e26:	f001 fb55 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3c:	230b      	movs	r3, #11
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	4808      	ldr	r0, [pc, #32]	; (8000e68 <HAL_ETH_MspInit+0x188>)
 8000e48:	f001 fb44 	bl	80024d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3738      	adds	r7, #56	; 0x38
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40028000 	.word	0x40028000
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	40020000 	.word	0x40020000
 8000e64:	40020400 	.word	0x40020400
 8000e68:	40021800 	.word	0x40021800

08000e6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <HAL_TIM_Base_MspInit+0x3c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d10d      	bne.n	8000e9a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_TIM_Base_MspInit+0x40>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a09      	ldr	r2, [pc, #36]	; (8000eac <HAL_TIM_Base_MspInit+0x40>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <HAL_TIM_Base_MspInit+0x40>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40000400 	.word	0x40000400
 8000eac:	40023800 	.word	0x40023800

08000eb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <HAL_TIM_MspPostInit+0x68>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d11e      	bne.n	8000f10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_TIM_MspPostInit+0x6c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a10      	ldr	r2, [pc, #64]	; (8000f1c <HAL_TIM_MspPostInit+0x6c>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_TIM_MspPostInit+0x6c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <HAL_TIM_MspPostInit+0x70>)
 8000f0c:	f001 fae2 	bl	80024d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f10:	bf00      	nop
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40000400 	.word	0x40000400
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020800 	.word	0x40020800

08000f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a19      	ldr	r2, [pc, #100]	; (8000fa8 <HAL_UART_MspInit+0x84>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d12c      	bne.n	8000fa0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_UART_MspInit+0x88>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a17      	ldr	r2, [pc, #92]	; (8000fac <HAL_UART_MspInit+0x88>)
 8000f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_UART_MspInit+0x88>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_UART_MspInit+0x88>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a10      	ldr	r2, [pc, #64]	; (8000fac <HAL_UART_MspInit+0x88>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_UART_MspInit+0x88>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f90:	2307      	movs	r3, #7
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <HAL_UART_MspInit+0x8c>)
 8000f9c:	f001 fa9a 	bl	80024d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	; 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40004800 	.word	0x40004800
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020c00 	.word	0x40020c00

08000fb4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fd4:	d13f      	bne.n	8001056 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <HAL_PCD_MspInit+0xac>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a20      	ldr	r2, [pc, #128]	; (8001060 <HAL_PCD_MspInit+0xac>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <HAL_PCD_MspInit+0xac>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ff2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001004:	230a      	movs	r3, #10
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	4815      	ldr	r0, [pc, #84]	; (8001064 <HAL_PCD_MspInit+0xb0>)
 8001010:	f001 fa60 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	480e      	ldr	r0, [pc, #56]	; (8001064 <HAL_PCD_MspInit+0xb0>)
 800102a:	f001 fa53 	bl	80024d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_PCD_MspInit+0xac>)
 8001030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001032:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <HAL_PCD_MspInit+0xac>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	6353      	str	r3, [r2, #52]	; 0x34
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_PCD_MspInit+0xac>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_PCD_MspInit+0xac>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_PCD_MspInit+0xac>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>

0800107a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <UsageFault_Handler+0x4>

08001086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b4:	f000 f904 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <ADC_IRQHandler+0x10>)
 80010c2:	f000 fa63 	bl	800158c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000204 	.word	0x20000204

080010d0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f8:	605a      	str	r2, [r3, #4]
  return 0;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <_isatty>:

int _isatty(int file)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001110:	2301      	movs	r3, #1
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800111e:	b480      	push	{r7}
 8001120:	b085      	sub	sp, #20
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f003 ff1a 	bl	8004fa0 <__errno>
 800116c:	4603      	mov	r3, r0
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <_sbrk+0x64>)
 8001188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20030000 	.word	0x20030000
 8001198:	00000400 	.word	0x00000400
 800119c:	200008a0 	.word	0x200008a0
 80011a0:	200008b8 	.word	0x200008b8

080011a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <SystemInit+0x20>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <SystemInit+0x20>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e4:	4c0b      	ldr	r4, [pc, #44]	; (8001214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011f2:	f7ff ffd7 	bl	80011a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f003 fed9 	bl	8004fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff fa0f 	bl	800061c <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001200:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800120c:	0800601c 	.word	0x0800601c
  ldr r2, =_sbss
 8001210:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001214:	200008b8 	.word	0x200008b8

08001218 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <CAN1_RX0_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 fddb 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fcda 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fdf3 	bl	8001e6a <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 fdbb 	bl	8001e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000004 	.word	0x20000004

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008
 80012e4:	200008a4 	.word	0x200008a4

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	200008a4 	.word	0x200008a4

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_Delay+0x44>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008

08001348 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e033      	b.n	80013c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	2b00      	cmp	r3, #0
 8001364:	d109      	bne.n	800137a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff fc76 	bl	8000c58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	2b00      	cmp	r3, #0
 8001384:	d118      	bne.n	80013b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800138e:	f023 0302 	bic.w	r3, r3, #2
 8001392:	f043 0202 	orr.w	r2, r3, #2
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fb5a 	bl	8001a54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f023 0303 	bic.w	r3, r3, #3
 80013ae:	f043 0201 	orr.w	r2, r3, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
 80013b6:	e001      	b.n	80013bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_Start_IT+0x1a>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e0bd      	b.n	8001566 <HAL_ADC_Start_IT+0x196>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d018      	beq.n	8001432 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0201 	orr.w	r2, r2, #1
 800140e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001410:	4b58      	ldr	r3, [pc, #352]	; (8001574 <HAL_ADC_Start_IT+0x1a4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a58      	ldr	r2, [pc, #352]	; (8001578 <HAL_ADC_Start_IT+0x1a8>)
 8001416:	fba2 2303 	umull	r2, r3, r2, r3
 800141a:	0c9a      	lsrs	r2, r3, #18
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001424:	e002      	b.n	800142c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3b01      	subs	r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f9      	bne.n	8001426 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b01      	cmp	r3, #1
 800143e:	f040 8085 	bne.w	800154c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001460:	2b00      	cmp	r3, #0
 8001462:	d007      	beq.n	8001474 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800146c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800147c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001480:	d106      	bne.n	8001490 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f023 0206 	bic.w	r2, r3, #6
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	645a      	str	r2, [r3, #68]	; 0x44
 800148e:	e002      	b.n	8001496 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800149e:	4b37      	ldr	r3, [pc, #220]	; (800157c <HAL_ADC_Start_IT+0x1ac>)
 80014a0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014aa:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014ba:	f043 0320 	orr.w	r3, r3, #32
 80014be:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 031f 	and.w	r3, r3, #31
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d12a      	bne.n	8001522 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a2b      	ldr	r2, [pc, #172]	; (8001580 <HAL_ADC_Start_IT+0x1b0>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d015      	beq.n	8001502 <HAL_ADC_Start_IT+0x132>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <HAL_ADC_Start_IT+0x1b4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d105      	bne.n	80014ec <HAL_ADC_Start_IT+0x11c>
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_ADC_Start_IT+0x1ac>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 031f 	and.w	r3, r3, #31
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00a      	beq.n	8001502 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a25      	ldr	r2, [pc, #148]	; (8001588 <HAL_ADC_Start_IT+0x1b8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d136      	bne.n	8001564 <HAL_ADC_Start_IT+0x194>
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_ADC_Start_IT+0x1ac>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d130      	bne.n	8001564 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d129      	bne.n	8001564 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	e020      	b.n	8001564 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a16      	ldr	r2, [pc, #88]	; (8001580 <HAL_ADC_Start_IT+0x1b0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d11b      	bne.n	8001564 <HAL_ADC_Start_IT+0x194>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d114      	bne.n	8001564 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	e00b      	b.n	8001564 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f043 0210 	orr.w	r2, r3, #16
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155c:	f043 0201 	orr.w	r2, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000000 	.word	0x20000000
 8001578:	431bde83 	.word	0x431bde83
 800157c:	40012300 	.word	0x40012300
 8001580:	40012000 	.word	0x40012000
 8001584:	40012100 	.word	0x40012100
 8001588:	40012200 	.word	0x40012200

0800158c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f003 0320 	and.w	r3, r3, #32
 80015ba:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d049      	beq.n	8001656 <HAL_ADC_IRQHandler+0xca>
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d046      	beq.n	8001656 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f003 0310 	and.w	r3, r3, #16
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d105      	bne.n	80015e0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d12b      	bne.n	8001646 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d127      	bne.n	8001646 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001600:	2b00      	cmp	r3, #0
 8001602:	d006      	beq.n	8001612 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800160e:	2b00      	cmp	r3, #0
 8001610:	d119      	bne.n	8001646 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0220 	bic.w	r2, r2, #32
 8001620:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d105      	bne.n	8001646 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff fabe 	bl	8000bc8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f06f 0212 	mvn.w	r2, #18
 8001654:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001664:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d057      	beq.n	800171c <HAL_ADC_IRQHandler+0x190>
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d054      	beq.n	800171c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	2b00      	cmp	r3, #0
 800167c:	d105      	bne.n	800168a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d139      	bne.n	800170c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d12b      	bne.n	800170c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d124      	bne.n	800170c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d11d      	bne.n	800170c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d119      	bne.n	800170c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	f043 0201 	orr.w	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 fa9d 	bl	8001c4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f06f 020c 	mvn.w	r2, #12
 800171a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d017      	beq.n	8001762 <HAL_ADC_IRQHandler+0x1d6>
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d014      	beq.n	8001762 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b01      	cmp	r3, #1
 8001744:	d10d      	bne.n	8001762 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f837 	bl	80017c6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f06f 0201 	mvn.w	r2, #1
 8001760:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f003 0320 	and.w	r3, r3, #32
 8001768:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001770:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d015      	beq.n	80017a4 <HAL_ADC_IRQHandler+0x218>
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d012      	beq.n	80017a4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f043 0202 	orr.w	r2, r3, #2
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f06f 0220 	mvn.w	r2, #32
 8001792:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f820 	bl	80017da <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f06f 0220 	mvn.w	r2, #32
 80017a2:	601a      	str	r2, [r3, #0]
  }
}
 80017a4:	bf00      	nop
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_ADC_ConfigChannel+0x1c>
 8001808:	2302      	movs	r3, #2
 800180a:	e113      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x244>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b09      	cmp	r3, #9
 800181a:	d925      	bls.n	8001868 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68d9      	ldr	r1, [r3, #12]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	b29b      	uxth	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	4613      	mov	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4413      	add	r3, r2
 8001830:	3b1e      	subs	r3, #30
 8001832:	2207      	movs	r2, #7
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43da      	mvns	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	400a      	ands	r2, r1
 8001840:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68d9      	ldr	r1, [r3, #12]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	b29b      	uxth	r3, r3
 8001852:	4618      	mov	r0, r3
 8001854:	4603      	mov	r3, r0
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4403      	add	r3, r0
 800185a:	3b1e      	subs	r3, #30
 800185c:	409a      	lsls	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	e022      	b.n	80018ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6919      	ldr	r1, [r3, #16]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	b29b      	uxth	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	2207      	movs	r2, #7
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	400a      	ands	r2, r1
 800188a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6919      	ldr	r1, [r3, #16]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	4618      	mov	r0, r3
 800189e:	4603      	mov	r3, r0
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4403      	add	r3, r0
 80018a4:	409a      	lsls	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d824      	bhi.n	8001900 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	3b05      	subs	r3, #5
 80018c8:	221f      	movs	r2, #31
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	400a      	ands	r2, r1
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	4618      	mov	r0, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	3b05      	subs	r3, #5
 80018f2:	fa00 f203 	lsl.w	r2, r0, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	635a      	str	r2, [r3, #52]	; 0x34
 80018fe:	e04c      	b.n	800199a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b0c      	cmp	r3, #12
 8001906:	d824      	bhi.n	8001952 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	3b23      	subs	r3, #35	; 0x23
 800191a:	221f      	movs	r2, #31
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43da      	mvns	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	400a      	ands	r2, r1
 8001928:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	b29b      	uxth	r3, r3
 8001936:	4618      	mov	r0, r3
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	3b23      	subs	r3, #35	; 0x23
 8001944:	fa00 f203 	lsl.w	r2, r0, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
 8001950:	e023      	b.n	800199a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	3b41      	subs	r3, #65	; 0x41
 8001964:	221f      	movs	r2, #31
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	400a      	ands	r2, r1
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	3b41      	subs	r3, #65	; 0x41
 800198e:	fa00 f203 	lsl.w	r2, r0, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800199a:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <HAL_ADC_ConfigChannel+0x250>)
 800199c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a28      	ldr	r2, [pc, #160]	; (8001a44 <HAL_ADC_ConfigChannel+0x254>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d10f      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x1d8>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b12      	cmp	r3, #18
 80019ae:	d10b      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a1d      	ldr	r2, [pc, #116]	; (8001a44 <HAL_ADC_ConfigChannel+0x254>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d12b      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x23a>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <HAL_ADC_ConfigChannel+0x258>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d003      	beq.n	80019e4 <HAL_ADC_ConfigChannel+0x1f4>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b11      	cmp	r3, #17
 80019e2:	d122      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <HAL_ADC_ConfigChannel+0x258>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d111      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_ADC_ConfigChannel+0x25c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <HAL_ADC_ConfigChannel+0x260>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	0c9a      	lsrs	r2, r3, #18
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a1c:	e002      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f9      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	40012300 	.word	0x40012300
 8001a44:	40012000 	.word	0x40012000
 8001a48:	10000012 	.word	0x10000012
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	431bde83 	.word	0x431bde83

08001a54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a5c:	4b79      	ldr	r3, [pc, #484]	; (8001c44 <ADC_Init+0x1f0>)
 8001a5e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	431a      	orrs	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	021a      	lsls	r2, r3, #8
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001aac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ace:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6899      	ldr	r1, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	4a58      	ldr	r2, [pc, #352]	; (8001c48 <ADC_Init+0x1f4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d022      	beq.n	8001b32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001afa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6899      	ldr	r1, [r3, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6899      	ldr	r1, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	e00f      	b.n	8001b52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0202 	bic.w	r2, r2, #2
 8001b60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6899      	ldr	r1, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7e1b      	ldrb	r3, [r3, #24]
 8001b6c:	005a      	lsls	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d01b      	beq.n	8001bb8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6859      	ldr	r1, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	3b01      	subs	r3, #1
 8001bac:	035a      	lsls	r2, r3, #13
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	e007      	b.n	8001bc8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	051a      	lsls	r2, r3, #20
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6899      	ldr	r1, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c0a:	025a      	lsls	r2, r3, #9
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6899      	ldr	r1, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	029a      	lsls	r2, r3, #10
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	609a      	str	r2, [r3, #8]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	40012300 	.word	0x40012300
 8001c48:	0f000001 	.word	0x0f000001

08001c4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c92:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	60d3      	str	r3, [r2, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0b      	blt.n	8001cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4907      	ldr	r1, [pc, #28]	; (8001cfc <__NVIC_EnableIRQ+0x38>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	; (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	; (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	4313      	orrs	r3, r2
         );
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dcc:	d301      	bcc.n	8001dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00f      	b.n	8001df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <SysTick_Config+0x40>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dda:	210f      	movs	r1, #15
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f7ff ff8e 	bl	8001d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <SysTick_Config+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <SysTick_Config+0x40>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000e010 	.word	0xe000e010

08001e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff29 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e28:	f7ff ff3e 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f7ff ff8e 	bl	8001d54 <NVIC_EncodePriority>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff5d 	bl	8001d00 <__NVIC_SetPriority>
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff31 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffa2 	bl	8001dbc <SysTick_Config>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e06c      	b.n	8001f70 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d106      	bne.n	8001eae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2223      	movs	r2, #35	; 0x23
 8001ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7fe ff19 	bl	8000ce0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <HAL_ETH_Init+0xf4>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	4a30      	ldr	r2, [pc, #192]	; (8001f78 <HAL_ETH_Init+0xf4>)
 8001eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ebe:	4b2e      	ldr	r3, [pc, #184]	; (8001f78 <HAL_ETH_Init+0xf4>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001eca:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <HAL_ETH_Init+0xf8>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4a2b      	ldr	r2, [pc, #172]	; (8001f7c <HAL_ETH_Init+0xf8>)
 8001ed0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ed4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ed6:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <HAL_ETH_Init+0xf8>)
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	4927      	ldr	r1, [pc, #156]	; (8001f7c <HAL_ETH_Init+0xf8>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001ee4:	4b25      	ldr	r3, [pc, #148]	; (8001f7c <HAL_ETH_Init+0xf8>)
 8001ee6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001efe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f00:	f7ff f9f2 	bl	80012e8 <HAL_GetTick>
 8001f04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f06:	e011      	b.n	8001f2c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f08:	f7ff f9ee 	bl	80012e8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f16:	d909      	bls.n	8001f2c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	22e0      	movs	r2, #224	; 0xe0
 8001f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e021      	b.n	8001f70 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1e4      	bne.n	8001f08 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f958 	bl	80021f4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f9ff 	bl	8002348 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fa55 	bl	80023fa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	461a      	mov	r2, r3
 8001f56:	2100      	movs	r1, #0
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f9bd 	bl	80022d8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2210      	movs	r2, #16
 8001f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40013800 	.word	0x40013800

08001f80 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4b51      	ldr	r3, [pc, #324]	; (80020dc <ETH_SetMACConfig+0x15c>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	7c1b      	ldrb	r3, [r3, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <ETH_SetMACConfig+0x28>
 8001fa2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001fa6:	e000      	b.n	8001faa <ETH_SetMACConfig+0x2a>
 8001fa8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	7c5b      	ldrb	r3, [r3, #17]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <ETH_SetMACConfig+0x38>
 8001fb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fb6:	e000      	b.n	8001fba <ETH_SetMACConfig+0x3a>
 8001fb8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001fc0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	7fdb      	ldrb	r3, [r3, #31]
 8001fc6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001fc8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001fce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	7f92      	ldrb	r2, [r2, #30]
 8001fd4:	2a00      	cmp	r2, #0
 8001fd6:	d102      	bne.n	8001fde <ETH_SetMACConfig+0x5e>
 8001fd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fdc:	e000      	b.n	8001fe0 <ETH_SetMACConfig+0x60>
 8001fde:	2200      	movs	r2, #0
                        macconf->Speed |
 8001fe0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	7f1b      	ldrb	r3, [r3, #28]
 8001fe6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001fe8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001fee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	791b      	ldrb	r3, [r3, #4]
 8001ff4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ff6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d102      	bne.n	8002008 <ETH_SetMACConfig+0x88>
 8002002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002006:	e000      	b.n	800200a <ETH_SetMACConfig+0x8a>
 8002008:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800200a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	7bdb      	ldrb	r3, [r3, #15]
 8002010:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002012:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002018:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002020:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002022:	4313      	orrs	r3, r2
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800203a:	2001      	movs	r0, #1
 800203c:	f7ff f960 	bl	8001300 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002056:	4013      	ands	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002066:	2a00      	cmp	r2, #0
 8002068:	d101      	bne.n	800206e <ETH_SetMACConfig+0xee>
 800206a:	2280      	movs	r2, #128	; 0x80
 800206c:	e000      	b.n	8002070 <ETH_SetMACConfig+0xf0>
 800206e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002070:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002076:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800207e:	2a01      	cmp	r2, #1
 8002080:	d101      	bne.n	8002086 <ETH_SetMACConfig+0x106>
 8002082:	2208      	movs	r2, #8
 8002084:	e000      	b.n	8002088 <ETH_SetMACConfig+0x108>
 8002086:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002088:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002090:	2a01      	cmp	r2, #1
 8002092:	d101      	bne.n	8002098 <ETH_SetMACConfig+0x118>
 8002094:	2204      	movs	r2, #4
 8002096:	e000      	b.n	800209a <ETH_SetMACConfig+0x11a>
 8002098:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800209a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80020a2:	2a01      	cmp	r2, #1
 80020a4:	d101      	bne.n	80020aa <ETH_SetMACConfig+0x12a>
 80020a6:	2202      	movs	r2, #2
 80020a8:	e000      	b.n	80020ac <ETH_SetMACConfig+0x12c>
 80020aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020ac:	4313      	orrs	r3, r2
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020c4:	2001      	movs	r0, #1
 80020c6:	f7ff f91b 	bl	8001300 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	619a      	str	r2, [r3, #24]
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	ff20810f 	.word	0xff20810f

080020e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <ETH_SetDMAConfig+0x110>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	7b1b      	ldrb	r3, [r3, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <ETH_SetDMAConfig+0x2c>
 8002106:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800210a:	e000      	b.n	800210e <ETH_SetDMAConfig+0x2e>
 800210c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	7b5b      	ldrb	r3, [r3, #13]
 8002112:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002114:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	7f52      	ldrb	r2, [r2, #29]
 800211a:	2a00      	cmp	r2, #0
 800211c:	d102      	bne.n	8002124 <ETH_SetDMAConfig+0x44>
 800211e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002122:	e000      	b.n	8002126 <ETH_SetDMAConfig+0x46>
 8002124:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002126:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	7b9b      	ldrb	r3, [r3, #14]
 800212c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800212e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002134:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	7f1b      	ldrb	r3, [r3, #28]
 800213a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800213c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	7f9b      	ldrb	r3, [r3, #30]
 8002142:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002144:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800214a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002152:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002154:	4313      	orrs	r3, r2
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4313      	orrs	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002164:	461a      	mov	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002176:	2001      	movs	r0, #1
 8002178:	f7ff f8c2 	bl	8001300 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002184:	461a      	mov	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	791b      	ldrb	r3, [r3, #4]
 800218e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002194:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800219a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80021a0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021a8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80021aa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021b2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021b8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021c6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7ff f893 	bl	8001300 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e2:	461a      	mov	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	f8de3f23 	.word	0xf8de3f23

080021f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b0a6      	sub	sp, #152	; 0x98
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80021fc:	2301      	movs	r3, #1
 80021fe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002202:	2301      	movs	r3, #1
 8002204:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002208:	2300      	movs	r3, #0
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002212:	2301      	movs	r3, #1
 8002214:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800221e:	2301      	movs	r3, #1
 8002220:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002230:	2300      	movs	r3, #0
 8002232:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800223a:	2300      	movs	r3, #0
 800223c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800223e:	2300      	movs	r3, #0
 8002240:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002250:	2300      	movs	r3, #0
 8002252:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002256:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800225a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800225c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002260:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002268:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800226c:	4619      	mov	r1, r3
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fe86 	bl	8001f80 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002274:	2301      	movs	r3, #1
 8002276:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002278:	2301      	movs	r3, #1
 800227a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800227c:	2301      	movs	r3, #1
 800227e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002282:	2301      	movs	r3, #1
 8002284:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002296:	2300      	movs	r3, #0
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800229a:	2301      	movs	r3, #1
 800229c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80022a0:	2301      	movs	r3, #1
 80022a2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80022a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022ae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80022b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80022b6:	2301      	movs	r3, #1
 80022b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	4619      	mov	r1, r3
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ff08 	bl	80020e0 <ETH_SetDMAConfig>
}
 80022d0:	bf00      	nop
 80022d2:	3798      	adds	r7, #152	; 0x98
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3305      	adds	r3, #5
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	3204      	adds	r2, #4
 80022f0:	7812      	ldrb	r2, [r2, #0]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <ETH_MACAddressConfig+0x68>)
 80022fa:	4413      	add	r3, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3303      	adds	r3, #3
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	061a      	lsls	r2, r3, #24
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3302      	adds	r3, #2
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3301      	adds	r3, #1
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	4313      	orrs	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	7812      	ldrb	r2, [r2, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <ETH_MACAddressConfig+0x6c>)
 800232a:	4413      	add	r3, r2
 800232c:	461a      	mov	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	6013      	str	r3, [r2, #0]
}
 8002332:	bf00      	nop
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40028040 	.word	0x40028040
 8002344:	40028044 	.word	0x40028044

08002348 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e03e      	b.n	80023d4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68d9      	ldr	r1, [r3, #12]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2200      	movs	r2, #0
 8002372:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2200      	movs	r2, #0
 800237e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	3206      	adds	r2, #6
 8002388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d80c      	bhi.n	80023b8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68d9      	ldr	r1, [r3, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	440b      	add	r3, r1
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	e004      	b.n	80023c2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	461a      	mov	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3301      	adds	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d9bd      	bls.n	8002356 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ec:	611a      	str	r2, [r3, #16]
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b085      	sub	sp, #20
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	e046      	b.n	8002496 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6919      	ldr	r1, [r3, #16]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2200      	movs	r2, #0
 8002424:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2200      	movs	r2, #0
 8002436:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2200      	movs	r2, #0
 800243c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002444:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800244c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	3212      	adds	r2, #18
 8002462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d80c      	bhi.n	8002486 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6919      	ldr	r1, [r3, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	461a      	mov	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	60da      	str	r2, [r3, #12]
 8002484:	e004      	b.n	8002490 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	461a      	mov	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	3301      	adds	r3, #1
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d9b5      	bls.n	8002408 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c6:	60da      	str	r2, [r3, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	; 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	e177      	b.n	80027e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024f0:	2201      	movs	r2, #1
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	429a      	cmp	r2, r3
 800250a:	f040 8166 	bne.w	80027da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b01      	cmp	r3, #1
 8002518:	d005      	beq.n	8002526 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002522:	2b02      	cmp	r3, #2
 8002524:	d130      	bne.n	8002588 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2203      	movs	r2, #3
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 0201 	and.w	r2, r3, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b03      	cmp	r3, #3
 8002592:	d017      	beq.n	80025c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d123      	bne.n	8002618 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	08da      	lsrs	r2, r3, #3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3208      	adds	r2, #8
 80025d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	220f      	movs	r2, #15
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	08da      	lsrs	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3208      	adds	r2, #8
 8002612:	69b9      	ldr	r1, [r7, #24]
 8002614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	2203      	movs	r2, #3
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0203 	and.w	r2, r3, #3
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80c0 	beq.w	80027da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	4b66      	ldr	r3, [pc, #408]	; (80027f8 <HAL_GPIO_Init+0x324>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	4a65      	ldr	r2, [pc, #404]	; (80027f8 <HAL_GPIO_Init+0x324>)
 8002664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002668:	6453      	str	r3, [r2, #68]	; 0x44
 800266a:	4b63      	ldr	r3, [pc, #396]	; (80027f8 <HAL_GPIO_Init+0x324>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002676:	4a61      	ldr	r2, [pc, #388]	; (80027fc <HAL_GPIO_Init+0x328>)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	089b      	lsrs	r3, r3, #2
 800267c:	3302      	adds	r3, #2
 800267e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	220f      	movs	r2, #15
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a58      	ldr	r2, [pc, #352]	; (8002800 <HAL_GPIO_Init+0x32c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d037      	beq.n	8002712 <HAL_GPIO_Init+0x23e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a57      	ldr	r2, [pc, #348]	; (8002804 <HAL_GPIO_Init+0x330>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d031      	beq.n	800270e <HAL_GPIO_Init+0x23a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a56      	ldr	r2, [pc, #344]	; (8002808 <HAL_GPIO_Init+0x334>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d02b      	beq.n	800270a <HAL_GPIO_Init+0x236>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a55      	ldr	r2, [pc, #340]	; (800280c <HAL_GPIO_Init+0x338>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d025      	beq.n	8002706 <HAL_GPIO_Init+0x232>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a54      	ldr	r2, [pc, #336]	; (8002810 <HAL_GPIO_Init+0x33c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d01f      	beq.n	8002702 <HAL_GPIO_Init+0x22e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a53      	ldr	r2, [pc, #332]	; (8002814 <HAL_GPIO_Init+0x340>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d019      	beq.n	80026fe <HAL_GPIO_Init+0x22a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a52      	ldr	r2, [pc, #328]	; (8002818 <HAL_GPIO_Init+0x344>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d013      	beq.n	80026fa <HAL_GPIO_Init+0x226>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a51      	ldr	r2, [pc, #324]	; (800281c <HAL_GPIO_Init+0x348>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00d      	beq.n	80026f6 <HAL_GPIO_Init+0x222>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a50      	ldr	r2, [pc, #320]	; (8002820 <HAL_GPIO_Init+0x34c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d007      	beq.n	80026f2 <HAL_GPIO_Init+0x21e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4f      	ldr	r2, [pc, #316]	; (8002824 <HAL_GPIO_Init+0x350>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d101      	bne.n	80026ee <HAL_GPIO_Init+0x21a>
 80026ea:	2309      	movs	r3, #9
 80026ec:	e012      	b.n	8002714 <HAL_GPIO_Init+0x240>
 80026ee:	230a      	movs	r3, #10
 80026f0:	e010      	b.n	8002714 <HAL_GPIO_Init+0x240>
 80026f2:	2308      	movs	r3, #8
 80026f4:	e00e      	b.n	8002714 <HAL_GPIO_Init+0x240>
 80026f6:	2307      	movs	r3, #7
 80026f8:	e00c      	b.n	8002714 <HAL_GPIO_Init+0x240>
 80026fa:	2306      	movs	r3, #6
 80026fc:	e00a      	b.n	8002714 <HAL_GPIO_Init+0x240>
 80026fe:	2305      	movs	r3, #5
 8002700:	e008      	b.n	8002714 <HAL_GPIO_Init+0x240>
 8002702:	2304      	movs	r3, #4
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x240>
 8002706:	2303      	movs	r3, #3
 8002708:	e004      	b.n	8002714 <HAL_GPIO_Init+0x240>
 800270a:	2302      	movs	r3, #2
 800270c:	e002      	b.n	8002714 <HAL_GPIO_Init+0x240>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_GPIO_Init+0x240>
 8002712:	2300      	movs	r3, #0
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	f002 0203 	and.w	r2, r2, #3
 800271a:	0092      	lsls	r2, r2, #2
 800271c:	4093      	lsls	r3, r2
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002724:	4935      	ldr	r1, [pc, #212]	; (80027fc <HAL_GPIO_Init+0x328>)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002732:	4b3d      	ldr	r3, [pc, #244]	; (8002828 <HAL_GPIO_Init+0x354>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002756:	4a34      	ldr	r2, [pc, #208]	; (8002828 <HAL_GPIO_Init+0x354>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800275c:	4b32      	ldr	r3, [pc, #200]	; (8002828 <HAL_GPIO_Init+0x354>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002780:	4a29      	ldr	r2, [pc, #164]	; (8002828 <HAL_GPIO_Init+0x354>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002786:	4b28      	ldr	r3, [pc, #160]	; (8002828 <HAL_GPIO_Init+0x354>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027aa:	4a1f      	ldr	r2, [pc, #124]	; (8002828 <HAL_GPIO_Init+0x354>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b0:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <HAL_GPIO_Init+0x354>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d4:	4a14      	ldr	r2, [pc, #80]	; (8002828 <HAL_GPIO_Init+0x354>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3301      	adds	r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b0f      	cmp	r3, #15
 80027e4:	f67f ae84 	bls.w	80024f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3724      	adds	r7, #36	; 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40013800 	.word	0x40013800
 8002800:	40020000 	.word	0x40020000
 8002804:	40020400 	.word	0x40020400
 8002808:	40020800 	.word	0x40020800
 800280c:	40020c00 	.word	0x40020c00
 8002810:	40021000 	.word	0x40021000
 8002814:	40021400 	.word	0x40021400
 8002818:	40021800 	.word	0x40021800
 800281c:	40021c00 	.word	0x40021c00
 8002820:	40022000 	.word	0x40022000
 8002824:	40022400 	.word	0x40022400
 8002828:	40013c00 	.word	0x40013c00

0800282c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
 8002838:	4613      	mov	r3, r2
 800283a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800283c:	787b      	ldrb	r3, [r7, #1]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002842:	887a      	ldrh	r2, [r7, #2]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002848:	e003      	b.n	8002852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800284a:	887b      	ldrh	r3, [r7, #2]
 800284c:	041a      	lsls	r2, r3, #16
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	619a      	str	r2, [r3, #24]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800285e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002860:	b08f      	sub	sp, #60	; 0x3c
 8002862:	af0a      	add	r7, sp, #40	; 0x28
 8002864:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e10f      	b.n	8002a90 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fe fb92 	bl	8000fb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2203      	movs	r2, #3
 8002894:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f002 f8d5 	bl	8004a5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	687e      	ldr	r6, [r7, #4]
 80028bc:	466d      	mov	r5, sp
 80028be:	f106 0410 	add.w	r4, r6, #16
 80028c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80028d2:	1d33      	adds	r3, r6, #4
 80028d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028d6:	6838      	ldr	r0, [r7, #0]
 80028d8:	f002 f860 	bl	800499c <USB_CoreInit>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2202      	movs	r2, #2
 80028e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e0d0      	b.n	8002a90 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f002 f8c3 	bl	8004a80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	e04a      	b.n	8002996 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	333d      	adds	r3, #61	; 0x3d
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	333c      	adds	r3, #60	; 0x3c
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002928:	7bfa      	ldrb	r2, [r7, #15]
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	b298      	uxth	r0, r3
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	3344      	adds	r3, #68	; 0x44
 800293c:	4602      	mov	r2, r0
 800293e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3340      	adds	r3, #64	; 0x40
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3348      	adds	r3, #72	; 0x48
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	334c      	adds	r3, #76	; 0x4c
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	3354      	adds	r3, #84	; 0x54
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	3301      	adds	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	d3af      	bcc.n	8002900 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	73fb      	strb	r3, [r7, #15]
 80029a4:	e044      	b.n	8002a30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029fe:	7bfa      	ldrb	r2, [r7, #15]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d3b5      	bcc.n	80029a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	687e      	ldr	r6, [r7, #4]
 8002a42:	466d      	mov	r5, sp
 8002a44:	f106 0410 	add.w	r4, r6, #16
 8002a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a54:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a58:	1d33      	adds	r3, r6, #4
 8002a5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a5c:	6838      	ldr	r0, [r7, #0]
 8002a5e:	f002 f85b 	bl	8004b18 <USB_DevInit>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e00d      	b.n	8002a90 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f002 fa26 	bl	8004eda <USB_DevDisconnect>

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e267      	b.n	8002f7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d075      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ab6:	4b88      	ldr	r3, [pc, #544]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d00c      	beq.n	8002adc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac2:	4b85      	ldr	r3, [pc, #532]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d112      	bne.n	8002af4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ace:	4b82      	ldr	r3, [pc, #520]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ada:	d10b      	bne.n	8002af4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002adc:	4b7e      	ldr	r3, [pc, #504]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d05b      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x108>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d157      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e242      	b.n	8002f7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afc:	d106      	bne.n	8002b0c <HAL_RCC_OscConfig+0x74>
 8002afe:	4b76      	ldr	r3, [pc, #472]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a75      	ldr	r2, [pc, #468]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e01d      	b.n	8002b48 <HAL_RCC_OscConfig+0xb0>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x98>
 8002b16:	4b70      	ldr	r3, [pc, #448]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a6f      	ldr	r2, [pc, #444]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	4b6d      	ldr	r3, [pc, #436]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a6c      	ldr	r2, [pc, #432]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCC_OscConfig+0xb0>
 8002b30:	4b69      	ldr	r3, [pc, #420]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a68      	ldr	r2, [pc, #416]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	4b66      	ldr	r3, [pc, #408]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a65      	ldr	r2, [pc, #404]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d013      	beq.n	8002b78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7fe fbca 	bl	80012e8 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b58:	f7fe fbc6 	bl	80012e8 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e207      	b.n	8002f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b5b      	ldr	r3, [pc, #364]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0xc0>
 8002b76:	e014      	b.n	8002ba2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7fe fbb6 	bl	80012e8 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b80:	f7fe fbb2 	bl	80012e8 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e1f3      	b.n	8002f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b92:	4b51      	ldr	r3, [pc, #324]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0xe8>
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d063      	beq.n	8002c76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bae:	4b4a      	ldr	r3, [pc, #296]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bba:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d11c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc6:	4b44      	ldr	r3, [pc, #272]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d116      	bne.n	8002c00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd2:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_RCC_OscConfig+0x152>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d001      	beq.n	8002bea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e1c7      	b.n	8002f7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bea:	4b3b      	ldr	r3, [pc, #236]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4937      	ldr	r1, [pc, #220]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfe:	e03a      	b.n	8002c76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d020      	beq.n	8002c4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c08:	4b34      	ldr	r3, [pc, #208]	; (8002cdc <HAL_RCC_OscConfig+0x244>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fe fb6b 	bl	80012e8 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c16:	f7fe fb67 	bl	80012e8 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e1a8      	b.n	8002f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c28:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c34:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4925      	ldr	r1, [pc, #148]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	600b      	str	r3, [r1, #0]
 8002c48:	e015      	b.n	8002c76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4a:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_RCC_OscConfig+0x244>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fb4a 	bl	80012e8 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c58:	f7fe fb46 	bl	80012e8 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e187      	b.n	8002f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d036      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d016      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_RCC_OscConfig+0x248>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c90:	f7fe fb2a 	bl	80012e8 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c98:	f7fe fb26 	bl	80012e8 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e167      	b.n	8002f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002caa:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_OscConfig+0x240>)
 8002cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x200>
 8002cb6:	e01b      	b.n	8002cf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cb8:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <HAL_RCC_OscConfig+0x248>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbe:	f7fe fb13 	bl	80012e8 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc4:	e00e      	b.n	8002ce4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc6:	f7fe fb0f 	bl	80012e8 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d907      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e150      	b.n	8002f7a <HAL_RCC_OscConfig+0x4e2>
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	42470000 	.word	0x42470000
 8002ce0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce4:	4b88      	ldr	r3, [pc, #544]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1ea      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8097 	beq.w	8002e2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d02:	4b81      	ldr	r3, [pc, #516]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10f      	bne.n	8002d2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	4b7d      	ldr	r3, [pc, #500]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	4a7c      	ldr	r2, [pc, #496]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1e:	4b7a      	ldr	r3, [pc, #488]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2e:	4b77      	ldr	r3, [pc, #476]	; (8002f0c <HAL_RCC_OscConfig+0x474>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d118      	bne.n	8002d6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d3a:	4b74      	ldr	r3, [pc, #464]	; (8002f0c <HAL_RCC_OscConfig+0x474>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a73      	ldr	r2, [pc, #460]	; (8002f0c <HAL_RCC_OscConfig+0x474>)
 8002d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d46:	f7fe facf 	bl	80012e8 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4e:	f7fe facb 	bl	80012e8 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e10c      	b.n	8002f7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	4b6a      	ldr	r3, [pc, #424]	; (8002f0c <HAL_RCC_OscConfig+0x474>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_OscConfig+0x2ea>
 8002d74:	4b64      	ldr	r3, [pc, #400]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d78:	4a63      	ldr	r2, [pc, #396]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d80:	e01c      	b.n	8002dbc <HAL_RCC_OscConfig+0x324>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b05      	cmp	r3, #5
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x30c>
 8002d8a:	4b5f      	ldr	r3, [pc, #380]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8e:	4a5e      	ldr	r2, [pc, #376]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002d90:	f043 0304 	orr.w	r3, r3, #4
 8002d94:	6713      	str	r3, [r2, #112]	; 0x70
 8002d96:	4b5c      	ldr	r3, [pc, #368]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	4a5b      	ldr	r2, [pc, #364]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6713      	str	r3, [r2, #112]	; 0x70
 8002da2:	e00b      	b.n	8002dbc <HAL_RCC_OscConfig+0x324>
 8002da4:	4b58      	ldr	r3, [pc, #352]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	4a57      	ldr	r2, [pc, #348]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002daa:	f023 0301 	bic.w	r3, r3, #1
 8002dae:	6713      	str	r3, [r2, #112]	; 0x70
 8002db0:	4b55      	ldr	r3, [pc, #340]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	4a54      	ldr	r2, [pc, #336]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002db6:	f023 0304 	bic.w	r3, r3, #4
 8002dba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d015      	beq.n	8002df0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc4:	f7fe fa90 	bl	80012e8 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dcc:	f7fe fa8c 	bl	80012e8 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e0cb      	b.n	8002f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de2:	4b49      	ldr	r3, [pc, #292]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0ee      	beq.n	8002dcc <HAL_RCC_OscConfig+0x334>
 8002dee:	e014      	b.n	8002e1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df0:	f7fe fa7a 	bl	80012e8 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df6:	e00a      	b.n	8002e0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df8:	f7fe fa76 	bl	80012e8 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e0b5      	b.n	8002f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0e:	4b3e      	ldr	r3, [pc, #248]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1ee      	bne.n	8002df8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e1a:	7dfb      	ldrb	r3, [r7, #23]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d105      	bne.n	8002e2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e20:	4b39      	ldr	r3, [pc, #228]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	4a38      	ldr	r2, [pc, #224]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80a1 	beq.w	8002f78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e36:	4b34      	ldr	r3, [pc, #208]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d05c      	beq.n	8002efc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d141      	bne.n	8002ece <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	4b31      	ldr	r3, [pc, #196]	; (8002f10 <HAL_RCC_OscConfig+0x478>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fe fa4a 	bl	80012e8 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe fa46 	bl	80012e8 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e087      	b.n	8002f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6a:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69da      	ldr	r2, [r3, #28]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	019b      	lsls	r3, r3, #6
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	085b      	lsrs	r3, r3, #1
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	041b      	lsls	r3, r3, #16
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	061b      	lsls	r3, r3, #24
 8002e9a:	491b      	ldr	r1, [pc, #108]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <HAL_RCC_OscConfig+0x478>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fe fa1f 	bl	80012e8 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eae:	f7fe fa1b 	bl	80012e8 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e05c      	b.n	8002f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec0:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x416>
 8002ecc:	e054      	b.n	8002f78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ece:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <HAL_RCC_OscConfig+0x478>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fa08 	bl	80012e8 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002edc:	f7fe fa04 	bl	80012e8 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e045      	b.n	8002f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_RCC_OscConfig+0x470>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x444>
 8002efa:	e03d      	b.n	8002f78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e038      	b.n	8002f7a <HAL_RCC_OscConfig+0x4e2>
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f14:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <HAL_RCC_OscConfig+0x4ec>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d028      	beq.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d121      	bne.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d11a      	bne.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f44:	4013      	ands	r3, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d111      	bne.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	085b      	lsrs	r3, r3, #1
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d107      	bne.n	8002f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800

08002f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0cc      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b68      	ldr	r3, [pc, #416]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d90c      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b65      	ldr	r3, [pc, #404]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb2:	4b63      	ldr	r3, [pc, #396]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0b8      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d020      	beq.n	8003012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fdc:	4b59      	ldr	r3, [pc, #356]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	4a58      	ldr	r2, [pc, #352]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fe6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff4:	4b53      	ldr	r3, [pc, #332]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4a52      	ldr	r2, [pc, #328]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003000:	4b50      	ldr	r3, [pc, #320]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	494d      	ldr	r1, [pc, #308]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d044      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d107      	bne.n	8003036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003026:	4b47      	ldr	r3, [pc, #284]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d119      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e07f      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d003      	beq.n	8003046 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003042:	2b03      	cmp	r3, #3
 8003044:	d107      	bne.n	8003056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003046:	4b3f      	ldr	r3, [pc, #252]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e06f      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003056:	4b3b      	ldr	r3, [pc, #236]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e067      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003066:	4b37      	ldr	r3, [pc, #220]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f023 0203 	bic.w	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4934      	ldr	r1, [pc, #208]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003074:	4313      	orrs	r3, r2
 8003076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003078:	f7fe f936 	bl	80012e8 <HAL_GetTick>
 800307c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	e00a      	b.n	8003096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003080:	f7fe f932 	bl	80012e8 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e04f      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 020c 	and.w	r2, r3, #12
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d1eb      	bne.n	8003080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a8:	4b25      	ldr	r3, [pc, #148]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d20c      	bcs.n	80030d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b22      	ldr	r3, [pc, #136]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b20      	ldr	r3, [pc, #128]	; (8003140 <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e032      	b.n	8003136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4916      	ldr	r1, [pc, #88]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d009      	beq.n	800310e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030fa:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	490e      	ldr	r1, [pc, #56]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800310e:	f000 f821 	bl	8003154 <HAL_RCC_GetSysClockFreq>
 8003112:	4602      	mov	r2, r0
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	490a      	ldr	r1, [pc, #40]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 8003120:	5ccb      	ldrb	r3, [r1, r3]
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_RCC_ClockConfig+0x1c8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe f896 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40023c00 	.word	0x40023c00
 8003144:	40023800 	.word	0x40023800
 8003148:	08005f5c 	.word	0x08005f5c
 800314c:	20000000 	.word	0x20000000
 8003150:	20000004 	.word	0x20000004

08003154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003158:	b094      	sub	sp, #80	; 0x50
 800315a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	647b      	str	r3, [r7, #68]	; 0x44
 8003160:	2300      	movs	r3, #0
 8003162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003164:	2300      	movs	r3, #0
 8003166:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800316c:	4b79      	ldr	r3, [pc, #484]	; (8003354 <HAL_RCC_GetSysClockFreq+0x200>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 030c 	and.w	r3, r3, #12
 8003174:	2b08      	cmp	r3, #8
 8003176:	d00d      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0x40>
 8003178:	2b08      	cmp	r3, #8
 800317a:	f200 80e1 	bhi.w	8003340 <HAL_RCC_GetSysClockFreq+0x1ec>
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0x34>
 8003182:	2b04      	cmp	r3, #4
 8003184:	d003      	beq.n	800318e <HAL_RCC_GetSysClockFreq+0x3a>
 8003186:	e0db      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003188:	4b73      	ldr	r3, [pc, #460]	; (8003358 <HAL_RCC_GetSysClockFreq+0x204>)
 800318a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800318c:	e0db      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800318e:	4b73      	ldr	r3, [pc, #460]	; (800335c <HAL_RCC_GetSysClockFreq+0x208>)
 8003190:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003192:	e0d8      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003194:	4b6f      	ldr	r3, [pc, #444]	; (8003354 <HAL_RCC_GetSysClockFreq+0x200>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800319c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800319e:	4b6d      	ldr	r3, [pc, #436]	; (8003354 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d063      	beq.n	8003272 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031aa:	4b6a      	ldr	r3, [pc, #424]	; (8003354 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	099b      	lsrs	r3, r3, #6
 80031b0:	2200      	movs	r2, #0
 80031b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031bc:	633b      	str	r3, [r7, #48]	; 0x30
 80031be:	2300      	movs	r3, #0
 80031c0:	637b      	str	r3, [r7, #52]	; 0x34
 80031c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031c6:	4622      	mov	r2, r4
 80031c8:	462b      	mov	r3, r5
 80031ca:	f04f 0000 	mov.w	r0, #0
 80031ce:	f04f 0100 	mov.w	r1, #0
 80031d2:	0159      	lsls	r1, r3, #5
 80031d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d8:	0150      	lsls	r0, r2, #5
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4621      	mov	r1, r4
 80031e0:	1a51      	subs	r1, r2, r1
 80031e2:	6139      	str	r1, [r7, #16]
 80031e4:	4629      	mov	r1, r5
 80031e6:	eb63 0301 	sbc.w	r3, r3, r1
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031f8:	4659      	mov	r1, fp
 80031fa:	018b      	lsls	r3, r1, #6
 80031fc:	4651      	mov	r1, sl
 80031fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003202:	4651      	mov	r1, sl
 8003204:	018a      	lsls	r2, r1, #6
 8003206:	4651      	mov	r1, sl
 8003208:	ebb2 0801 	subs.w	r8, r2, r1
 800320c:	4659      	mov	r1, fp
 800320e:	eb63 0901 	sbc.w	r9, r3, r1
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800321e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003226:	4690      	mov	r8, r2
 8003228:	4699      	mov	r9, r3
 800322a:	4623      	mov	r3, r4
 800322c:	eb18 0303 	adds.w	r3, r8, r3
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	462b      	mov	r3, r5
 8003234:	eb49 0303 	adc.w	r3, r9, r3
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003246:	4629      	mov	r1, r5
 8003248:	024b      	lsls	r3, r1, #9
 800324a:	4621      	mov	r1, r4
 800324c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003250:	4621      	mov	r1, r4
 8003252:	024a      	lsls	r2, r1, #9
 8003254:	4610      	mov	r0, r2
 8003256:	4619      	mov	r1, r3
 8003258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800325a:	2200      	movs	r2, #0
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28
 800325e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003260:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003264:	f7fd f814 	bl	8000290 <__aeabi_uldivmod>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4613      	mov	r3, r2
 800326e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003270:	e058      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003272:	4b38      	ldr	r3, [pc, #224]	; (8003354 <HAL_RCC_GetSysClockFreq+0x200>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	099b      	lsrs	r3, r3, #6
 8003278:	2200      	movs	r2, #0
 800327a:	4618      	mov	r0, r3
 800327c:	4611      	mov	r1, r2
 800327e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	2300      	movs	r3, #0
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
 8003288:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800328c:	4642      	mov	r2, r8
 800328e:	464b      	mov	r3, r9
 8003290:	f04f 0000 	mov.w	r0, #0
 8003294:	f04f 0100 	mov.w	r1, #0
 8003298:	0159      	lsls	r1, r3, #5
 800329a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800329e:	0150      	lsls	r0, r2, #5
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4641      	mov	r1, r8
 80032a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80032aa:	4649      	mov	r1, r9
 80032ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032c4:	ebb2 040a 	subs.w	r4, r2, sl
 80032c8:	eb63 050b 	sbc.w	r5, r3, fp
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	00eb      	lsls	r3, r5, #3
 80032d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032da:	00e2      	lsls	r2, r4, #3
 80032dc:	4614      	mov	r4, r2
 80032de:	461d      	mov	r5, r3
 80032e0:	4643      	mov	r3, r8
 80032e2:	18e3      	adds	r3, r4, r3
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	464b      	mov	r3, r9
 80032e8:	eb45 0303 	adc.w	r3, r5, r3
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032fa:	4629      	mov	r1, r5
 80032fc:	028b      	lsls	r3, r1, #10
 80032fe:	4621      	mov	r1, r4
 8003300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003304:	4621      	mov	r1, r4
 8003306:	028a      	lsls	r2, r1, #10
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800330e:	2200      	movs	r2, #0
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	61fa      	str	r2, [r7, #28]
 8003314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003318:	f7fc ffba 	bl	8000290 <__aeabi_uldivmod>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4613      	mov	r3, r2
 8003322:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_GetSysClockFreq+0x200>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	3301      	adds	r3, #1
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003334:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800333e:	e002      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_RCC_GetSysClockFreq+0x204>)
 8003342:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003348:	4618      	mov	r0, r3
 800334a:	3750      	adds	r7, #80	; 0x50
 800334c:	46bd      	mov	sp, r7
 800334e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
 8003358:	00f42400 	.word	0x00f42400
 800335c:	007a1200 	.word	0x007a1200

08003360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <HAL_RCC_GetHCLKFreq+0x14>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000000 	.word	0x20000000

08003378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800337c:	f7ff fff0 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	0a9b      	lsrs	r3, r3, #10
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4903      	ldr	r1, [pc, #12]	; (800339c <HAL_RCC_GetPCLK1Freq+0x24>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40023800 	.word	0x40023800
 800339c:	08005f6c 	.word	0x08005f6c

080033a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033a4:	f7ff ffdc 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	0b5b      	lsrs	r3, r3, #13
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4903      	ldr	r1, [pc, #12]	; (80033c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40023800 	.word	0x40023800
 80033c4:	08005f6c 	.word	0x08005f6c

080033c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e041      	b.n	800345e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fd3c 	bl	8000e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f000 fad8 	bl	80039bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e041      	b.n	80034fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d106      	bne.n	8003492 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f839 	bl	8003504 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2202      	movs	r2, #2
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3304      	adds	r3, #4
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f000 fa89 	bl	80039bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d109      	bne.n	800353c <HAL_TIM_PWM_Start+0x24>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b01      	cmp	r3, #1
 8003532:	bf14      	ite	ne
 8003534:	2301      	movne	r3, #1
 8003536:	2300      	moveq	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e022      	b.n	8003582 <HAL_TIM_PWM_Start+0x6a>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b04      	cmp	r3, #4
 8003540:	d109      	bne.n	8003556 <HAL_TIM_PWM_Start+0x3e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b01      	cmp	r3, #1
 800354c:	bf14      	ite	ne
 800354e:	2301      	movne	r3, #1
 8003550:	2300      	moveq	r3, #0
 8003552:	b2db      	uxtb	r3, r3
 8003554:	e015      	b.n	8003582 <HAL_TIM_PWM_Start+0x6a>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b08      	cmp	r3, #8
 800355a:	d109      	bne.n	8003570 <HAL_TIM_PWM_Start+0x58>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	bf14      	ite	ne
 8003568:	2301      	movne	r3, #1
 800356a:	2300      	moveq	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	e008      	b.n	8003582 <HAL_TIM_PWM_Start+0x6a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	bf14      	ite	ne
 800357c:	2301      	movne	r3, #1
 800357e:	2300      	moveq	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e07c      	b.n	8003684 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d104      	bne.n	800359a <HAL_TIM_PWM_Start+0x82>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003598:	e013      	b.n	80035c2 <HAL_TIM_PWM_Start+0xaa>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b04      	cmp	r3, #4
 800359e:	d104      	bne.n	80035aa <HAL_TIM_PWM_Start+0x92>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a8:	e00b      	b.n	80035c2 <HAL_TIM_PWM_Start+0xaa>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d104      	bne.n	80035ba <HAL_TIM_PWM_Start+0xa2>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b8:	e003      	b.n	80035c2 <HAL_TIM_PWM_Start+0xaa>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2202      	movs	r2, #2
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2201      	movs	r2, #1
 80035c8:	6839      	ldr	r1, [r7, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fce0 	bl	8003f90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a2d      	ldr	r2, [pc, #180]	; (800368c <HAL_TIM_PWM_Start+0x174>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d004      	beq.n	80035e4 <HAL_TIM_PWM_Start+0xcc>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a2c      	ldr	r2, [pc, #176]	; (8003690 <HAL_TIM_PWM_Start+0x178>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d101      	bne.n	80035e8 <HAL_TIM_PWM_Start+0xd0>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <HAL_TIM_PWM_Start+0xd2>
 80035e8:	2300      	movs	r3, #0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a22      	ldr	r2, [pc, #136]	; (800368c <HAL_TIM_PWM_Start+0x174>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d022      	beq.n	800364e <HAL_TIM_PWM_Start+0x136>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003610:	d01d      	beq.n	800364e <HAL_TIM_PWM_Start+0x136>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1f      	ldr	r2, [pc, #124]	; (8003694 <HAL_TIM_PWM_Start+0x17c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d018      	beq.n	800364e <HAL_TIM_PWM_Start+0x136>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1d      	ldr	r2, [pc, #116]	; (8003698 <HAL_TIM_PWM_Start+0x180>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <HAL_TIM_PWM_Start+0x136>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1c      	ldr	r2, [pc, #112]	; (800369c <HAL_TIM_PWM_Start+0x184>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00e      	beq.n	800364e <HAL_TIM_PWM_Start+0x136>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a16      	ldr	r2, [pc, #88]	; (8003690 <HAL_TIM_PWM_Start+0x178>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d009      	beq.n	800364e <HAL_TIM_PWM_Start+0x136>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a18      	ldr	r2, [pc, #96]	; (80036a0 <HAL_TIM_PWM_Start+0x188>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_TIM_PWM_Start+0x136>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a16      	ldr	r2, [pc, #88]	; (80036a4 <HAL_TIM_PWM_Start+0x18c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d111      	bne.n	8003672 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b06      	cmp	r3, #6
 800365e:	d010      	beq.n	8003682 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003670:	e007      	b.n	8003682 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0201 	orr.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40010000 	.word	0x40010000
 8003690:	40010400 	.word	0x40010400
 8003694:	40000400 	.word	0x40000400
 8003698:	40000800 	.word	0x40000800
 800369c:	40000c00 	.word	0x40000c00
 80036a0:	40014000 	.word	0x40014000
 80036a4:	40001800 	.word	0x40001800

080036a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e0ae      	b.n	8003824 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b0c      	cmp	r3, #12
 80036d2:	f200 809f 	bhi.w	8003814 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036d6:	a201      	add	r2, pc, #4	; (adr r2, 80036dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036dc:	08003711 	.word	0x08003711
 80036e0:	08003815 	.word	0x08003815
 80036e4:	08003815 	.word	0x08003815
 80036e8:	08003815 	.word	0x08003815
 80036ec:	08003751 	.word	0x08003751
 80036f0:	08003815 	.word	0x08003815
 80036f4:	08003815 	.word	0x08003815
 80036f8:	08003815 	.word	0x08003815
 80036fc:	08003793 	.word	0x08003793
 8003700:	08003815 	.word	0x08003815
 8003704:	08003815 	.word	0x08003815
 8003708:	08003815 	.word	0x08003815
 800370c:	080037d3 	.word	0x080037d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f9f0 	bl	8003afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0208 	orr.w	r2, r2, #8
 800372a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0204 	bic.w	r2, r2, #4
 800373a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6999      	ldr	r1, [r3, #24]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	619a      	str	r2, [r3, #24]
      break;
 800374e:	e064      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fa40 	bl	8003bdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800376a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6999      	ldr	r1, [r3, #24]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	021a      	lsls	r2, r3, #8
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	619a      	str	r2, [r3, #24]
      break;
 8003790:	e043      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fa95 	bl	8003cc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0208 	orr.w	r2, r2, #8
 80037ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0204 	bic.w	r2, r2, #4
 80037bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69d9      	ldr	r1, [r3, #28]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	61da      	str	r2, [r3, #28]
      break;
 80037d0:	e023      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fae9 	bl	8003db0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69da      	ldr	r2, [r3, #28]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69d9      	ldr	r1, [r3, #28]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	021a      	lsls	r2, r3, #8
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	61da      	str	r2, [r3, #28]
      break;
 8003812:	e002      	b.n	800381a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	75fb      	strb	r3, [r7, #23]
      break;
 8003818:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003822:	7dfb      	ldrb	r3, [r7, #23]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_TIM_ConfigClockSource+0x1c>
 8003844:	2302      	movs	r3, #2
 8003846:	e0b4      	b.n	80039b2 <HAL_TIM_ConfigClockSource+0x186>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800386e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003880:	d03e      	beq.n	8003900 <HAL_TIM_ConfigClockSource+0xd4>
 8003882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003886:	f200 8087 	bhi.w	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388e:	f000 8086 	beq.w	800399e <HAL_TIM_ConfigClockSource+0x172>
 8003892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003896:	d87f      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 8003898:	2b70      	cmp	r3, #112	; 0x70
 800389a:	d01a      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0xa6>
 800389c:	2b70      	cmp	r3, #112	; 0x70
 800389e:	d87b      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038a0:	2b60      	cmp	r3, #96	; 0x60
 80038a2:	d050      	beq.n	8003946 <HAL_TIM_ConfigClockSource+0x11a>
 80038a4:	2b60      	cmp	r3, #96	; 0x60
 80038a6:	d877      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038a8:	2b50      	cmp	r3, #80	; 0x50
 80038aa:	d03c      	beq.n	8003926 <HAL_TIM_ConfigClockSource+0xfa>
 80038ac:	2b50      	cmp	r3, #80	; 0x50
 80038ae:	d873      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038b0:	2b40      	cmp	r3, #64	; 0x40
 80038b2:	d058      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x13a>
 80038b4:	2b40      	cmp	r3, #64	; 0x40
 80038b6:	d86f      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038b8:	2b30      	cmp	r3, #48	; 0x30
 80038ba:	d064      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x15a>
 80038bc:	2b30      	cmp	r3, #48	; 0x30
 80038be:	d86b      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d060      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x15a>
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d867      	bhi.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d05c      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x15a>
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	d05a      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x15a>
 80038d0:	e062      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6899      	ldr	r1, [r3, #8]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f000 fb35 	bl	8003f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	609a      	str	r2, [r3, #8]
      break;
 80038fe:	e04f      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	6899      	ldr	r1, [r3, #8]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f000 fb1e 	bl	8003f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003922:	609a      	str	r2, [r3, #8]
      break;
 8003924:	e03c      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	6859      	ldr	r1, [r3, #4]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	461a      	mov	r2, r3
 8003934:	f000 fa92 	bl	8003e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2150      	movs	r1, #80	; 0x50
 800393e:	4618      	mov	r0, r3
 8003940:	f000 faeb 	bl	8003f1a <TIM_ITRx_SetConfig>
      break;
 8003944:	e02c      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	461a      	mov	r2, r3
 8003954:	f000 fab1 	bl	8003eba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2160      	movs	r1, #96	; 0x60
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fadb 	bl	8003f1a <TIM_ITRx_SetConfig>
      break;
 8003964:	e01c      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6859      	ldr	r1, [r3, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	461a      	mov	r2, r3
 8003974:	f000 fa72 	bl	8003e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2140      	movs	r1, #64	; 0x40
 800397e:	4618      	mov	r0, r3
 8003980:	f000 facb 	bl	8003f1a <TIM_ITRx_SetConfig>
      break;
 8003984:	e00c      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4619      	mov	r1, r3
 8003990:	4610      	mov	r0, r2
 8003992:	f000 fac2 	bl	8003f1a <TIM_ITRx_SetConfig>
      break;
 8003996:	e003      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
      break;
 800399c:	e000      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800399e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a40      	ldr	r2, [pc, #256]	; (8003ad0 <TIM_Base_SetConfig+0x114>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d013      	beq.n	80039fc <TIM_Base_SetConfig+0x40>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039da:	d00f      	beq.n	80039fc <TIM_Base_SetConfig+0x40>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a3d      	ldr	r2, [pc, #244]	; (8003ad4 <TIM_Base_SetConfig+0x118>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00b      	beq.n	80039fc <TIM_Base_SetConfig+0x40>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a3c      	ldr	r2, [pc, #240]	; (8003ad8 <TIM_Base_SetConfig+0x11c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d007      	beq.n	80039fc <TIM_Base_SetConfig+0x40>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a3b      	ldr	r2, [pc, #236]	; (8003adc <TIM_Base_SetConfig+0x120>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d003      	beq.n	80039fc <TIM_Base_SetConfig+0x40>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a3a      	ldr	r2, [pc, #232]	; (8003ae0 <TIM_Base_SetConfig+0x124>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d108      	bne.n	8003a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a2f      	ldr	r2, [pc, #188]	; (8003ad0 <TIM_Base_SetConfig+0x114>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d02b      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1c:	d027      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a2c      	ldr	r2, [pc, #176]	; (8003ad4 <TIM_Base_SetConfig+0x118>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d023      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a2b      	ldr	r2, [pc, #172]	; (8003ad8 <TIM_Base_SetConfig+0x11c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d01f      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a2a      	ldr	r2, [pc, #168]	; (8003adc <TIM_Base_SetConfig+0x120>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d01b      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a29      	ldr	r2, [pc, #164]	; (8003ae0 <TIM_Base_SetConfig+0x124>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d017      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a28      	ldr	r2, [pc, #160]	; (8003ae4 <TIM_Base_SetConfig+0x128>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d013      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a27      	ldr	r2, [pc, #156]	; (8003ae8 <TIM_Base_SetConfig+0x12c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00f      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a26      	ldr	r2, [pc, #152]	; (8003aec <TIM_Base_SetConfig+0x130>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00b      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a25      	ldr	r2, [pc, #148]	; (8003af0 <TIM_Base_SetConfig+0x134>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d007      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a24      	ldr	r2, [pc, #144]	; (8003af4 <TIM_Base_SetConfig+0x138>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d003      	beq.n	8003a6e <TIM_Base_SetConfig+0xb2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a23      	ldr	r2, [pc, #140]	; (8003af8 <TIM_Base_SetConfig+0x13c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d108      	bne.n	8003a80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <TIM_Base_SetConfig+0x114>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d003      	beq.n	8003ab4 <TIM_Base_SetConfig+0xf8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a0c      	ldr	r2, [pc, #48]	; (8003ae0 <TIM_Base_SetConfig+0x124>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d103      	bne.n	8003abc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	615a      	str	r2, [r3, #20]
}
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40010000 	.word	0x40010000
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40000800 	.word	0x40000800
 8003adc:	40000c00 	.word	0x40000c00
 8003ae0:	40010400 	.word	0x40010400
 8003ae4:	40014000 	.word	0x40014000
 8003ae8:	40014400 	.word	0x40014400
 8003aec:	40014800 	.word	0x40014800
 8003af0:	40001800 	.word	0x40001800
 8003af4:	40001c00 	.word	0x40001c00
 8003af8:	40002000 	.word	0x40002000

08003afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	f023 0201 	bic.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0303 	bic.w	r3, r3, #3
 8003b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f023 0302 	bic.w	r3, r3, #2
 8003b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a20      	ldr	r2, [pc, #128]	; (8003bd4 <TIM_OC1_SetConfig+0xd8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d003      	beq.n	8003b60 <TIM_OC1_SetConfig+0x64>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a1f      	ldr	r2, [pc, #124]	; (8003bd8 <TIM_OC1_SetConfig+0xdc>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d10c      	bne.n	8003b7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 0308 	bic.w	r3, r3, #8
 8003b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f023 0304 	bic.w	r3, r3, #4
 8003b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <TIM_OC1_SetConfig+0xd8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d003      	beq.n	8003b8a <TIM_OC1_SetConfig+0x8e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a14      	ldr	r2, [pc, #80]	; (8003bd8 <TIM_OC1_SetConfig+0xdc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d111      	bne.n	8003bae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	621a      	str	r2, [r3, #32]
}
 8003bc8:	bf00      	nop
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	40010000 	.word	0x40010000
 8003bd8:	40010400 	.word	0x40010400

08003bdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	f023 0210 	bic.w	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	021b      	lsls	r3, r3, #8
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 0320 	bic.w	r3, r3, #32
 8003c26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a22      	ldr	r2, [pc, #136]	; (8003cc0 <TIM_OC2_SetConfig+0xe4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <TIM_OC2_SetConfig+0x68>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <TIM_OC2_SetConfig+0xe8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d10d      	bne.n	8003c60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <TIM_OC2_SetConfig+0xe4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d003      	beq.n	8003c70 <TIM_OC2_SetConfig+0x94>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <TIM_OC2_SetConfig+0xe8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d113      	bne.n	8003c98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	621a      	str	r2, [r3, #32]
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40010000 	.word	0x40010000
 8003cc4:	40010400 	.word	0x40010400

08003cc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0303 	bic.w	r3, r3, #3
 8003cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	021b      	lsls	r3, r3, #8
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a21      	ldr	r2, [pc, #132]	; (8003da8 <TIM_OC3_SetConfig+0xe0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d003      	beq.n	8003d2e <TIM_OC3_SetConfig+0x66>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a20      	ldr	r2, [pc, #128]	; (8003dac <TIM_OC3_SetConfig+0xe4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d10d      	bne.n	8003d4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a16      	ldr	r2, [pc, #88]	; (8003da8 <TIM_OC3_SetConfig+0xe0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d003      	beq.n	8003d5a <TIM_OC3_SetConfig+0x92>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a15      	ldr	r2, [pc, #84]	; (8003dac <TIM_OC3_SetConfig+0xe4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d113      	bne.n	8003d82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	621a      	str	r2, [r3, #32]
}
 8003d9c:	bf00      	nop
 8003d9e:	371c      	adds	r7, #28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	40010000 	.word	0x40010000
 8003dac:	40010400 	.word	0x40010400

08003db0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	021b      	lsls	r3, r3, #8
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	031b      	lsls	r3, r3, #12
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a12      	ldr	r2, [pc, #72]	; (8003e54 <TIM_OC4_SetConfig+0xa4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_OC4_SetConfig+0x68>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <TIM_OC4_SetConfig+0xa8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d109      	bne.n	8003e2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	019b      	lsls	r3, r3, #6
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	621a      	str	r2, [r3, #32]
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40010000 	.word	0x40010000
 8003e58:	40010400 	.word	0x40010400

08003e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f023 0201 	bic.w	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f023 030a 	bic.w	r3, r3, #10
 8003e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	621a      	str	r2, [r3, #32]
}
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b087      	sub	sp, #28
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	f023 0210 	bic.w	r2, r3, #16
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	031b      	lsls	r3, r3, #12
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ef6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	621a      	str	r2, [r3, #32]
}
 8003f0e:	bf00      	nop
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b085      	sub	sp, #20
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f043 0307 	orr.w	r3, r3, #7
 8003f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	609a      	str	r2, [r3, #8]
}
 8003f44:	bf00      	nop
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	021a      	lsls	r2, r3, #8
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	609a      	str	r2, [r3, #8]
}
 8003f84:	bf00      	nop
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a1a      	ldr	r2, [r3, #32]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1a      	ldr	r2, [r3, #32]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f003 031f 	and.w	r3, r3, #31
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e05a      	b.n	80040aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a21      	ldr	r2, [pc, #132]	; (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d022      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004040:	d01d      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1d      	ldr	r2, [pc, #116]	; (80040bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d018      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a1b      	ldr	r2, [pc, #108]	; (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d013      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1a      	ldr	r2, [pc, #104]	; (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00e      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a18      	ldr	r2, [pc, #96]	; (80040c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d009      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a17      	ldr	r2, [pc, #92]	; (80040cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d004      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a15      	ldr	r2, [pc, #84]	; (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d10c      	bne.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004084:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	4313      	orrs	r3, r2
 800408e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40010000 	.word	0x40010000
 80040bc:	40000400 	.word	0x40000400
 80040c0:	40000800 	.word	0x40000800
 80040c4:	40000c00 	.word	0x40000c00
 80040c8:	40010400 	.word	0x40010400
 80040cc:	40014000 	.word	0x40014000
 80040d0:	40001800 	.word	0x40001800

080040d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e03f      	b.n	8004166 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fc ff12 	bl	8000f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2224      	movs	r2, #36	; 0x24
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f9cb 	bl	80044b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800412c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695a      	ldr	r2, [r3, #20]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800413c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800414c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b08a      	sub	sp, #40	; 0x28
 8004172:	af02      	add	r7, sp, #8
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	4613      	mov	r3, r2
 800417c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b20      	cmp	r3, #32
 800418c:	d17c      	bne.n	8004288 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_UART_Transmit+0x2c>
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e075      	b.n	800428a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_UART_Transmit+0x3e>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e06e      	b.n	800428a <HAL_UART_Transmit+0x11c>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2221      	movs	r2, #33	; 0x21
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041c2:	f7fd f891 	bl	80012e8 <HAL_GetTick>
 80041c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	88fa      	ldrh	r2, [r7, #6]
 80041cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	88fa      	ldrh	r2, [r7, #6]
 80041d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041dc:	d108      	bne.n	80041f0 <HAL_UART_Transmit+0x82>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d104      	bne.n	80041f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	e003      	b.n	80041f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004200:	e02a      	b.n	8004258 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2200      	movs	r2, #0
 800420a:	2180      	movs	r1, #128	; 0x80
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f8e2 	bl	80043d6 <UART_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e036      	b.n	800428a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10b      	bne.n	800423a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004230:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	3302      	adds	r3, #2
 8004236:	61bb      	str	r3, [r7, #24]
 8004238:	e007      	b.n	800424a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	781a      	ldrb	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	3301      	adds	r3, #1
 8004248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1cf      	bne.n	8004202 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2200      	movs	r2, #0
 800426a:	2140      	movs	r1, #64	; 0x40
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f8b2 	bl	80043d6 <UART_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e006      	b.n	800428a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	e000      	b.n	800428a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b08a      	sub	sp, #40	; 0x28
 8004296:	af02      	add	r7, sp, #8
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	603b      	str	r3, [r7, #0]
 800429e:	4613      	mov	r3, r2
 80042a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	f040 808c 	bne.w	80043cc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_UART_Receive+0x2e>
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e084      	b.n	80043ce <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_UART_Receive+0x40>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e07d      	b.n	80043ce <HAL_UART_Receive+0x13c>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2222      	movs	r2, #34	; 0x22
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ee:	f7fc fffb 	bl	80012e8 <HAL_GetTick>
 80042f2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	88fa      	ldrh	r2, [r7, #6]
 80042f8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	88fa      	ldrh	r2, [r7, #6]
 80042fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004308:	d108      	bne.n	800431c <HAL_UART_Receive+0x8a>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d104      	bne.n	800431c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	e003      	b.n	8004324 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004320:	2300      	movs	r3, #0
 8004322:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800432c:	e043      	b.n	80043b6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2200      	movs	r2, #0
 8004336:	2120      	movs	r1, #32
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f84c 	bl	80043d6 <UART_WaitOnFlagUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e042      	b.n	80043ce <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10c      	bne.n	8004368 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	b29b      	uxth	r3, r3
 8004356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435a:	b29a      	uxth	r2, r3
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	3302      	adds	r3, #2
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	e01f      	b.n	80043a8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004370:	d007      	beq.n	8004382 <HAL_UART_Receive+0xf0>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10a      	bne.n	8004390 <HAL_UART_Receive+0xfe>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	701a      	strb	r2, [r3, #0]
 800438e:	e008      	b.n	80043a2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800439c:	b2da      	uxtb	r2, r3
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	3301      	adds	r3, #1
 80043a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1b6      	bne.n	800432e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e000      	b.n	80043ce <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80043cc:	2302      	movs	r3, #2
  }
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3720      	adds	r7, #32
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b090      	sub	sp, #64	; 0x40
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	603b      	str	r3, [r7, #0]
 80043e2:	4613      	mov	r3, r2
 80043e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e6:	e050      	b.n	800448a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d04c      	beq.n	800448a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <UART_WaitOnFlagUntilTimeout+0x30>
 80043f6:	f7fc ff77 	bl	80012e8 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004402:	429a      	cmp	r2, r3
 8004404:	d241      	bcs.n	800448a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	330c      	adds	r3, #12
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800441c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	330c      	adds	r3, #12
 8004424:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004426:	637a      	str	r2, [r7, #52]	; 0x34
 8004428:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800442c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e5      	bne.n	8004406 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3314      	adds	r3, #20
 8004440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	613b      	str	r3, [r7, #16]
   return(result);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	63bb      	str	r3, [r7, #56]	; 0x38
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3314      	adds	r3, #20
 8004458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800445a:	623a      	str	r2, [r7, #32]
 800445c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	69f9      	ldr	r1, [r7, #28]
 8004460:	6a3a      	ldr	r2, [r7, #32]
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	61bb      	str	r3, [r7, #24]
   return(result);
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e5      	bne.n	800443a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e00f      	b.n	80044aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4013      	ands	r3, r2
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	429a      	cmp	r2, r3
 8004498:	bf0c      	ite	eq
 800449a:	2301      	moveq	r3, #1
 800449c:	2300      	movne	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d09f      	beq.n	80043e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3740      	adds	r7, #64	; 0x40
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044b8:	b0c0      	sub	sp, #256	; 0x100
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d0:	68d9      	ldr	r1, [r3, #12]
 80044d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	ea40 0301 	orr.w	r3, r0, r1
 80044dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800450c:	f021 010c 	bic.w	r1, r1, #12
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800451a:	430b      	orrs	r3, r1
 800451c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800451e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800452a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452e:	6999      	ldr	r1, [r3, #24]
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	ea40 0301 	orr.w	r3, r0, r1
 800453a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b8f      	ldr	r3, [pc, #572]	; (8004780 <UART_SetConfig+0x2cc>)
 8004544:	429a      	cmp	r2, r3
 8004546:	d005      	beq.n	8004554 <UART_SetConfig+0xa0>
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4b8d      	ldr	r3, [pc, #564]	; (8004784 <UART_SetConfig+0x2d0>)
 8004550:	429a      	cmp	r2, r3
 8004552:	d104      	bne.n	800455e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004554:	f7fe ff24 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 8004558:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800455c:	e003      	b.n	8004566 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800455e:	f7fe ff0b 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 8004562:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004570:	f040 810c 	bne.w	800478c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004578:	2200      	movs	r2, #0
 800457a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800457e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004582:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004586:	4622      	mov	r2, r4
 8004588:	462b      	mov	r3, r5
 800458a:	1891      	adds	r1, r2, r2
 800458c:	65b9      	str	r1, [r7, #88]	; 0x58
 800458e:	415b      	adcs	r3, r3
 8004590:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004592:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004596:	4621      	mov	r1, r4
 8004598:	eb12 0801 	adds.w	r8, r2, r1
 800459c:	4629      	mov	r1, r5
 800459e:	eb43 0901 	adc.w	r9, r3, r1
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045b6:	4690      	mov	r8, r2
 80045b8:	4699      	mov	r9, r3
 80045ba:	4623      	mov	r3, r4
 80045bc:	eb18 0303 	adds.w	r3, r8, r3
 80045c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045c4:	462b      	mov	r3, r5
 80045c6:	eb49 0303 	adc.w	r3, r9, r3
 80045ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045e2:	460b      	mov	r3, r1
 80045e4:	18db      	adds	r3, r3, r3
 80045e6:	653b      	str	r3, [r7, #80]	; 0x50
 80045e8:	4613      	mov	r3, r2
 80045ea:	eb42 0303 	adc.w	r3, r2, r3
 80045ee:	657b      	str	r3, [r7, #84]	; 0x54
 80045f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045f8:	f7fb fe4a 	bl	8000290 <__aeabi_uldivmod>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4b61      	ldr	r3, [pc, #388]	; (8004788 <UART_SetConfig+0x2d4>)
 8004602:	fba3 2302 	umull	r2, r3, r3, r2
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	011c      	lsls	r4, r3, #4
 800460a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800460e:	2200      	movs	r2, #0
 8004610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004614:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004618:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800461c:	4642      	mov	r2, r8
 800461e:	464b      	mov	r3, r9
 8004620:	1891      	adds	r1, r2, r2
 8004622:	64b9      	str	r1, [r7, #72]	; 0x48
 8004624:	415b      	adcs	r3, r3
 8004626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004628:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800462c:	4641      	mov	r1, r8
 800462e:	eb12 0a01 	adds.w	sl, r2, r1
 8004632:	4649      	mov	r1, r9
 8004634:	eb43 0b01 	adc.w	fp, r3, r1
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004644:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004648:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800464c:	4692      	mov	sl, r2
 800464e:	469b      	mov	fp, r3
 8004650:	4643      	mov	r3, r8
 8004652:	eb1a 0303 	adds.w	r3, sl, r3
 8004656:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800465a:	464b      	mov	r3, r9
 800465c:	eb4b 0303 	adc.w	r3, fp, r3
 8004660:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004670:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004674:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004678:	460b      	mov	r3, r1
 800467a:	18db      	adds	r3, r3, r3
 800467c:	643b      	str	r3, [r7, #64]	; 0x40
 800467e:	4613      	mov	r3, r2
 8004680:	eb42 0303 	adc.w	r3, r2, r3
 8004684:	647b      	str	r3, [r7, #68]	; 0x44
 8004686:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800468a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800468e:	f7fb fdff 	bl	8000290 <__aeabi_uldivmod>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4611      	mov	r1, r2
 8004698:	4b3b      	ldr	r3, [pc, #236]	; (8004788 <UART_SetConfig+0x2d4>)
 800469a:	fba3 2301 	umull	r2, r3, r3, r1
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	2264      	movs	r2, #100	; 0x64
 80046a2:	fb02 f303 	mul.w	r3, r2, r3
 80046a6:	1acb      	subs	r3, r1, r3
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046ae:	4b36      	ldr	r3, [pc, #216]	; (8004788 <UART_SetConfig+0x2d4>)
 80046b0:	fba3 2302 	umull	r2, r3, r3, r2
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046bc:	441c      	add	r4, r3
 80046be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046d0:	4642      	mov	r2, r8
 80046d2:	464b      	mov	r3, r9
 80046d4:	1891      	adds	r1, r2, r2
 80046d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80046d8:	415b      	adcs	r3, r3
 80046da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046e0:	4641      	mov	r1, r8
 80046e2:	1851      	adds	r1, r2, r1
 80046e4:	6339      	str	r1, [r7, #48]	; 0x30
 80046e6:	4649      	mov	r1, r9
 80046e8:	414b      	adcs	r3, r1
 80046ea:	637b      	str	r3, [r7, #52]	; 0x34
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046f8:	4659      	mov	r1, fp
 80046fa:	00cb      	lsls	r3, r1, #3
 80046fc:	4651      	mov	r1, sl
 80046fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004702:	4651      	mov	r1, sl
 8004704:	00ca      	lsls	r2, r1, #3
 8004706:	4610      	mov	r0, r2
 8004708:	4619      	mov	r1, r3
 800470a:	4603      	mov	r3, r0
 800470c:	4642      	mov	r2, r8
 800470e:	189b      	adds	r3, r3, r2
 8004710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004714:	464b      	mov	r3, r9
 8004716:	460a      	mov	r2, r1
 8004718:	eb42 0303 	adc.w	r3, r2, r3
 800471c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800472c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004730:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004734:	460b      	mov	r3, r1
 8004736:	18db      	adds	r3, r3, r3
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
 800473a:	4613      	mov	r3, r2
 800473c:	eb42 0303 	adc.w	r3, r2, r3
 8004740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004742:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004746:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800474a:	f7fb fda1 	bl	8000290 <__aeabi_uldivmod>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4b0d      	ldr	r3, [pc, #52]	; (8004788 <UART_SetConfig+0x2d4>)
 8004754:	fba3 1302 	umull	r1, r3, r3, r2
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	2164      	movs	r1, #100	; 0x64
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	3332      	adds	r3, #50	; 0x32
 8004766:	4a08      	ldr	r2, [pc, #32]	; (8004788 <UART_SetConfig+0x2d4>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	095b      	lsrs	r3, r3, #5
 800476e:	f003 0207 	and.w	r2, r3, #7
 8004772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4422      	add	r2, r4
 800477a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800477c:	e105      	b.n	800498a <UART_SetConfig+0x4d6>
 800477e:	bf00      	nop
 8004780:	40011000 	.word	0x40011000
 8004784:	40011400 	.word	0x40011400
 8004788:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800478c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004790:	2200      	movs	r2, #0
 8004792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004796:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800479a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800479e:	4642      	mov	r2, r8
 80047a0:	464b      	mov	r3, r9
 80047a2:	1891      	adds	r1, r2, r2
 80047a4:	6239      	str	r1, [r7, #32]
 80047a6:	415b      	adcs	r3, r3
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
 80047aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047ae:	4641      	mov	r1, r8
 80047b0:	1854      	adds	r4, r2, r1
 80047b2:	4649      	mov	r1, r9
 80047b4:	eb43 0501 	adc.w	r5, r3, r1
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	00eb      	lsls	r3, r5, #3
 80047c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047c6:	00e2      	lsls	r2, r4, #3
 80047c8:	4614      	mov	r4, r2
 80047ca:	461d      	mov	r5, r3
 80047cc:	4643      	mov	r3, r8
 80047ce:	18e3      	adds	r3, r4, r3
 80047d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047d4:	464b      	mov	r3, r9
 80047d6:	eb45 0303 	adc.w	r3, r5, r3
 80047da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047fa:	4629      	mov	r1, r5
 80047fc:	008b      	lsls	r3, r1, #2
 80047fe:	4621      	mov	r1, r4
 8004800:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004804:	4621      	mov	r1, r4
 8004806:	008a      	lsls	r2, r1, #2
 8004808:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800480c:	f7fb fd40 	bl	8000290 <__aeabi_uldivmod>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4b60      	ldr	r3, [pc, #384]	; (8004998 <UART_SetConfig+0x4e4>)
 8004816:	fba3 2302 	umull	r2, r3, r3, r2
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	011c      	lsls	r4, r3, #4
 800481e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004822:	2200      	movs	r2, #0
 8004824:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004828:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800482c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004830:	4642      	mov	r2, r8
 8004832:	464b      	mov	r3, r9
 8004834:	1891      	adds	r1, r2, r2
 8004836:	61b9      	str	r1, [r7, #24]
 8004838:	415b      	adcs	r3, r3
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004840:	4641      	mov	r1, r8
 8004842:	1851      	adds	r1, r2, r1
 8004844:	6139      	str	r1, [r7, #16]
 8004846:	4649      	mov	r1, r9
 8004848:	414b      	adcs	r3, r1
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004858:	4659      	mov	r1, fp
 800485a:	00cb      	lsls	r3, r1, #3
 800485c:	4651      	mov	r1, sl
 800485e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004862:	4651      	mov	r1, sl
 8004864:	00ca      	lsls	r2, r1, #3
 8004866:	4610      	mov	r0, r2
 8004868:	4619      	mov	r1, r3
 800486a:	4603      	mov	r3, r0
 800486c:	4642      	mov	r2, r8
 800486e:	189b      	adds	r3, r3, r2
 8004870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004874:	464b      	mov	r3, r9
 8004876:	460a      	mov	r2, r1
 8004878:	eb42 0303 	adc.w	r3, r2, r3
 800487c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	67bb      	str	r3, [r7, #120]	; 0x78
 800488a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004898:	4649      	mov	r1, r9
 800489a:	008b      	lsls	r3, r1, #2
 800489c:	4641      	mov	r1, r8
 800489e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048a2:	4641      	mov	r1, r8
 80048a4:	008a      	lsls	r2, r1, #2
 80048a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048aa:	f7fb fcf1 	bl	8000290 <__aeabi_uldivmod>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4b39      	ldr	r3, [pc, #228]	; (8004998 <UART_SetConfig+0x4e4>)
 80048b4:	fba3 1302 	umull	r1, r3, r3, r2
 80048b8:	095b      	lsrs	r3, r3, #5
 80048ba:	2164      	movs	r1, #100	; 0x64
 80048bc:	fb01 f303 	mul.w	r3, r1, r3
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	3332      	adds	r3, #50	; 0x32
 80048c6:	4a34      	ldr	r2, [pc, #208]	; (8004998 <UART_SetConfig+0x4e4>)
 80048c8:	fba2 2303 	umull	r2, r3, r2, r3
 80048cc:	095b      	lsrs	r3, r3, #5
 80048ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048d2:	441c      	add	r4, r3
 80048d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048d8:	2200      	movs	r2, #0
 80048da:	673b      	str	r3, [r7, #112]	; 0x70
 80048dc:	677a      	str	r2, [r7, #116]	; 0x74
 80048de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048e2:	4642      	mov	r2, r8
 80048e4:	464b      	mov	r3, r9
 80048e6:	1891      	adds	r1, r2, r2
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	415b      	adcs	r3, r3
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048f2:	4641      	mov	r1, r8
 80048f4:	1851      	adds	r1, r2, r1
 80048f6:	6039      	str	r1, [r7, #0]
 80048f8:	4649      	mov	r1, r9
 80048fa:	414b      	adcs	r3, r1
 80048fc:	607b      	str	r3, [r7, #4]
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800490a:	4659      	mov	r1, fp
 800490c:	00cb      	lsls	r3, r1, #3
 800490e:	4651      	mov	r1, sl
 8004910:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004914:	4651      	mov	r1, sl
 8004916:	00ca      	lsls	r2, r1, #3
 8004918:	4610      	mov	r0, r2
 800491a:	4619      	mov	r1, r3
 800491c:	4603      	mov	r3, r0
 800491e:	4642      	mov	r2, r8
 8004920:	189b      	adds	r3, r3, r2
 8004922:	66bb      	str	r3, [r7, #104]	; 0x68
 8004924:	464b      	mov	r3, r9
 8004926:	460a      	mov	r2, r1
 8004928:	eb42 0303 	adc.w	r3, r2, r3
 800492c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	663b      	str	r3, [r7, #96]	; 0x60
 8004938:	667a      	str	r2, [r7, #100]	; 0x64
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004946:	4649      	mov	r1, r9
 8004948:	008b      	lsls	r3, r1, #2
 800494a:	4641      	mov	r1, r8
 800494c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004950:	4641      	mov	r1, r8
 8004952:	008a      	lsls	r2, r1, #2
 8004954:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004958:	f7fb fc9a 	bl	8000290 <__aeabi_uldivmod>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <UART_SetConfig+0x4e4>)
 8004962:	fba3 1302 	umull	r1, r3, r3, r2
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	2164      	movs	r1, #100	; 0x64
 800496a:	fb01 f303 	mul.w	r3, r1, r3
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	3332      	adds	r3, #50	; 0x32
 8004974:	4a08      	ldr	r2, [pc, #32]	; (8004998 <UART_SetConfig+0x4e4>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	f003 020f 	and.w	r2, r3, #15
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4422      	add	r2, r4
 8004988:	609a      	str	r2, [r3, #8]
}
 800498a:	bf00      	nop
 800498c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004990:	46bd      	mov	sp, r7
 8004992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004996:	bf00      	nop
 8004998:	51eb851f 	.word	0x51eb851f

0800499c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800499c:	b084      	sub	sp, #16
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	f107 001c 	add.w	r0, r7, #28
 80049aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d122      	bne.n	80049fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d105      	bne.n	80049ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 faa2 	bl	8004f38 <USB_CoreReset>
 80049f4:	4603      	mov	r3, r0
 80049f6:	73fb      	strb	r3, [r7, #15]
 80049f8:	e01a      	b.n	8004a30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa96 	bl	8004f38 <USB_CoreReset>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	639a      	str	r2, [r3, #56]	; 0x38
 8004a22:	e005      	b.n	8004a30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d10b      	bne.n	8004a4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f043 0206 	orr.w	r2, r3, #6
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f043 0220 	orr.w	r2, r3, #32
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a5a:	b004      	add	sp, #16
 8004a5c:	4770      	bx	lr

08004a5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f023 0201 	bic.w	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d115      	bne.n	8004ace <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004aae:	2001      	movs	r0, #1
 8004ab0:	f7fc fc26 	bl	8001300 <HAL_Delay>
      ms++;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa2e 	bl	8004f1c <USB_GetMode>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d01e      	beq.n	8004b04 <USB_SetCurrentMode+0x84>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b31      	cmp	r3, #49	; 0x31
 8004aca:	d9f0      	bls.n	8004aae <USB_SetCurrentMode+0x2e>
 8004acc:	e01a      	b.n	8004b04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ace:	78fb      	ldrb	r3, [r7, #3]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d115      	bne.n	8004b00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	f7fc fc0d 	bl	8001300 <HAL_Delay>
      ms++;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fa15 	bl	8004f1c <USB_GetMode>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <USB_SetCurrentMode+0x84>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b31      	cmp	r3, #49	; 0x31
 8004afc:	d9f0      	bls.n	8004ae0 <USB_SetCurrentMode+0x60>
 8004afe:	e001      	b.n	8004b04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e005      	b.n	8004b10 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b32      	cmp	r3, #50	; 0x32
 8004b08:	d101      	bne.n	8004b0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b18:	b084      	sub	sp, #16
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b086      	sub	sp, #24
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b32:	2300      	movs	r3, #0
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	e009      	b.n	8004b4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	3340      	adds	r3, #64	; 0x40
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	2200      	movs	r2, #0
 8004b44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	2b0e      	cmp	r3, #14
 8004b50:	d9f2      	bls.n	8004b38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d11c      	bne.n	8004b92 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b66:	f043 0302 	orr.w	r3, r3, #2
 8004b6a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	639a      	str	r2, [r3, #56]	; 0x38
 8004b90:	e00b      	b.n	8004baa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	680b      	ldr	r3, [r1, #0]
 8004bc8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d10c      	bne.n	8004bea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d104      	bne.n	8004be0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f965 	bl	8004ea8 <USB_SetDevSpeed>
 8004bde:	e008      	b.n	8004bf2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004be0:	2101      	movs	r1, #1
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f960 	bl	8004ea8 <USB_SetDevSpeed>
 8004be8:	e003      	b.n	8004bf2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bea:	2103      	movs	r1, #3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f95b 	bl	8004ea8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bf2:	2110      	movs	r1, #16
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f8f3 	bl	8004de0 <USB_FlushTxFifo>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f91f 	bl	8004e48 <USB_FlushRxFifo>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c26:	461a      	mov	r2, r3
 8004c28:	2300      	movs	r3, #0
 8004c2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c32:	461a      	mov	r2, r3
 8004c34:	2300      	movs	r3, #0
 8004c36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	e043      	b.n	8004cc6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c54:	d118      	bne.n	8004c88 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10a      	bne.n	8004c72 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	e013      	b.n	8004c9a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	e008      	b.n	8004c9a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c94:	461a      	mov	r2, r3
 8004c96:	2300      	movs	r3, #0
 8004c98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	2300      	movs	r3, #0
 8004caa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d3b7      	bcc.n	8004c3e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cce:	2300      	movs	r3, #0
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	e043      	b.n	8004d5c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cea:	d118      	bne.n	8004d1e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10a      	bne.n	8004d08 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	e013      	b.n	8004d30 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d14:	461a      	mov	r2, r3
 8004d16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	e008      	b.n	8004d30 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	2300      	movs	r3, #0
 8004d40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d3b7      	bcc.n	8004cd4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d105      	bne.n	8004d98 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	f043 0210 	orr.w	r2, r3, #16
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699a      	ldr	r2, [r3, #24]
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <USB_DevInit+0x2c4>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f043 0208 	orr.w	r2, r3, #8
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d107      	bne.n	8004dcc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dc4:	f043 0304 	orr.w	r3, r3, #4
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dd8:	b004      	add	sp, #16
 8004dda:	4770      	bx	lr
 8004ddc:	803c3800 	.word	0x803c3800

08004de0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3301      	adds	r3, #1
 8004df2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4a13      	ldr	r2, [pc, #76]	; (8004e44 <USB_FlushTxFifo+0x64>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d901      	bls.n	8004e00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e01b      	b.n	8004e38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	daf2      	bge.n	8004dee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	019b      	lsls	r3, r3, #6
 8004e10:	f043 0220 	orr.w	r2, r3, #32
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4a08      	ldr	r2, [pc, #32]	; (8004e44 <USB_FlushTxFifo+0x64>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d901      	bls.n	8004e2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e006      	b.n	8004e38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d0f0      	beq.n	8004e18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	00030d40 	.word	0x00030d40

08004e48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3301      	adds	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4a11      	ldr	r2, [pc, #68]	; (8004ea4 <USB_FlushRxFifo+0x5c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d901      	bls.n	8004e66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e018      	b.n	8004e98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	daf2      	bge.n	8004e54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2210      	movs	r2, #16
 8004e76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4a08      	ldr	r2, [pc, #32]	; (8004ea4 <USB_FlushRxFifo+0x5c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d901      	bls.n	8004e8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e006      	b.n	8004e98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	2b10      	cmp	r3, #16
 8004e94:	d0f0      	beq.n	8004e78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	00030d40 	.word	0x00030d40

08004ea8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	68f9      	ldr	r1, [r7, #12]
 8004ec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b085      	sub	sp, #20
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ef4:	f023 0303 	bic.w	r3, r3, #3
 8004ef8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f08:	f043 0302 	orr.w	r3, r3, #2
 8004f0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	f003 0301 	and.w	r3, r3, #1
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4a13      	ldr	r2, [pc, #76]	; (8004f9c <USB_CoreReset+0x64>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d901      	bls.n	8004f56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e01b      	b.n	8004f8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	daf2      	bge.n	8004f44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f043 0201 	orr.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3301      	adds	r3, #1
 8004f72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4a09      	ldr	r2, [pc, #36]	; (8004f9c <USB_CoreReset+0x64>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d901      	bls.n	8004f80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e006      	b.n	8004f8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d0f0      	beq.n	8004f6e <USB_CoreReset+0x36>

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	00030d40 	.word	0x00030d40

08004fa0 <__errno>:
 8004fa0:	4b01      	ldr	r3, [pc, #4]	; (8004fa8 <__errno+0x8>)
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	2000000c 	.word	0x2000000c

08004fac <__libc_init_array>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	4d0d      	ldr	r5, [pc, #52]	; (8004fe4 <__libc_init_array+0x38>)
 8004fb0:	4c0d      	ldr	r4, [pc, #52]	; (8004fe8 <__libc_init_array+0x3c>)
 8004fb2:	1b64      	subs	r4, r4, r5
 8004fb4:	10a4      	asrs	r4, r4, #2
 8004fb6:	2600      	movs	r6, #0
 8004fb8:	42a6      	cmp	r6, r4
 8004fba:	d109      	bne.n	8004fd0 <__libc_init_array+0x24>
 8004fbc:	4d0b      	ldr	r5, [pc, #44]	; (8004fec <__libc_init_array+0x40>)
 8004fbe:	4c0c      	ldr	r4, [pc, #48]	; (8004ff0 <__libc_init_array+0x44>)
 8004fc0:	f000 ffae 	bl	8005f20 <_init>
 8004fc4:	1b64      	subs	r4, r4, r5
 8004fc6:	10a4      	asrs	r4, r4, #2
 8004fc8:	2600      	movs	r6, #0
 8004fca:	42a6      	cmp	r6, r4
 8004fcc:	d105      	bne.n	8004fda <__libc_init_array+0x2e>
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
 8004fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd4:	4798      	blx	r3
 8004fd6:	3601      	adds	r6, #1
 8004fd8:	e7ee      	b.n	8004fb8 <__libc_init_array+0xc>
 8004fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fde:	4798      	blx	r3
 8004fe0:	3601      	adds	r6, #1
 8004fe2:	e7f2      	b.n	8004fca <__libc_init_array+0x1e>
 8004fe4:	08006014 	.word	0x08006014
 8004fe8:	08006014 	.word	0x08006014
 8004fec:	08006014 	.word	0x08006014
 8004ff0:	08006018 	.word	0x08006018

08004ff4 <memset>:
 8004ff4:	4402      	add	r2, r0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d100      	bne.n	8004ffe <memset+0xa>
 8004ffc:	4770      	bx	lr
 8004ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8005002:	e7f9      	b.n	8004ff8 <memset+0x4>

08005004 <iprintf>:
 8005004:	b40f      	push	{r0, r1, r2, r3}
 8005006:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <iprintf+0x2c>)
 8005008:	b513      	push	{r0, r1, r4, lr}
 800500a:	681c      	ldr	r4, [r3, #0]
 800500c:	b124      	cbz	r4, 8005018 <iprintf+0x14>
 800500e:	69a3      	ldr	r3, [r4, #24]
 8005010:	b913      	cbnz	r3, 8005018 <iprintf+0x14>
 8005012:	4620      	mov	r0, r4
 8005014:	f000 f866 	bl	80050e4 <__sinit>
 8005018:	ab05      	add	r3, sp, #20
 800501a:	9a04      	ldr	r2, [sp, #16]
 800501c:	68a1      	ldr	r1, [r4, #8]
 800501e:	9301      	str	r3, [sp, #4]
 8005020:	4620      	mov	r0, r4
 8005022:	f000 f9bd 	bl	80053a0 <_vfiprintf_r>
 8005026:	b002      	add	sp, #8
 8005028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800502c:	b004      	add	sp, #16
 800502e:	4770      	bx	lr
 8005030:	2000000c 	.word	0x2000000c

08005034 <std>:
 8005034:	2300      	movs	r3, #0
 8005036:	b510      	push	{r4, lr}
 8005038:	4604      	mov	r4, r0
 800503a:	e9c0 3300 	strd	r3, r3, [r0]
 800503e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005042:	6083      	str	r3, [r0, #8]
 8005044:	8181      	strh	r1, [r0, #12]
 8005046:	6643      	str	r3, [r0, #100]	; 0x64
 8005048:	81c2      	strh	r2, [r0, #14]
 800504a:	6183      	str	r3, [r0, #24]
 800504c:	4619      	mov	r1, r3
 800504e:	2208      	movs	r2, #8
 8005050:	305c      	adds	r0, #92	; 0x5c
 8005052:	f7ff ffcf 	bl	8004ff4 <memset>
 8005056:	4b05      	ldr	r3, [pc, #20]	; (800506c <std+0x38>)
 8005058:	6263      	str	r3, [r4, #36]	; 0x24
 800505a:	4b05      	ldr	r3, [pc, #20]	; (8005070 <std+0x3c>)
 800505c:	62a3      	str	r3, [r4, #40]	; 0x28
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <std+0x40>)
 8005060:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005062:	4b05      	ldr	r3, [pc, #20]	; (8005078 <std+0x44>)
 8005064:	6224      	str	r4, [r4, #32]
 8005066:	6323      	str	r3, [r4, #48]	; 0x30
 8005068:	bd10      	pop	{r4, pc}
 800506a:	bf00      	nop
 800506c:	08005949 	.word	0x08005949
 8005070:	0800596b 	.word	0x0800596b
 8005074:	080059a3 	.word	0x080059a3
 8005078:	080059c7 	.word	0x080059c7

0800507c <_cleanup_r>:
 800507c:	4901      	ldr	r1, [pc, #4]	; (8005084 <_cleanup_r+0x8>)
 800507e:	f000 b8af 	b.w	80051e0 <_fwalk_reent>
 8005082:	bf00      	nop
 8005084:	08005ca1 	.word	0x08005ca1

08005088 <__sfmoreglue>:
 8005088:	b570      	push	{r4, r5, r6, lr}
 800508a:	2268      	movs	r2, #104	; 0x68
 800508c:	1e4d      	subs	r5, r1, #1
 800508e:	4355      	muls	r5, r2
 8005090:	460e      	mov	r6, r1
 8005092:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005096:	f000 f8e5 	bl	8005264 <_malloc_r>
 800509a:	4604      	mov	r4, r0
 800509c:	b140      	cbz	r0, 80050b0 <__sfmoreglue+0x28>
 800509e:	2100      	movs	r1, #0
 80050a0:	e9c0 1600 	strd	r1, r6, [r0]
 80050a4:	300c      	adds	r0, #12
 80050a6:	60a0      	str	r0, [r4, #8]
 80050a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80050ac:	f7ff ffa2 	bl	8004ff4 <memset>
 80050b0:	4620      	mov	r0, r4
 80050b2:	bd70      	pop	{r4, r5, r6, pc}

080050b4 <__sfp_lock_acquire>:
 80050b4:	4801      	ldr	r0, [pc, #4]	; (80050bc <__sfp_lock_acquire+0x8>)
 80050b6:	f000 b8b3 	b.w	8005220 <__retarget_lock_acquire_recursive>
 80050ba:	bf00      	nop
 80050bc:	200008a9 	.word	0x200008a9

080050c0 <__sfp_lock_release>:
 80050c0:	4801      	ldr	r0, [pc, #4]	; (80050c8 <__sfp_lock_release+0x8>)
 80050c2:	f000 b8ae 	b.w	8005222 <__retarget_lock_release_recursive>
 80050c6:	bf00      	nop
 80050c8:	200008a9 	.word	0x200008a9

080050cc <__sinit_lock_acquire>:
 80050cc:	4801      	ldr	r0, [pc, #4]	; (80050d4 <__sinit_lock_acquire+0x8>)
 80050ce:	f000 b8a7 	b.w	8005220 <__retarget_lock_acquire_recursive>
 80050d2:	bf00      	nop
 80050d4:	200008aa 	.word	0x200008aa

080050d8 <__sinit_lock_release>:
 80050d8:	4801      	ldr	r0, [pc, #4]	; (80050e0 <__sinit_lock_release+0x8>)
 80050da:	f000 b8a2 	b.w	8005222 <__retarget_lock_release_recursive>
 80050de:	bf00      	nop
 80050e0:	200008aa 	.word	0x200008aa

080050e4 <__sinit>:
 80050e4:	b510      	push	{r4, lr}
 80050e6:	4604      	mov	r4, r0
 80050e8:	f7ff fff0 	bl	80050cc <__sinit_lock_acquire>
 80050ec:	69a3      	ldr	r3, [r4, #24]
 80050ee:	b11b      	cbz	r3, 80050f8 <__sinit+0x14>
 80050f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f4:	f7ff bff0 	b.w	80050d8 <__sinit_lock_release>
 80050f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050fc:	6523      	str	r3, [r4, #80]	; 0x50
 80050fe:	4b13      	ldr	r3, [pc, #76]	; (800514c <__sinit+0x68>)
 8005100:	4a13      	ldr	r2, [pc, #76]	; (8005150 <__sinit+0x6c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	62a2      	str	r2, [r4, #40]	; 0x28
 8005106:	42a3      	cmp	r3, r4
 8005108:	bf04      	itt	eq
 800510a:	2301      	moveq	r3, #1
 800510c:	61a3      	streq	r3, [r4, #24]
 800510e:	4620      	mov	r0, r4
 8005110:	f000 f820 	bl	8005154 <__sfp>
 8005114:	6060      	str	r0, [r4, #4]
 8005116:	4620      	mov	r0, r4
 8005118:	f000 f81c 	bl	8005154 <__sfp>
 800511c:	60a0      	str	r0, [r4, #8]
 800511e:	4620      	mov	r0, r4
 8005120:	f000 f818 	bl	8005154 <__sfp>
 8005124:	2200      	movs	r2, #0
 8005126:	60e0      	str	r0, [r4, #12]
 8005128:	2104      	movs	r1, #4
 800512a:	6860      	ldr	r0, [r4, #4]
 800512c:	f7ff ff82 	bl	8005034 <std>
 8005130:	68a0      	ldr	r0, [r4, #8]
 8005132:	2201      	movs	r2, #1
 8005134:	2109      	movs	r1, #9
 8005136:	f7ff ff7d 	bl	8005034 <std>
 800513a:	68e0      	ldr	r0, [r4, #12]
 800513c:	2202      	movs	r2, #2
 800513e:	2112      	movs	r1, #18
 8005140:	f7ff ff78 	bl	8005034 <std>
 8005144:	2301      	movs	r3, #1
 8005146:	61a3      	str	r3, [r4, #24]
 8005148:	e7d2      	b.n	80050f0 <__sinit+0xc>
 800514a:	bf00      	nop
 800514c:	08005f74 	.word	0x08005f74
 8005150:	0800507d 	.word	0x0800507d

08005154 <__sfp>:
 8005154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005156:	4607      	mov	r7, r0
 8005158:	f7ff ffac 	bl	80050b4 <__sfp_lock_acquire>
 800515c:	4b1e      	ldr	r3, [pc, #120]	; (80051d8 <__sfp+0x84>)
 800515e:	681e      	ldr	r6, [r3, #0]
 8005160:	69b3      	ldr	r3, [r6, #24]
 8005162:	b913      	cbnz	r3, 800516a <__sfp+0x16>
 8005164:	4630      	mov	r0, r6
 8005166:	f7ff ffbd 	bl	80050e4 <__sinit>
 800516a:	3648      	adds	r6, #72	; 0x48
 800516c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005170:	3b01      	subs	r3, #1
 8005172:	d503      	bpl.n	800517c <__sfp+0x28>
 8005174:	6833      	ldr	r3, [r6, #0]
 8005176:	b30b      	cbz	r3, 80051bc <__sfp+0x68>
 8005178:	6836      	ldr	r6, [r6, #0]
 800517a:	e7f7      	b.n	800516c <__sfp+0x18>
 800517c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005180:	b9d5      	cbnz	r5, 80051b8 <__sfp+0x64>
 8005182:	4b16      	ldr	r3, [pc, #88]	; (80051dc <__sfp+0x88>)
 8005184:	60e3      	str	r3, [r4, #12]
 8005186:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800518a:	6665      	str	r5, [r4, #100]	; 0x64
 800518c:	f000 f847 	bl	800521e <__retarget_lock_init_recursive>
 8005190:	f7ff ff96 	bl	80050c0 <__sfp_lock_release>
 8005194:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005198:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800519c:	6025      	str	r5, [r4, #0]
 800519e:	61a5      	str	r5, [r4, #24]
 80051a0:	2208      	movs	r2, #8
 80051a2:	4629      	mov	r1, r5
 80051a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80051a8:	f7ff ff24 	bl	8004ff4 <memset>
 80051ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80051b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80051b4:	4620      	mov	r0, r4
 80051b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051b8:	3468      	adds	r4, #104	; 0x68
 80051ba:	e7d9      	b.n	8005170 <__sfp+0x1c>
 80051bc:	2104      	movs	r1, #4
 80051be:	4638      	mov	r0, r7
 80051c0:	f7ff ff62 	bl	8005088 <__sfmoreglue>
 80051c4:	4604      	mov	r4, r0
 80051c6:	6030      	str	r0, [r6, #0]
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d1d5      	bne.n	8005178 <__sfp+0x24>
 80051cc:	f7ff ff78 	bl	80050c0 <__sfp_lock_release>
 80051d0:	230c      	movs	r3, #12
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	e7ee      	b.n	80051b4 <__sfp+0x60>
 80051d6:	bf00      	nop
 80051d8:	08005f74 	.word	0x08005f74
 80051dc:	ffff0001 	.word	0xffff0001

080051e0 <_fwalk_reent>:
 80051e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051e4:	4606      	mov	r6, r0
 80051e6:	4688      	mov	r8, r1
 80051e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051ec:	2700      	movs	r7, #0
 80051ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051f2:	f1b9 0901 	subs.w	r9, r9, #1
 80051f6:	d505      	bpl.n	8005204 <_fwalk_reent+0x24>
 80051f8:	6824      	ldr	r4, [r4, #0]
 80051fa:	2c00      	cmp	r4, #0
 80051fc:	d1f7      	bne.n	80051ee <_fwalk_reent+0xe>
 80051fe:	4638      	mov	r0, r7
 8005200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005204:	89ab      	ldrh	r3, [r5, #12]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d907      	bls.n	800521a <_fwalk_reent+0x3a>
 800520a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800520e:	3301      	adds	r3, #1
 8005210:	d003      	beq.n	800521a <_fwalk_reent+0x3a>
 8005212:	4629      	mov	r1, r5
 8005214:	4630      	mov	r0, r6
 8005216:	47c0      	blx	r8
 8005218:	4307      	orrs	r7, r0
 800521a:	3568      	adds	r5, #104	; 0x68
 800521c:	e7e9      	b.n	80051f2 <_fwalk_reent+0x12>

0800521e <__retarget_lock_init_recursive>:
 800521e:	4770      	bx	lr

08005220 <__retarget_lock_acquire_recursive>:
 8005220:	4770      	bx	lr

08005222 <__retarget_lock_release_recursive>:
 8005222:	4770      	bx	lr

08005224 <sbrk_aligned>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	4e0e      	ldr	r6, [pc, #56]	; (8005260 <sbrk_aligned+0x3c>)
 8005228:	460c      	mov	r4, r1
 800522a:	6831      	ldr	r1, [r6, #0]
 800522c:	4605      	mov	r5, r0
 800522e:	b911      	cbnz	r1, 8005236 <sbrk_aligned+0x12>
 8005230:	f000 fb7a 	bl	8005928 <_sbrk_r>
 8005234:	6030      	str	r0, [r6, #0]
 8005236:	4621      	mov	r1, r4
 8005238:	4628      	mov	r0, r5
 800523a:	f000 fb75 	bl	8005928 <_sbrk_r>
 800523e:	1c43      	adds	r3, r0, #1
 8005240:	d00a      	beq.n	8005258 <sbrk_aligned+0x34>
 8005242:	1cc4      	adds	r4, r0, #3
 8005244:	f024 0403 	bic.w	r4, r4, #3
 8005248:	42a0      	cmp	r0, r4
 800524a:	d007      	beq.n	800525c <sbrk_aligned+0x38>
 800524c:	1a21      	subs	r1, r4, r0
 800524e:	4628      	mov	r0, r5
 8005250:	f000 fb6a 	bl	8005928 <_sbrk_r>
 8005254:	3001      	adds	r0, #1
 8005256:	d101      	bne.n	800525c <sbrk_aligned+0x38>
 8005258:	f04f 34ff 	mov.w	r4, #4294967295
 800525c:	4620      	mov	r0, r4
 800525e:	bd70      	pop	{r4, r5, r6, pc}
 8005260:	200008b0 	.word	0x200008b0

08005264 <_malloc_r>:
 8005264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005268:	1ccd      	adds	r5, r1, #3
 800526a:	f025 0503 	bic.w	r5, r5, #3
 800526e:	3508      	adds	r5, #8
 8005270:	2d0c      	cmp	r5, #12
 8005272:	bf38      	it	cc
 8005274:	250c      	movcc	r5, #12
 8005276:	2d00      	cmp	r5, #0
 8005278:	4607      	mov	r7, r0
 800527a:	db01      	blt.n	8005280 <_malloc_r+0x1c>
 800527c:	42a9      	cmp	r1, r5
 800527e:	d905      	bls.n	800528c <_malloc_r+0x28>
 8005280:	230c      	movs	r3, #12
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	2600      	movs	r6, #0
 8005286:	4630      	mov	r0, r6
 8005288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800528c:	4e2e      	ldr	r6, [pc, #184]	; (8005348 <_malloc_r+0xe4>)
 800528e:	f000 fdbb 	bl	8005e08 <__malloc_lock>
 8005292:	6833      	ldr	r3, [r6, #0]
 8005294:	461c      	mov	r4, r3
 8005296:	bb34      	cbnz	r4, 80052e6 <_malloc_r+0x82>
 8005298:	4629      	mov	r1, r5
 800529a:	4638      	mov	r0, r7
 800529c:	f7ff ffc2 	bl	8005224 <sbrk_aligned>
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	4604      	mov	r4, r0
 80052a4:	d14d      	bne.n	8005342 <_malloc_r+0xde>
 80052a6:	6834      	ldr	r4, [r6, #0]
 80052a8:	4626      	mov	r6, r4
 80052aa:	2e00      	cmp	r6, #0
 80052ac:	d140      	bne.n	8005330 <_malloc_r+0xcc>
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	4631      	mov	r1, r6
 80052b2:	4638      	mov	r0, r7
 80052b4:	eb04 0803 	add.w	r8, r4, r3
 80052b8:	f000 fb36 	bl	8005928 <_sbrk_r>
 80052bc:	4580      	cmp	r8, r0
 80052be:	d13a      	bne.n	8005336 <_malloc_r+0xd2>
 80052c0:	6821      	ldr	r1, [r4, #0]
 80052c2:	3503      	adds	r5, #3
 80052c4:	1a6d      	subs	r5, r5, r1
 80052c6:	f025 0503 	bic.w	r5, r5, #3
 80052ca:	3508      	adds	r5, #8
 80052cc:	2d0c      	cmp	r5, #12
 80052ce:	bf38      	it	cc
 80052d0:	250c      	movcc	r5, #12
 80052d2:	4629      	mov	r1, r5
 80052d4:	4638      	mov	r0, r7
 80052d6:	f7ff ffa5 	bl	8005224 <sbrk_aligned>
 80052da:	3001      	adds	r0, #1
 80052dc:	d02b      	beq.n	8005336 <_malloc_r+0xd2>
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	442b      	add	r3, r5
 80052e2:	6023      	str	r3, [r4, #0]
 80052e4:	e00e      	b.n	8005304 <_malloc_r+0xa0>
 80052e6:	6822      	ldr	r2, [r4, #0]
 80052e8:	1b52      	subs	r2, r2, r5
 80052ea:	d41e      	bmi.n	800532a <_malloc_r+0xc6>
 80052ec:	2a0b      	cmp	r2, #11
 80052ee:	d916      	bls.n	800531e <_malloc_r+0xba>
 80052f0:	1961      	adds	r1, r4, r5
 80052f2:	42a3      	cmp	r3, r4
 80052f4:	6025      	str	r5, [r4, #0]
 80052f6:	bf18      	it	ne
 80052f8:	6059      	strne	r1, [r3, #4]
 80052fa:	6863      	ldr	r3, [r4, #4]
 80052fc:	bf08      	it	eq
 80052fe:	6031      	streq	r1, [r6, #0]
 8005300:	5162      	str	r2, [r4, r5]
 8005302:	604b      	str	r3, [r1, #4]
 8005304:	4638      	mov	r0, r7
 8005306:	f104 060b 	add.w	r6, r4, #11
 800530a:	f000 fd83 	bl	8005e14 <__malloc_unlock>
 800530e:	f026 0607 	bic.w	r6, r6, #7
 8005312:	1d23      	adds	r3, r4, #4
 8005314:	1af2      	subs	r2, r6, r3
 8005316:	d0b6      	beq.n	8005286 <_malloc_r+0x22>
 8005318:	1b9b      	subs	r3, r3, r6
 800531a:	50a3      	str	r3, [r4, r2]
 800531c:	e7b3      	b.n	8005286 <_malloc_r+0x22>
 800531e:	6862      	ldr	r2, [r4, #4]
 8005320:	42a3      	cmp	r3, r4
 8005322:	bf0c      	ite	eq
 8005324:	6032      	streq	r2, [r6, #0]
 8005326:	605a      	strne	r2, [r3, #4]
 8005328:	e7ec      	b.n	8005304 <_malloc_r+0xa0>
 800532a:	4623      	mov	r3, r4
 800532c:	6864      	ldr	r4, [r4, #4]
 800532e:	e7b2      	b.n	8005296 <_malloc_r+0x32>
 8005330:	4634      	mov	r4, r6
 8005332:	6876      	ldr	r6, [r6, #4]
 8005334:	e7b9      	b.n	80052aa <_malloc_r+0x46>
 8005336:	230c      	movs	r3, #12
 8005338:	603b      	str	r3, [r7, #0]
 800533a:	4638      	mov	r0, r7
 800533c:	f000 fd6a 	bl	8005e14 <__malloc_unlock>
 8005340:	e7a1      	b.n	8005286 <_malloc_r+0x22>
 8005342:	6025      	str	r5, [r4, #0]
 8005344:	e7de      	b.n	8005304 <_malloc_r+0xa0>
 8005346:	bf00      	nop
 8005348:	200008ac 	.word	0x200008ac

0800534c <__sfputc_r>:
 800534c:	6893      	ldr	r3, [r2, #8]
 800534e:	3b01      	subs	r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	b410      	push	{r4}
 8005354:	6093      	str	r3, [r2, #8]
 8005356:	da08      	bge.n	800536a <__sfputc_r+0x1e>
 8005358:	6994      	ldr	r4, [r2, #24]
 800535a:	42a3      	cmp	r3, r4
 800535c:	db01      	blt.n	8005362 <__sfputc_r+0x16>
 800535e:	290a      	cmp	r1, #10
 8005360:	d103      	bne.n	800536a <__sfputc_r+0x1e>
 8005362:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005366:	f000 bb33 	b.w	80059d0 <__swbuf_r>
 800536a:	6813      	ldr	r3, [r2, #0]
 800536c:	1c58      	adds	r0, r3, #1
 800536e:	6010      	str	r0, [r2, #0]
 8005370:	7019      	strb	r1, [r3, #0]
 8005372:	4608      	mov	r0, r1
 8005374:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005378:	4770      	bx	lr

0800537a <__sfputs_r>:
 800537a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537c:	4606      	mov	r6, r0
 800537e:	460f      	mov	r7, r1
 8005380:	4614      	mov	r4, r2
 8005382:	18d5      	adds	r5, r2, r3
 8005384:	42ac      	cmp	r4, r5
 8005386:	d101      	bne.n	800538c <__sfputs_r+0x12>
 8005388:	2000      	movs	r0, #0
 800538a:	e007      	b.n	800539c <__sfputs_r+0x22>
 800538c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005390:	463a      	mov	r2, r7
 8005392:	4630      	mov	r0, r6
 8005394:	f7ff ffda 	bl	800534c <__sfputc_r>
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	d1f3      	bne.n	8005384 <__sfputs_r+0xa>
 800539c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053a0 <_vfiprintf_r>:
 80053a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	460d      	mov	r5, r1
 80053a6:	b09d      	sub	sp, #116	; 0x74
 80053a8:	4614      	mov	r4, r2
 80053aa:	4698      	mov	r8, r3
 80053ac:	4606      	mov	r6, r0
 80053ae:	b118      	cbz	r0, 80053b8 <_vfiprintf_r+0x18>
 80053b0:	6983      	ldr	r3, [r0, #24]
 80053b2:	b90b      	cbnz	r3, 80053b8 <_vfiprintf_r+0x18>
 80053b4:	f7ff fe96 	bl	80050e4 <__sinit>
 80053b8:	4b89      	ldr	r3, [pc, #548]	; (80055e0 <_vfiprintf_r+0x240>)
 80053ba:	429d      	cmp	r5, r3
 80053bc:	d11b      	bne.n	80053f6 <_vfiprintf_r+0x56>
 80053be:	6875      	ldr	r5, [r6, #4]
 80053c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053c2:	07d9      	lsls	r1, r3, #31
 80053c4:	d405      	bmi.n	80053d2 <_vfiprintf_r+0x32>
 80053c6:	89ab      	ldrh	r3, [r5, #12]
 80053c8:	059a      	lsls	r2, r3, #22
 80053ca:	d402      	bmi.n	80053d2 <_vfiprintf_r+0x32>
 80053cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053ce:	f7ff ff27 	bl	8005220 <__retarget_lock_acquire_recursive>
 80053d2:	89ab      	ldrh	r3, [r5, #12]
 80053d4:	071b      	lsls	r3, r3, #28
 80053d6:	d501      	bpl.n	80053dc <_vfiprintf_r+0x3c>
 80053d8:	692b      	ldr	r3, [r5, #16]
 80053da:	b9eb      	cbnz	r3, 8005418 <_vfiprintf_r+0x78>
 80053dc:	4629      	mov	r1, r5
 80053de:	4630      	mov	r0, r6
 80053e0:	f000 fb5a 	bl	8005a98 <__swsetup_r>
 80053e4:	b1c0      	cbz	r0, 8005418 <_vfiprintf_r+0x78>
 80053e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053e8:	07dc      	lsls	r4, r3, #31
 80053ea:	d50e      	bpl.n	800540a <_vfiprintf_r+0x6a>
 80053ec:	f04f 30ff 	mov.w	r0, #4294967295
 80053f0:	b01d      	add	sp, #116	; 0x74
 80053f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f6:	4b7b      	ldr	r3, [pc, #492]	; (80055e4 <_vfiprintf_r+0x244>)
 80053f8:	429d      	cmp	r5, r3
 80053fa:	d101      	bne.n	8005400 <_vfiprintf_r+0x60>
 80053fc:	68b5      	ldr	r5, [r6, #8]
 80053fe:	e7df      	b.n	80053c0 <_vfiprintf_r+0x20>
 8005400:	4b79      	ldr	r3, [pc, #484]	; (80055e8 <_vfiprintf_r+0x248>)
 8005402:	429d      	cmp	r5, r3
 8005404:	bf08      	it	eq
 8005406:	68f5      	ldreq	r5, [r6, #12]
 8005408:	e7da      	b.n	80053c0 <_vfiprintf_r+0x20>
 800540a:	89ab      	ldrh	r3, [r5, #12]
 800540c:	0598      	lsls	r0, r3, #22
 800540e:	d4ed      	bmi.n	80053ec <_vfiprintf_r+0x4c>
 8005410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005412:	f7ff ff06 	bl	8005222 <__retarget_lock_release_recursive>
 8005416:	e7e9      	b.n	80053ec <_vfiprintf_r+0x4c>
 8005418:	2300      	movs	r3, #0
 800541a:	9309      	str	r3, [sp, #36]	; 0x24
 800541c:	2320      	movs	r3, #32
 800541e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005422:	f8cd 800c 	str.w	r8, [sp, #12]
 8005426:	2330      	movs	r3, #48	; 0x30
 8005428:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80055ec <_vfiprintf_r+0x24c>
 800542c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005430:	f04f 0901 	mov.w	r9, #1
 8005434:	4623      	mov	r3, r4
 8005436:	469a      	mov	sl, r3
 8005438:	f813 2b01 	ldrb.w	r2, [r3], #1
 800543c:	b10a      	cbz	r2, 8005442 <_vfiprintf_r+0xa2>
 800543e:	2a25      	cmp	r2, #37	; 0x25
 8005440:	d1f9      	bne.n	8005436 <_vfiprintf_r+0x96>
 8005442:	ebba 0b04 	subs.w	fp, sl, r4
 8005446:	d00b      	beq.n	8005460 <_vfiprintf_r+0xc0>
 8005448:	465b      	mov	r3, fp
 800544a:	4622      	mov	r2, r4
 800544c:	4629      	mov	r1, r5
 800544e:	4630      	mov	r0, r6
 8005450:	f7ff ff93 	bl	800537a <__sfputs_r>
 8005454:	3001      	adds	r0, #1
 8005456:	f000 80aa 	beq.w	80055ae <_vfiprintf_r+0x20e>
 800545a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800545c:	445a      	add	r2, fp
 800545e:	9209      	str	r2, [sp, #36]	; 0x24
 8005460:	f89a 3000 	ldrb.w	r3, [sl]
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 80a2 	beq.w	80055ae <_vfiprintf_r+0x20e>
 800546a:	2300      	movs	r3, #0
 800546c:	f04f 32ff 	mov.w	r2, #4294967295
 8005470:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005474:	f10a 0a01 	add.w	sl, sl, #1
 8005478:	9304      	str	r3, [sp, #16]
 800547a:	9307      	str	r3, [sp, #28]
 800547c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005480:	931a      	str	r3, [sp, #104]	; 0x68
 8005482:	4654      	mov	r4, sl
 8005484:	2205      	movs	r2, #5
 8005486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800548a:	4858      	ldr	r0, [pc, #352]	; (80055ec <_vfiprintf_r+0x24c>)
 800548c:	f7fa feb0 	bl	80001f0 <memchr>
 8005490:	9a04      	ldr	r2, [sp, #16]
 8005492:	b9d8      	cbnz	r0, 80054cc <_vfiprintf_r+0x12c>
 8005494:	06d1      	lsls	r1, r2, #27
 8005496:	bf44      	itt	mi
 8005498:	2320      	movmi	r3, #32
 800549a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800549e:	0713      	lsls	r3, r2, #28
 80054a0:	bf44      	itt	mi
 80054a2:	232b      	movmi	r3, #43	; 0x2b
 80054a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054a8:	f89a 3000 	ldrb.w	r3, [sl]
 80054ac:	2b2a      	cmp	r3, #42	; 0x2a
 80054ae:	d015      	beq.n	80054dc <_vfiprintf_r+0x13c>
 80054b0:	9a07      	ldr	r2, [sp, #28]
 80054b2:	4654      	mov	r4, sl
 80054b4:	2000      	movs	r0, #0
 80054b6:	f04f 0c0a 	mov.w	ip, #10
 80054ba:	4621      	mov	r1, r4
 80054bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054c0:	3b30      	subs	r3, #48	; 0x30
 80054c2:	2b09      	cmp	r3, #9
 80054c4:	d94e      	bls.n	8005564 <_vfiprintf_r+0x1c4>
 80054c6:	b1b0      	cbz	r0, 80054f6 <_vfiprintf_r+0x156>
 80054c8:	9207      	str	r2, [sp, #28]
 80054ca:	e014      	b.n	80054f6 <_vfiprintf_r+0x156>
 80054cc:	eba0 0308 	sub.w	r3, r0, r8
 80054d0:	fa09 f303 	lsl.w	r3, r9, r3
 80054d4:	4313      	orrs	r3, r2
 80054d6:	9304      	str	r3, [sp, #16]
 80054d8:	46a2      	mov	sl, r4
 80054da:	e7d2      	b.n	8005482 <_vfiprintf_r+0xe2>
 80054dc:	9b03      	ldr	r3, [sp, #12]
 80054de:	1d19      	adds	r1, r3, #4
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	9103      	str	r1, [sp, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bfbb      	ittet	lt
 80054e8:	425b      	neglt	r3, r3
 80054ea:	f042 0202 	orrlt.w	r2, r2, #2
 80054ee:	9307      	strge	r3, [sp, #28]
 80054f0:	9307      	strlt	r3, [sp, #28]
 80054f2:	bfb8      	it	lt
 80054f4:	9204      	strlt	r2, [sp, #16]
 80054f6:	7823      	ldrb	r3, [r4, #0]
 80054f8:	2b2e      	cmp	r3, #46	; 0x2e
 80054fa:	d10c      	bne.n	8005516 <_vfiprintf_r+0x176>
 80054fc:	7863      	ldrb	r3, [r4, #1]
 80054fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005500:	d135      	bne.n	800556e <_vfiprintf_r+0x1ce>
 8005502:	9b03      	ldr	r3, [sp, #12]
 8005504:	1d1a      	adds	r2, r3, #4
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	9203      	str	r2, [sp, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	bfb8      	it	lt
 800550e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005512:	3402      	adds	r4, #2
 8005514:	9305      	str	r3, [sp, #20]
 8005516:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80055fc <_vfiprintf_r+0x25c>
 800551a:	7821      	ldrb	r1, [r4, #0]
 800551c:	2203      	movs	r2, #3
 800551e:	4650      	mov	r0, sl
 8005520:	f7fa fe66 	bl	80001f0 <memchr>
 8005524:	b140      	cbz	r0, 8005538 <_vfiprintf_r+0x198>
 8005526:	2340      	movs	r3, #64	; 0x40
 8005528:	eba0 000a 	sub.w	r0, r0, sl
 800552c:	fa03 f000 	lsl.w	r0, r3, r0
 8005530:	9b04      	ldr	r3, [sp, #16]
 8005532:	4303      	orrs	r3, r0
 8005534:	3401      	adds	r4, #1
 8005536:	9304      	str	r3, [sp, #16]
 8005538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800553c:	482c      	ldr	r0, [pc, #176]	; (80055f0 <_vfiprintf_r+0x250>)
 800553e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005542:	2206      	movs	r2, #6
 8005544:	f7fa fe54 	bl	80001f0 <memchr>
 8005548:	2800      	cmp	r0, #0
 800554a:	d03f      	beq.n	80055cc <_vfiprintf_r+0x22c>
 800554c:	4b29      	ldr	r3, [pc, #164]	; (80055f4 <_vfiprintf_r+0x254>)
 800554e:	bb1b      	cbnz	r3, 8005598 <_vfiprintf_r+0x1f8>
 8005550:	9b03      	ldr	r3, [sp, #12]
 8005552:	3307      	adds	r3, #7
 8005554:	f023 0307 	bic.w	r3, r3, #7
 8005558:	3308      	adds	r3, #8
 800555a:	9303      	str	r3, [sp, #12]
 800555c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800555e:	443b      	add	r3, r7
 8005560:	9309      	str	r3, [sp, #36]	; 0x24
 8005562:	e767      	b.n	8005434 <_vfiprintf_r+0x94>
 8005564:	fb0c 3202 	mla	r2, ip, r2, r3
 8005568:	460c      	mov	r4, r1
 800556a:	2001      	movs	r0, #1
 800556c:	e7a5      	b.n	80054ba <_vfiprintf_r+0x11a>
 800556e:	2300      	movs	r3, #0
 8005570:	3401      	adds	r4, #1
 8005572:	9305      	str	r3, [sp, #20]
 8005574:	4619      	mov	r1, r3
 8005576:	f04f 0c0a 	mov.w	ip, #10
 800557a:	4620      	mov	r0, r4
 800557c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005580:	3a30      	subs	r2, #48	; 0x30
 8005582:	2a09      	cmp	r2, #9
 8005584:	d903      	bls.n	800558e <_vfiprintf_r+0x1ee>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0c5      	beq.n	8005516 <_vfiprintf_r+0x176>
 800558a:	9105      	str	r1, [sp, #20]
 800558c:	e7c3      	b.n	8005516 <_vfiprintf_r+0x176>
 800558e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005592:	4604      	mov	r4, r0
 8005594:	2301      	movs	r3, #1
 8005596:	e7f0      	b.n	800557a <_vfiprintf_r+0x1da>
 8005598:	ab03      	add	r3, sp, #12
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	462a      	mov	r2, r5
 800559e:	4b16      	ldr	r3, [pc, #88]	; (80055f8 <_vfiprintf_r+0x258>)
 80055a0:	a904      	add	r1, sp, #16
 80055a2:	4630      	mov	r0, r6
 80055a4:	f3af 8000 	nop.w
 80055a8:	4607      	mov	r7, r0
 80055aa:	1c78      	adds	r0, r7, #1
 80055ac:	d1d6      	bne.n	800555c <_vfiprintf_r+0x1bc>
 80055ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055b0:	07d9      	lsls	r1, r3, #31
 80055b2:	d405      	bmi.n	80055c0 <_vfiprintf_r+0x220>
 80055b4:	89ab      	ldrh	r3, [r5, #12]
 80055b6:	059a      	lsls	r2, r3, #22
 80055b8:	d402      	bmi.n	80055c0 <_vfiprintf_r+0x220>
 80055ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055bc:	f7ff fe31 	bl	8005222 <__retarget_lock_release_recursive>
 80055c0:	89ab      	ldrh	r3, [r5, #12]
 80055c2:	065b      	lsls	r3, r3, #25
 80055c4:	f53f af12 	bmi.w	80053ec <_vfiprintf_r+0x4c>
 80055c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055ca:	e711      	b.n	80053f0 <_vfiprintf_r+0x50>
 80055cc:	ab03      	add	r3, sp, #12
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	462a      	mov	r2, r5
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <_vfiprintf_r+0x258>)
 80055d4:	a904      	add	r1, sp, #16
 80055d6:	4630      	mov	r0, r6
 80055d8:	f000 f880 	bl	80056dc <_printf_i>
 80055dc:	e7e4      	b.n	80055a8 <_vfiprintf_r+0x208>
 80055de:	bf00      	nop
 80055e0:	08005f98 	.word	0x08005f98
 80055e4:	08005fb8 	.word	0x08005fb8
 80055e8:	08005f78 	.word	0x08005f78
 80055ec:	08005fd8 	.word	0x08005fd8
 80055f0:	08005fe2 	.word	0x08005fe2
 80055f4:	00000000 	.word	0x00000000
 80055f8:	0800537b 	.word	0x0800537b
 80055fc:	08005fde 	.word	0x08005fde

08005600 <_printf_common>:
 8005600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005604:	4616      	mov	r6, r2
 8005606:	4699      	mov	r9, r3
 8005608:	688a      	ldr	r2, [r1, #8]
 800560a:	690b      	ldr	r3, [r1, #16]
 800560c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005610:	4293      	cmp	r3, r2
 8005612:	bfb8      	it	lt
 8005614:	4613      	movlt	r3, r2
 8005616:	6033      	str	r3, [r6, #0]
 8005618:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800561c:	4607      	mov	r7, r0
 800561e:	460c      	mov	r4, r1
 8005620:	b10a      	cbz	r2, 8005626 <_printf_common+0x26>
 8005622:	3301      	adds	r3, #1
 8005624:	6033      	str	r3, [r6, #0]
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	0699      	lsls	r1, r3, #26
 800562a:	bf42      	ittt	mi
 800562c:	6833      	ldrmi	r3, [r6, #0]
 800562e:	3302      	addmi	r3, #2
 8005630:	6033      	strmi	r3, [r6, #0]
 8005632:	6825      	ldr	r5, [r4, #0]
 8005634:	f015 0506 	ands.w	r5, r5, #6
 8005638:	d106      	bne.n	8005648 <_printf_common+0x48>
 800563a:	f104 0a19 	add.w	sl, r4, #25
 800563e:	68e3      	ldr	r3, [r4, #12]
 8005640:	6832      	ldr	r2, [r6, #0]
 8005642:	1a9b      	subs	r3, r3, r2
 8005644:	42ab      	cmp	r3, r5
 8005646:	dc26      	bgt.n	8005696 <_printf_common+0x96>
 8005648:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800564c:	1e13      	subs	r3, r2, #0
 800564e:	6822      	ldr	r2, [r4, #0]
 8005650:	bf18      	it	ne
 8005652:	2301      	movne	r3, #1
 8005654:	0692      	lsls	r2, r2, #26
 8005656:	d42b      	bmi.n	80056b0 <_printf_common+0xb0>
 8005658:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800565c:	4649      	mov	r1, r9
 800565e:	4638      	mov	r0, r7
 8005660:	47c0      	blx	r8
 8005662:	3001      	adds	r0, #1
 8005664:	d01e      	beq.n	80056a4 <_printf_common+0xa4>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	68e5      	ldr	r5, [r4, #12]
 800566a:	6832      	ldr	r2, [r6, #0]
 800566c:	f003 0306 	and.w	r3, r3, #6
 8005670:	2b04      	cmp	r3, #4
 8005672:	bf08      	it	eq
 8005674:	1aad      	subeq	r5, r5, r2
 8005676:	68a3      	ldr	r3, [r4, #8]
 8005678:	6922      	ldr	r2, [r4, #16]
 800567a:	bf0c      	ite	eq
 800567c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005680:	2500      	movne	r5, #0
 8005682:	4293      	cmp	r3, r2
 8005684:	bfc4      	itt	gt
 8005686:	1a9b      	subgt	r3, r3, r2
 8005688:	18ed      	addgt	r5, r5, r3
 800568a:	2600      	movs	r6, #0
 800568c:	341a      	adds	r4, #26
 800568e:	42b5      	cmp	r5, r6
 8005690:	d11a      	bne.n	80056c8 <_printf_common+0xc8>
 8005692:	2000      	movs	r0, #0
 8005694:	e008      	b.n	80056a8 <_printf_common+0xa8>
 8005696:	2301      	movs	r3, #1
 8005698:	4652      	mov	r2, sl
 800569a:	4649      	mov	r1, r9
 800569c:	4638      	mov	r0, r7
 800569e:	47c0      	blx	r8
 80056a0:	3001      	adds	r0, #1
 80056a2:	d103      	bne.n	80056ac <_printf_common+0xac>
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295
 80056a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ac:	3501      	adds	r5, #1
 80056ae:	e7c6      	b.n	800563e <_printf_common+0x3e>
 80056b0:	18e1      	adds	r1, r4, r3
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	2030      	movs	r0, #48	; 0x30
 80056b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056ba:	4422      	add	r2, r4
 80056bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056c4:	3302      	adds	r3, #2
 80056c6:	e7c7      	b.n	8005658 <_printf_common+0x58>
 80056c8:	2301      	movs	r3, #1
 80056ca:	4622      	mov	r2, r4
 80056cc:	4649      	mov	r1, r9
 80056ce:	4638      	mov	r0, r7
 80056d0:	47c0      	blx	r8
 80056d2:	3001      	adds	r0, #1
 80056d4:	d0e6      	beq.n	80056a4 <_printf_common+0xa4>
 80056d6:	3601      	adds	r6, #1
 80056d8:	e7d9      	b.n	800568e <_printf_common+0x8e>
	...

080056dc <_printf_i>:
 80056dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056e0:	7e0f      	ldrb	r7, [r1, #24]
 80056e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056e4:	2f78      	cmp	r7, #120	; 0x78
 80056e6:	4691      	mov	r9, r2
 80056e8:	4680      	mov	r8, r0
 80056ea:	460c      	mov	r4, r1
 80056ec:	469a      	mov	sl, r3
 80056ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056f2:	d807      	bhi.n	8005704 <_printf_i+0x28>
 80056f4:	2f62      	cmp	r7, #98	; 0x62
 80056f6:	d80a      	bhi.n	800570e <_printf_i+0x32>
 80056f8:	2f00      	cmp	r7, #0
 80056fa:	f000 80d8 	beq.w	80058ae <_printf_i+0x1d2>
 80056fe:	2f58      	cmp	r7, #88	; 0x58
 8005700:	f000 80a3 	beq.w	800584a <_printf_i+0x16e>
 8005704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005708:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800570c:	e03a      	b.n	8005784 <_printf_i+0xa8>
 800570e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005712:	2b15      	cmp	r3, #21
 8005714:	d8f6      	bhi.n	8005704 <_printf_i+0x28>
 8005716:	a101      	add	r1, pc, #4	; (adr r1, 800571c <_printf_i+0x40>)
 8005718:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800571c:	08005775 	.word	0x08005775
 8005720:	08005789 	.word	0x08005789
 8005724:	08005705 	.word	0x08005705
 8005728:	08005705 	.word	0x08005705
 800572c:	08005705 	.word	0x08005705
 8005730:	08005705 	.word	0x08005705
 8005734:	08005789 	.word	0x08005789
 8005738:	08005705 	.word	0x08005705
 800573c:	08005705 	.word	0x08005705
 8005740:	08005705 	.word	0x08005705
 8005744:	08005705 	.word	0x08005705
 8005748:	08005895 	.word	0x08005895
 800574c:	080057b9 	.word	0x080057b9
 8005750:	08005877 	.word	0x08005877
 8005754:	08005705 	.word	0x08005705
 8005758:	08005705 	.word	0x08005705
 800575c:	080058b7 	.word	0x080058b7
 8005760:	08005705 	.word	0x08005705
 8005764:	080057b9 	.word	0x080057b9
 8005768:	08005705 	.word	0x08005705
 800576c:	08005705 	.word	0x08005705
 8005770:	0800587f 	.word	0x0800587f
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	1d1a      	adds	r2, r3, #4
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	602a      	str	r2, [r5, #0]
 800577c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005784:	2301      	movs	r3, #1
 8005786:	e0a3      	b.n	80058d0 <_printf_i+0x1f4>
 8005788:	6820      	ldr	r0, [r4, #0]
 800578a:	6829      	ldr	r1, [r5, #0]
 800578c:	0606      	lsls	r6, r0, #24
 800578e:	f101 0304 	add.w	r3, r1, #4
 8005792:	d50a      	bpl.n	80057aa <_printf_i+0xce>
 8005794:	680e      	ldr	r6, [r1, #0]
 8005796:	602b      	str	r3, [r5, #0]
 8005798:	2e00      	cmp	r6, #0
 800579a:	da03      	bge.n	80057a4 <_printf_i+0xc8>
 800579c:	232d      	movs	r3, #45	; 0x2d
 800579e:	4276      	negs	r6, r6
 80057a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057a4:	485e      	ldr	r0, [pc, #376]	; (8005920 <_printf_i+0x244>)
 80057a6:	230a      	movs	r3, #10
 80057a8:	e019      	b.n	80057de <_printf_i+0x102>
 80057aa:	680e      	ldr	r6, [r1, #0]
 80057ac:	602b      	str	r3, [r5, #0]
 80057ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057b2:	bf18      	it	ne
 80057b4:	b236      	sxthne	r6, r6
 80057b6:	e7ef      	b.n	8005798 <_printf_i+0xbc>
 80057b8:	682b      	ldr	r3, [r5, #0]
 80057ba:	6820      	ldr	r0, [r4, #0]
 80057bc:	1d19      	adds	r1, r3, #4
 80057be:	6029      	str	r1, [r5, #0]
 80057c0:	0601      	lsls	r1, r0, #24
 80057c2:	d501      	bpl.n	80057c8 <_printf_i+0xec>
 80057c4:	681e      	ldr	r6, [r3, #0]
 80057c6:	e002      	b.n	80057ce <_printf_i+0xf2>
 80057c8:	0646      	lsls	r6, r0, #25
 80057ca:	d5fb      	bpl.n	80057c4 <_printf_i+0xe8>
 80057cc:	881e      	ldrh	r6, [r3, #0]
 80057ce:	4854      	ldr	r0, [pc, #336]	; (8005920 <_printf_i+0x244>)
 80057d0:	2f6f      	cmp	r7, #111	; 0x6f
 80057d2:	bf0c      	ite	eq
 80057d4:	2308      	moveq	r3, #8
 80057d6:	230a      	movne	r3, #10
 80057d8:	2100      	movs	r1, #0
 80057da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057de:	6865      	ldr	r5, [r4, #4]
 80057e0:	60a5      	str	r5, [r4, #8]
 80057e2:	2d00      	cmp	r5, #0
 80057e4:	bfa2      	ittt	ge
 80057e6:	6821      	ldrge	r1, [r4, #0]
 80057e8:	f021 0104 	bicge.w	r1, r1, #4
 80057ec:	6021      	strge	r1, [r4, #0]
 80057ee:	b90e      	cbnz	r6, 80057f4 <_printf_i+0x118>
 80057f0:	2d00      	cmp	r5, #0
 80057f2:	d04d      	beq.n	8005890 <_printf_i+0x1b4>
 80057f4:	4615      	mov	r5, r2
 80057f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80057fa:	fb03 6711 	mls	r7, r3, r1, r6
 80057fe:	5dc7      	ldrb	r7, [r0, r7]
 8005800:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005804:	4637      	mov	r7, r6
 8005806:	42bb      	cmp	r3, r7
 8005808:	460e      	mov	r6, r1
 800580a:	d9f4      	bls.n	80057f6 <_printf_i+0x11a>
 800580c:	2b08      	cmp	r3, #8
 800580e:	d10b      	bne.n	8005828 <_printf_i+0x14c>
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	07de      	lsls	r6, r3, #31
 8005814:	d508      	bpl.n	8005828 <_printf_i+0x14c>
 8005816:	6923      	ldr	r3, [r4, #16]
 8005818:	6861      	ldr	r1, [r4, #4]
 800581a:	4299      	cmp	r1, r3
 800581c:	bfde      	ittt	le
 800581e:	2330      	movle	r3, #48	; 0x30
 8005820:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005824:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005828:	1b52      	subs	r2, r2, r5
 800582a:	6122      	str	r2, [r4, #16]
 800582c:	f8cd a000 	str.w	sl, [sp]
 8005830:	464b      	mov	r3, r9
 8005832:	aa03      	add	r2, sp, #12
 8005834:	4621      	mov	r1, r4
 8005836:	4640      	mov	r0, r8
 8005838:	f7ff fee2 	bl	8005600 <_printf_common>
 800583c:	3001      	adds	r0, #1
 800583e:	d14c      	bne.n	80058da <_printf_i+0x1fe>
 8005840:	f04f 30ff 	mov.w	r0, #4294967295
 8005844:	b004      	add	sp, #16
 8005846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800584a:	4835      	ldr	r0, [pc, #212]	; (8005920 <_printf_i+0x244>)
 800584c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005850:	6829      	ldr	r1, [r5, #0]
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	f851 6b04 	ldr.w	r6, [r1], #4
 8005858:	6029      	str	r1, [r5, #0]
 800585a:	061d      	lsls	r5, r3, #24
 800585c:	d514      	bpl.n	8005888 <_printf_i+0x1ac>
 800585e:	07df      	lsls	r7, r3, #31
 8005860:	bf44      	itt	mi
 8005862:	f043 0320 	orrmi.w	r3, r3, #32
 8005866:	6023      	strmi	r3, [r4, #0]
 8005868:	b91e      	cbnz	r6, 8005872 <_printf_i+0x196>
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	f023 0320 	bic.w	r3, r3, #32
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	2310      	movs	r3, #16
 8005874:	e7b0      	b.n	80057d8 <_printf_i+0xfc>
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	f043 0320 	orr.w	r3, r3, #32
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	2378      	movs	r3, #120	; 0x78
 8005880:	4828      	ldr	r0, [pc, #160]	; (8005924 <_printf_i+0x248>)
 8005882:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005886:	e7e3      	b.n	8005850 <_printf_i+0x174>
 8005888:	0659      	lsls	r1, r3, #25
 800588a:	bf48      	it	mi
 800588c:	b2b6      	uxthmi	r6, r6
 800588e:	e7e6      	b.n	800585e <_printf_i+0x182>
 8005890:	4615      	mov	r5, r2
 8005892:	e7bb      	b.n	800580c <_printf_i+0x130>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	6826      	ldr	r6, [r4, #0]
 8005898:	6961      	ldr	r1, [r4, #20]
 800589a:	1d18      	adds	r0, r3, #4
 800589c:	6028      	str	r0, [r5, #0]
 800589e:	0635      	lsls	r5, r6, #24
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	d501      	bpl.n	80058a8 <_printf_i+0x1cc>
 80058a4:	6019      	str	r1, [r3, #0]
 80058a6:	e002      	b.n	80058ae <_printf_i+0x1d2>
 80058a8:	0670      	lsls	r0, r6, #25
 80058aa:	d5fb      	bpl.n	80058a4 <_printf_i+0x1c8>
 80058ac:	8019      	strh	r1, [r3, #0]
 80058ae:	2300      	movs	r3, #0
 80058b0:	6123      	str	r3, [r4, #16]
 80058b2:	4615      	mov	r5, r2
 80058b4:	e7ba      	b.n	800582c <_printf_i+0x150>
 80058b6:	682b      	ldr	r3, [r5, #0]
 80058b8:	1d1a      	adds	r2, r3, #4
 80058ba:	602a      	str	r2, [r5, #0]
 80058bc:	681d      	ldr	r5, [r3, #0]
 80058be:	6862      	ldr	r2, [r4, #4]
 80058c0:	2100      	movs	r1, #0
 80058c2:	4628      	mov	r0, r5
 80058c4:	f7fa fc94 	bl	80001f0 <memchr>
 80058c8:	b108      	cbz	r0, 80058ce <_printf_i+0x1f2>
 80058ca:	1b40      	subs	r0, r0, r5
 80058cc:	6060      	str	r0, [r4, #4]
 80058ce:	6863      	ldr	r3, [r4, #4]
 80058d0:	6123      	str	r3, [r4, #16]
 80058d2:	2300      	movs	r3, #0
 80058d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058d8:	e7a8      	b.n	800582c <_printf_i+0x150>
 80058da:	6923      	ldr	r3, [r4, #16]
 80058dc:	462a      	mov	r2, r5
 80058de:	4649      	mov	r1, r9
 80058e0:	4640      	mov	r0, r8
 80058e2:	47d0      	blx	sl
 80058e4:	3001      	adds	r0, #1
 80058e6:	d0ab      	beq.n	8005840 <_printf_i+0x164>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	079b      	lsls	r3, r3, #30
 80058ec:	d413      	bmi.n	8005916 <_printf_i+0x23a>
 80058ee:	68e0      	ldr	r0, [r4, #12]
 80058f0:	9b03      	ldr	r3, [sp, #12]
 80058f2:	4298      	cmp	r0, r3
 80058f4:	bfb8      	it	lt
 80058f6:	4618      	movlt	r0, r3
 80058f8:	e7a4      	b.n	8005844 <_printf_i+0x168>
 80058fa:	2301      	movs	r3, #1
 80058fc:	4632      	mov	r2, r6
 80058fe:	4649      	mov	r1, r9
 8005900:	4640      	mov	r0, r8
 8005902:	47d0      	blx	sl
 8005904:	3001      	adds	r0, #1
 8005906:	d09b      	beq.n	8005840 <_printf_i+0x164>
 8005908:	3501      	adds	r5, #1
 800590a:	68e3      	ldr	r3, [r4, #12]
 800590c:	9903      	ldr	r1, [sp, #12]
 800590e:	1a5b      	subs	r3, r3, r1
 8005910:	42ab      	cmp	r3, r5
 8005912:	dcf2      	bgt.n	80058fa <_printf_i+0x21e>
 8005914:	e7eb      	b.n	80058ee <_printf_i+0x212>
 8005916:	2500      	movs	r5, #0
 8005918:	f104 0619 	add.w	r6, r4, #25
 800591c:	e7f5      	b.n	800590a <_printf_i+0x22e>
 800591e:	bf00      	nop
 8005920:	08005fe9 	.word	0x08005fe9
 8005924:	08005ffa 	.word	0x08005ffa

08005928 <_sbrk_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d06      	ldr	r5, [pc, #24]	; (8005944 <_sbrk_r+0x1c>)
 800592c:	2300      	movs	r3, #0
 800592e:	4604      	mov	r4, r0
 8005930:	4608      	mov	r0, r1
 8005932:	602b      	str	r3, [r5, #0]
 8005934:	f7fb fc00 	bl	8001138 <_sbrk>
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d102      	bne.n	8005942 <_sbrk_r+0x1a>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	b103      	cbz	r3, 8005942 <_sbrk_r+0x1a>
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	bd38      	pop	{r3, r4, r5, pc}
 8005944:	200008b4 	.word	0x200008b4

08005948 <__sread>:
 8005948:	b510      	push	{r4, lr}
 800594a:	460c      	mov	r4, r1
 800594c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005950:	f000 fab2 	bl	8005eb8 <_read_r>
 8005954:	2800      	cmp	r0, #0
 8005956:	bfab      	itete	ge
 8005958:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800595a:	89a3      	ldrhlt	r3, [r4, #12]
 800595c:	181b      	addge	r3, r3, r0
 800595e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005962:	bfac      	ite	ge
 8005964:	6563      	strge	r3, [r4, #84]	; 0x54
 8005966:	81a3      	strhlt	r3, [r4, #12]
 8005968:	bd10      	pop	{r4, pc}

0800596a <__swrite>:
 800596a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800596e:	461f      	mov	r7, r3
 8005970:	898b      	ldrh	r3, [r1, #12]
 8005972:	05db      	lsls	r3, r3, #23
 8005974:	4605      	mov	r5, r0
 8005976:	460c      	mov	r4, r1
 8005978:	4616      	mov	r6, r2
 800597a:	d505      	bpl.n	8005988 <__swrite+0x1e>
 800597c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005980:	2302      	movs	r3, #2
 8005982:	2200      	movs	r2, #0
 8005984:	f000 f9c8 	bl	8005d18 <_lseek_r>
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800598e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005992:	81a3      	strh	r3, [r4, #12]
 8005994:	4632      	mov	r2, r6
 8005996:	463b      	mov	r3, r7
 8005998:	4628      	mov	r0, r5
 800599a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800599e:	f000 b869 	b.w	8005a74 <_write_r>

080059a2 <__sseek>:
 80059a2:	b510      	push	{r4, lr}
 80059a4:	460c      	mov	r4, r1
 80059a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059aa:	f000 f9b5 	bl	8005d18 <_lseek_r>
 80059ae:	1c43      	adds	r3, r0, #1
 80059b0:	89a3      	ldrh	r3, [r4, #12]
 80059b2:	bf15      	itete	ne
 80059b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80059b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059be:	81a3      	strheq	r3, [r4, #12]
 80059c0:	bf18      	it	ne
 80059c2:	81a3      	strhne	r3, [r4, #12]
 80059c4:	bd10      	pop	{r4, pc}

080059c6 <__sclose>:
 80059c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ca:	f000 b8d3 	b.w	8005b74 <_close_r>
	...

080059d0 <__swbuf_r>:
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	460e      	mov	r6, r1
 80059d4:	4614      	mov	r4, r2
 80059d6:	4605      	mov	r5, r0
 80059d8:	b118      	cbz	r0, 80059e2 <__swbuf_r+0x12>
 80059da:	6983      	ldr	r3, [r0, #24]
 80059dc:	b90b      	cbnz	r3, 80059e2 <__swbuf_r+0x12>
 80059de:	f7ff fb81 	bl	80050e4 <__sinit>
 80059e2:	4b21      	ldr	r3, [pc, #132]	; (8005a68 <__swbuf_r+0x98>)
 80059e4:	429c      	cmp	r4, r3
 80059e6:	d12b      	bne.n	8005a40 <__swbuf_r+0x70>
 80059e8:	686c      	ldr	r4, [r5, #4]
 80059ea:	69a3      	ldr	r3, [r4, #24]
 80059ec:	60a3      	str	r3, [r4, #8]
 80059ee:	89a3      	ldrh	r3, [r4, #12]
 80059f0:	071a      	lsls	r2, r3, #28
 80059f2:	d52f      	bpl.n	8005a54 <__swbuf_r+0x84>
 80059f4:	6923      	ldr	r3, [r4, #16]
 80059f6:	b36b      	cbz	r3, 8005a54 <__swbuf_r+0x84>
 80059f8:	6923      	ldr	r3, [r4, #16]
 80059fa:	6820      	ldr	r0, [r4, #0]
 80059fc:	1ac0      	subs	r0, r0, r3
 80059fe:	6963      	ldr	r3, [r4, #20]
 8005a00:	b2f6      	uxtb	r6, r6
 8005a02:	4283      	cmp	r3, r0
 8005a04:	4637      	mov	r7, r6
 8005a06:	dc04      	bgt.n	8005a12 <__swbuf_r+0x42>
 8005a08:	4621      	mov	r1, r4
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f000 f948 	bl	8005ca0 <_fflush_r>
 8005a10:	bb30      	cbnz	r0, 8005a60 <__swbuf_r+0x90>
 8005a12:	68a3      	ldr	r3, [r4, #8]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	60a3      	str	r3, [r4, #8]
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	6022      	str	r2, [r4, #0]
 8005a1e:	701e      	strb	r6, [r3, #0]
 8005a20:	6963      	ldr	r3, [r4, #20]
 8005a22:	3001      	adds	r0, #1
 8005a24:	4283      	cmp	r3, r0
 8005a26:	d004      	beq.n	8005a32 <__swbuf_r+0x62>
 8005a28:	89a3      	ldrh	r3, [r4, #12]
 8005a2a:	07db      	lsls	r3, r3, #31
 8005a2c:	d506      	bpl.n	8005a3c <__swbuf_r+0x6c>
 8005a2e:	2e0a      	cmp	r6, #10
 8005a30:	d104      	bne.n	8005a3c <__swbuf_r+0x6c>
 8005a32:	4621      	mov	r1, r4
 8005a34:	4628      	mov	r0, r5
 8005a36:	f000 f933 	bl	8005ca0 <_fflush_r>
 8005a3a:	b988      	cbnz	r0, 8005a60 <__swbuf_r+0x90>
 8005a3c:	4638      	mov	r0, r7
 8005a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a40:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <__swbuf_r+0x9c>)
 8005a42:	429c      	cmp	r4, r3
 8005a44:	d101      	bne.n	8005a4a <__swbuf_r+0x7a>
 8005a46:	68ac      	ldr	r4, [r5, #8]
 8005a48:	e7cf      	b.n	80059ea <__swbuf_r+0x1a>
 8005a4a:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <__swbuf_r+0xa0>)
 8005a4c:	429c      	cmp	r4, r3
 8005a4e:	bf08      	it	eq
 8005a50:	68ec      	ldreq	r4, [r5, #12]
 8005a52:	e7ca      	b.n	80059ea <__swbuf_r+0x1a>
 8005a54:	4621      	mov	r1, r4
 8005a56:	4628      	mov	r0, r5
 8005a58:	f000 f81e 	bl	8005a98 <__swsetup_r>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d0cb      	beq.n	80059f8 <__swbuf_r+0x28>
 8005a60:	f04f 37ff 	mov.w	r7, #4294967295
 8005a64:	e7ea      	b.n	8005a3c <__swbuf_r+0x6c>
 8005a66:	bf00      	nop
 8005a68:	08005f98 	.word	0x08005f98
 8005a6c:	08005fb8 	.word	0x08005fb8
 8005a70:	08005f78 	.word	0x08005f78

08005a74 <_write_r>:
 8005a74:	b538      	push	{r3, r4, r5, lr}
 8005a76:	4d07      	ldr	r5, [pc, #28]	; (8005a94 <_write_r+0x20>)
 8005a78:	4604      	mov	r4, r0
 8005a7a:	4608      	mov	r0, r1
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	2200      	movs	r2, #0
 8005a80:	602a      	str	r2, [r5, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	f7fa fd86 	bl	8000594 <_write>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d102      	bne.n	8005a92 <_write_r+0x1e>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	b103      	cbz	r3, 8005a92 <_write_r+0x1e>
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	bd38      	pop	{r3, r4, r5, pc}
 8005a94:	200008b4 	.word	0x200008b4

08005a98 <__swsetup_r>:
 8005a98:	4b32      	ldr	r3, [pc, #200]	; (8005b64 <__swsetup_r+0xcc>)
 8005a9a:	b570      	push	{r4, r5, r6, lr}
 8005a9c:	681d      	ldr	r5, [r3, #0]
 8005a9e:	4606      	mov	r6, r0
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	b125      	cbz	r5, 8005aae <__swsetup_r+0x16>
 8005aa4:	69ab      	ldr	r3, [r5, #24]
 8005aa6:	b913      	cbnz	r3, 8005aae <__swsetup_r+0x16>
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	f7ff fb1b 	bl	80050e4 <__sinit>
 8005aae:	4b2e      	ldr	r3, [pc, #184]	; (8005b68 <__swsetup_r+0xd0>)
 8005ab0:	429c      	cmp	r4, r3
 8005ab2:	d10f      	bne.n	8005ad4 <__swsetup_r+0x3c>
 8005ab4:	686c      	ldr	r4, [r5, #4]
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005abc:	0719      	lsls	r1, r3, #28
 8005abe:	d42c      	bmi.n	8005b1a <__swsetup_r+0x82>
 8005ac0:	06dd      	lsls	r5, r3, #27
 8005ac2:	d411      	bmi.n	8005ae8 <__swsetup_r+0x50>
 8005ac4:	2309      	movs	r3, #9
 8005ac6:	6033      	str	r3, [r6, #0]
 8005ac8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005acc:	81a3      	strh	r3, [r4, #12]
 8005ace:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad2:	e03e      	b.n	8005b52 <__swsetup_r+0xba>
 8005ad4:	4b25      	ldr	r3, [pc, #148]	; (8005b6c <__swsetup_r+0xd4>)
 8005ad6:	429c      	cmp	r4, r3
 8005ad8:	d101      	bne.n	8005ade <__swsetup_r+0x46>
 8005ada:	68ac      	ldr	r4, [r5, #8]
 8005adc:	e7eb      	b.n	8005ab6 <__swsetup_r+0x1e>
 8005ade:	4b24      	ldr	r3, [pc, #144]	; (8005b70 <__swsetup_r+0xd8>)
 8005ae0:	429c      	cmp	r4, r3
 8005ae2:	bf08      	it	eq
 8005ae4:	68ec      	ldreq	r4, [r5, #12]
 8005ae6:	e7e6      	b.n	8005ab6 <__swsetup_r+0x1e>
 8005ae8:	0758      	lsls	r0, r3, #29
 8005aea:	d512      	bpl.n	8005b12 <__swsetup_r+0x7a>
 8005aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aee:	b141      	cbz	r1, 8005b02 <__swsetup_r+0x6a>
 8005af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005af4:	4299      	cmp	r1, r3
 8005af6:	d002      	beq.n	8005afe <__swsetup_r+0x66>
 8005af8:	4630      	mov	r0, r6
 8005afa:	f000 f991 	bl	8005e20 <_free_r>
 8005afe:	2300      	movs	r3, #0
 8005b00:	6363      	str	r3, [r4, #52]	; 0x34
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b08:	81a3      	strh	r3, [r4, #12]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6063      	str	r3, [r4, #4]
 8005b0e:	6923      	ldr	r3, [r4, #16]
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	89a3      	ldrh	r3, [r4, #12]
 8005b14:	f043 0308 	orr.w	r3, r3, #8
 8005b18:	81a3      	strh	r3, [r4, #12]
 8005b1a:	6923      	ldr	r3, [r4, #16]
 8005b1c:	b94b      	cbnz	r3, 8005b32 <__swsetup_r+0x9a>
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b28:	d003      	beq.n	8005b32 <__swsetup_r+0x9a>
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	f000 f92b 	bl	8005d88 <__smakebuf_r>
 8005b32:	89a0      	ldrh	r0, [r4, #12]
 8005b34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b38:	f010 0301 	ands.w	r3, r0, #1
 8005b3c:	d00a      	beq.n	8005b54 <__swsetup_r+0xbc>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60a3      	str	r3, [r4, #8]
 8005b42:	6963      	ldr	r3, [r4, #20]
 8005b44:	425b      	negs	r3, r3
 8005b46:	61a3      	str	r3, [r4, #24]
 8005b48:	6923      	ldr	r3, [r4, #16]
 8005b4a:	b943      	cbnz	r3, 8005b5e <__swsetup_r+0xc6>
 8005b4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b50:	d1ba      	bne.n	8005ac8 <__swsetup_r+0x30>
 8005b52:	bd70      	pop	{r4, r5, r6, pc}
 8005b54:	0781      	lsls	r1, r0, #30
 8005b56:	bf58      	it	pl
 8005b58:	6963      	ldrpl	r3, [r4, #20]
 8005b5a:	60a3      	str	r3, [r4, #8]
 8005b5c:	e7f4      	b.n	8005b48 <__swsetup_r+0xb0>
 8005b5e:	2000      	movs	r0, #0
 8005b60:	e7f7      	b.n	8005b52 <__swsetup_r+0xba>
 8005b62:	bf00      	nop
 8005b64:	2000000c 	.word	0x2000000c
 8005b68:	08005f98 	.word	0x08005f98
 8005b6c:	08005fb8 	.word	0x08005fb8
 8005b70:	08005f78 	.word	0x08005f78

08005b74 <_close_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4d06      	ldr	r5, [pc, #24]	; (8005b90 <_close_r+0x1c>)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	602b      	str	r3, [r5, #0]
 8005b80:	f7fb faa6 	bl	80010d0 <_close>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d102      	bne.n	8005b8e <_close_r+0x1a>
 8005b88:	682b      	ldr	r3, [r5, #0]
 8005b8a:	b103      	cbz	r3, 8005b8e <_close_r+0x1a>
 8005b8c:	6023      	str	r3, [r4, #0]
 8005b8e:	bd38      	pop	{r3, r4, r5, pc}
 8005b90:	200008b4 	.word	0x200008b4

08005b94 <__sflush_r>:
 8005b94:	898a      	ldrh	r2, [r1, #12]
 8005b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	0710      	lsls	r0, r2, #28
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	d458      	bmi.n	8005c54 <__sflush_r+0xc0>
 8005ba2:	684b      	ldr	r3, [r1, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	dc05      	bgt.n	8005bb4 <__sflush_r+0x20>
 8005ba8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	dc02      	bgt.n	8005bb4 <__sflush_r+0x20>
 8005bae:	2000      	movs	r0, #0
 8005bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bb6:	2e00      	cmp	r6, #0
 8005bb8:	d0f9      	beq.n	8005bae <__sflush_r+0x1a>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bc0:	682f      	ldr	r7, [r5, #0]
 8005bc2:	602b      	str	r3, [r5, #0]
 8005bc4:	d032      	beq.n	8005c2c <__sflush_r+0x98>
 8005bc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	075a      	lsls	r2, r3, #29
 8005bcc:	d505      	bpl.n	8005bda <__sflush_r+0x46>
 8005bce:	6863      	ldr	r3, [r4, #4]
 8005bd0:	1ac0      	subs	r0, r0, r3
 8005bd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bd4:	b10b      	cbz	r3, 8005bda <__sflush_r+0x46>
 8005bd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bd8:	1ac0      	subs	r0, r0, r3
 8005bda:	2300      	movs	r3, #0
 8005bdc:	4602      	mov	r2, r0
 8005bde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005be0:	6a21      	ldr	r1, [r4, #32]
 8005be2:	4628      	mov	r0, r5
 8005be4:	47b0      	blx	r6
 8005be6:	1c43      	adds	r3, r0, #1
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	d106      	bne.n	8005bfa <__sflush_r+0x66>
 8005bec:	6829      	ldr	r1, [r5, #0]
 8005bee:	291d      	cmp	r1, #29
 8005bf0:	d82c      	bhi.n	8005c4c <__sflush_r+0xb8>
 8005bf2:	4a2a      	ldr	r2, [pc, #168]	; (8005c9c <__sflush_r+0x108>)
 8005bf4:	40ca      	lsrs	r2, r1
 8005bf6:	07d6      	lsls	r6, r2, #31
 8005bf8:	d528      	bpl.n	8005c4c <__sflush_r+0xb8>
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	6062      	str	r2, [r4, #4]
 8005bfe:	04d9      	lsls	r1, r3, #19
 8005c00:	6922      	ldr	r2, [r4, #16]
 8005c02:	6022      	str	r2, [r4, #0]
 8005c04:	d504      	bpl.n	8005c10 <__sflush_r+0x7c>
 8005c06:	1c42      	adds	r2, r0, #1
 8005c08:	d101      	bne.n	8005c0e <__sflush_r+0x7a>
 8005c0a:	682b      	ldr	r3, [r5, #0]
 8005c0c:	b903      	cbnz	r3, 8005c10 <__sflush_r+0x7c>
 8005c0e:	6560      	str	r0, [r4, #84]	; 0x54
 8005c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c12:	602f      	str	r7, [r5, #0]
 8005c14:	2900      	cmp	r1, #0
 8005c16:	d0ca      	beq.n	8005bae <__sflush_r+0x1a>
 8005c18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c1c:	4299      	cmp	r1, r3
 8005c1e:	d002      	beq.n	8005c26 <__sflush_r+0x92>
 8005c20:	4628      	mov	r0, r5
 8005c22:	f000 f8fd 	bl	8005e20 <_free_r>
 8005c26:	2000      	movs	r0, #0
 8005c28:	6360      	str	r0, [r4, #52]	; 0x34
 8005c2a:	e7c1      	b.n	8005bb0 <__sflush_r+0x1c>
 8005c2c:	6a21      	ldr	r1, [r4, #32]
 8005c2e:	2301      	movs	r3, #1
 8005c30:	4628      	mov	r0, r5
 8005c32:	47b0      	blx	r6
 8005c34:	1c41      	adds	r1, r0, #1
 8005c36:	d1c7      	bne.n	8005bc8 <__sflush_r+0x34>
 8005c38:	682b      	ldr	r3, [r5, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0c4      	beq.n	8005bc8 <__sflush_r+0x34>
 8005c3e:	2b1d      	cmp	r3, #29
 8005c40:	d001      	beq.n	8005c46 <__sflush_r+0xb2>
 8005c42:	2b16      	cmp	r3, #22
 8005c44:	d101      	bne.n	8005c4a <__sflush_r+0xb6>
 8005c46:	602f      	str	r7, [r5, #0]
 8005c48:	e7b1      	b.n	8005bae <__sflush_r+0x1a>
 8005c4a:	89a3      	ldrh	r3, [r4, #12]
 8005c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c50:	81a3      	strh	r3, [r4, #12]
 8005c52:	e7ad      	b.n	8005bb0 <__sflush_r+0x1c>
 8005c54:	690f      	ldr	r7, [r1, #16]
 8005c56:	2f00      	cmp	r7, #0
 8005c58:	d0a9      	beq.n	8005bae <__sflush_r+0x1a>
 8005c5a:	0793      	lsls	r3, r2, #30
 8005c5c:	680e      	ldr	r6, [r1, #0]
 8005c5e:	bf08      	it	eq
 8005c60:	694b      	ldreq	r3, [r1, #20]
 8005c62:	600f      	str	r7, [r1, #0]
 8005c64:	bf18      	it	ne
 8005c66:	2300      	movne	r3, #0
 8005c68:	eba6 0807 	sub.w	r8, r6, r7
 8005c6c:	608b      	str	r3, [r1, #8]
 8005c6e:	f1b8 0f00 	cmp.w	r8, #0
 8005c72:	dd9c      	ble.n	8005bae <__sflush_r+0x1a>
 8005c74:	6a21      	ldr	r1, [r4, #32]
 8005c76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c78:	4643      	mov	r3, r8
 8005c7a:	463a      	mov	r2, r7
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b0      	blx	r6
 8005c80:	2800      	cmp	r0, #0
 8005c82:	dc06      	bgt.n	8005c92 <__sflush_r+0xfe>
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c8a:	81a3      	strh	r3, [r4, #12]
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c90:	e78e      	b.n	8005bb0 <__sflush_r+0x1c>
 8005c92:	4407      	add	r7, r0
 8005c94:	eba8 0800 	sub.w	r8, r8, r0
 8005c98:	e7e9      	b.n	8005c6e <__sflush_r+0xda>
 8005c9a:	bf00      	nop
 8005c9c:	20400001 	.word	0x20400001

08005ca0 <_fflush_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	690b      	ldr	r3, [r1, #16]
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	b913      	cbnz	r3, 8005cb0 <_fflush_r+0x10>
 8005caa:	2500      	movs	r5, #0
 8005cac:	4628      	mov	r0, r5
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	b118      	cbz	r0, 8005cba <_fflush_r+0x1a>
 8005cb2:	6983      	ldr	r3, [r0, #24]
 8005cb4:	b90b      	cbnz	r3, 8005cba <_fflush_r+0x1a>
 8005cb6:	f7ff fa15 	bl	80050e4 <__sinit>
 8005cba:	4b14      	ldr	r3, [pc, #80]	; (8005d0c <_fflush_r+0x6c>)
 8005cbc:	429c      	cmp	r4, r3
 8005cbe:	d11b      	bne.n	8005cf8 <_fflush_r+0x58>
 8005cc0:	686c      	ldr	r4, [r5, #4]
 8005cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0ef      	beq.n	8005caa <_fflush_r+0xa>
 8005cca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ccc:	07d0      	lsls	r0, r2, #31
 8005cce:	d404      	bmi.n	8005cda <_fflush_r+0x3a>
 8005cd0:	0599      	lsls	r1, r3, #22
 8005cd2:	d402      	bmi.n	8005cda <_fflush_r+0x3a>
 8005cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cd6:	f7ff faa3 	bl	8005220 <__retarget_lock_acquire_recursive>
 8005cda:	4628      	mov	r0, r5
 8005cdc:	4621      	mov	r1, r4
 8005cde:	f7ff ff59 	bl	8005b94 <__sflush_r>
 8005ce2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ce4:	07da      	lsls	r2, r3, #31
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	d4e0      	bmi.n	8005cac <_fflush_r+0xc>
 8005cea:	89a3      	ldrh	r3, [r4, #12]
 8005cec:	059b      	lsls	r3, r3, #22
 8005cee:	d4dd      	bmi.n	8005cac <_fflush_r+0xc>
 8005cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cf2:	f7ff fa96 	bl	8005222 <__retarget_lock_release_recursive>
 8005cf6:	e7d9      	b.n	8005cac <_fflush_r+0xc>
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <_fflush_r+0x70>)
 8005cfa:	429c      	cmp	r4, r3
 8005cfc:	d101      	bne.n	8005d02 <_fflush_r+0x62>
 8005cfe:	68ac      	ldr	r4, [r5, #8]
 8005d00:	e7df      	b.n	8005cc2 <_fflush_r+0x22>
 8005d02:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <_fflush_r+0x74>)
 8005d04:	429c      	cmp	r4, r3
 8005d06:	bf08      	it	eq
 8005d08:	68ec      	ldreq	r4, [r5, #12]
 8005d0a:	e7da      	b.n	8005cc2 <_fflush_r+0x22>
 8005d0c:	08005f98 	.word	0x08005f98
 8005d10:	08005fb8 	.word	0x08005fb8
 8005d14:	08005f78 	.word	0x08005f78

08005d18 <_lseek_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4d07      	ldr	r5, [pc, #28]	; (8005d38 <_lseek_r+0x20>)
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	4608      	mov	r0, r1
 8005d20:	4611      	mov	r1, r2
 8005d22:	2200      	movs	r2, #0
 8005d24:	602a      	str	r2, [r5, #0]
 8005d26:	461a      	mov	r2, r3
 8005d28:	f7fb f9f9 	bl	800111e <_lseek>
 8005d2c:	1c43      	adds	r3, r0, #1
 8005d2e:	d102      	bne.n	8005d36 <_lseek_r+0x1e>
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	b103      	cbz	r3, 8005d36 <_lseek_r+0x1e>
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	200008b4 	.word	0x200008b4

08005d3c <__swhatbuf_r>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	460e      	mov	r6, r1
 8005d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d44:	2900      	cmp	r1, #0
 8005d46:	b096      	sub	sp, #88	; 0x58
 8005d48:	4614      	mov	r4, r2
 8005d4a:	461d      	mov	r5, r3
 8005d4c:	da08      	bge.n	8005d60 <__swhatbuf_r+0x24>
 8005d4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	602a      	str	r2, [r5, #0]
 8005d56:	061a      	lsls	r2, r3, #24
 8005d58:	d410      	bmi.n	8005d7c <__swhatbuf_r+0x40>
 8005d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d5e:	e00e      	b.n	8005d7e <__swhatbuf_r+0x42>
 8005d60:	466a      	mov	r2, sp
 8005d62:	f000 f8bb 	bl	8005edc <_fstat_r>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	dbf1      	blt.n	8005d4e <__swhatbuf_r+0x12>
 8005d6a:	9a01      	ldr	r2, [sp, #4]
 8005d6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d74:	425a      	negs	r2, r3
 8005d76:	415a      	adcs	r2, r3
 8005d78:	602a      	str	r2, [r5, #0]
 8005d7a:	e7ee      	b.n	8005d5a <__swhatbuf_r+0x1e>
 8005d7c:	2340      	movs	r3, #64	; 0x40
 8005d7e:	2000      	movs	r0, #0
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	b016      	add	sp, #88	; 0x58
 8005d84:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d88 <__smakebuf_r>:
 8005d88:	898b      	ldrh	r3, [r1, #12]
 8005d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d8c:	079d      	lsls	r5, r3, #30
 8005d8e:	4606      	mov	r6, r0
 8005d90:	460c      	mov	r4, r1
 8005d92:	d507      	bpl.n	8005da4 <__smakebuf_r+0x1c>
 8005d94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	6123      	str	r3, [r4, #16]
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	6163      	str	r3, [r4, #20]
 8005da0:	b002      	add	sp, #8
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	ab01      	add	r3, sp, #4
 8005da6:	466a      	mov	r2, sp
 8005da8:	f7ff ffc8 	bl	8005d3c <__swhatbuf_r>
 8005dac:	9900      	ldr	r1, [sp, #0]
 8005dae:	4605      	mov	r5, r0
 8005db0:	4630      	mov	r0, r6
 8005db2:	f7ff fa57 	bl	8005264 <_malloc_r>
 8005db6:	b948      	cbnz	r0, 8005dcc <__smakebuf_r+0x44>
 8005db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dbc:	059a      	lsls	r2, r3, #22
 8005dbe:	d4ef      	bmi.n	8005da0 <__smakebuf_r+0x18>
 8005dc0:	f023 0303 	bic.w	r3, r3, #3
 8005dc4:	f043 0302 	orr.w	r3, r3, #2
 8005dc8:	81a3      	strh	r3, [r4, #12]
 8005dca:	e7e3      	b.n	8005d94 <__smakebuf_r+0xc>
 8005dcc:	4b0d      	ldr	r3, [pc, #52]	; (8005e04 <__smakebuf_r+0x7c>)
 8005dce:	62b3      	str	r3, [r6, #40]	; 0x28
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	6020      	str	r0, [r4, #0]
 8005dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd8:	81a3      	strh	r3, [r4, #12]
 8005dda:	9b00      	ldr	r3, [sp, #0]
 8005ddc:	6163      	str	r3, [r4, #20]
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	6120      	str	r0, [r4, #16]
 8005de2:	b15b      	cbz	r3, 8005dfc <__smakebuf_r+0x74>
 8005de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005de8:	4630      	mov	r0, r6
 8005dea:	f000 f889 	bl	8005f00 <_isatty_r>
 8005dee:	b128      	cbz	r0, 8005dfc <__smakebuf_r+0x74>
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	f023 0303 	bic.w	r3, r3, #3
 8005df6:	f043 0301 	orr.w	r3, r3, #1
 8005dfa:	81a3      	strh	r3, [r4, #12]
 8005dfc:	89a0      	ldrh	r0, [r4, #12]
 8005dfe:	4305      	orrs	r5, r0
 8005e00:	81a5      	strh	r5, [r4, #12]
 8005e02:	e7cd      	b.n	8005da0 <__smakebuf_r+0x18>
 8005e04:	0800507d 	.word	0x0800507d

08005e08 <__malloc_lock>:
 8005e08:	4801      	ldr	r0, [pc, #4]	; (8005e10 <__malloc_lock+0x8>)
 8005e0a:	f7ff ba09 	b.w	8005220 <__retarget_lock_acquire_recursive>
 8005e0e:	bf00      	nop
 8005e10:	200008a8 	.word	0x200008a8

08005e14 <__malloc_unlock>:
 8005e14:	4801      	ldr	r0, [pc, #4]	; (8005e1c <__malloc_unlock+0x8>)
 8005e16:	f7ff ba04 	b.w	8005222 <__retarget_lock_release_recursive>
 8005e1a:	bf00      	nop
 8005e1c:	200008a8 	.word	0x200008a8

08005e20 <_free_r>:
 8005e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e22:	2900      	cmp	r1, #0
 8005e24:	d044      	beq.n	8005eb0 <_free_r+0x90>
 8005e26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e2a:	9001      	str	r0, [sp, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f1a1 0404 	sub.w	r4, r1, #4
 8005e32:	bfb8      	it	lt
 8005e34:	18e4      	addlt	r4, r4, r3
 8005e36:	f7ff ffe7 	bl	8005e08 <__malloc_lock>
 8005e3a:	4a1e      	ldr	r2, [pc, #120]	; (8005eb4 <_free_r+0x94>)
 8005e3c:	9801      	ldr	r0, [sp, #4]
 8005e3e:	6813      	ldr	r3, [r2, #0]
 8005e40:	b933      	cbnz	r3, 8005e50 <_free_r+0x30>
 8005e42:	6063      	str	r3, [r4, #4]
 8005e44:	6014      	str	r4, [r2, #0]
 8005e46:	b003      	add	sp, #12
 8005e48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e4c:	f7ff bfe2 	b.w	8005e14 <__malloc_unlock>
 8005e50:	42a3      	cmp	r3, r4
 8005e52:	d908      	bls.n	8005e66 <_free_r+0x46>
 8005e54:	6825      	ldr	r5, [r4, #0]
 8005e56:	1961      	adds	r1, r4, r5
 8005e58:	428b      	cmp	r3, r1
 8005e5a:	bf01      	itttt	eq
 8005e5c:	6819      	ldreq	r1, [r3, #0]
 8005e5e:	685b      	ldreq	r3, [r3, #4]
 8005e60:	1949      	addeq	r1, r1, r5
 8005e62:	6021      	streq	r1, [r4, #0]
 8005e64:	e7ed      	b.n	8005e42 <_free_r+0x22>
 8005e66:	461a      	mov	r2, r3
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	b10b      	cbz	r3, 8005e70 <_free_r+0x50>
 8005e6c:	42a3      	cmp	r3, r4
 8005e6e:	d9fa      	bls.n	8005e66 <_free_r+0x46>
 8005e70:	6811      	ldr	r1, [r2, #0]
 8005e72:	1855      	adds	r5, r2, r1
 8005e74:	42a5      	cmp	r5, r4
 8005e76:	d10b      	bne.n	8005e90 <_free_r+0x70>
 8005e78:	6824      	ldr	r4, [r4, #0]
 8005e7a:	4421      	add	r1, r4
 8005e7c:	1854      	adds	r4, r2, r1
 8005e7e:	42a3      	cmp	r3, r4
 8005e80:	6011      	str	r1, [r2, #0]
 8005e82:	d1e0      	bne.n	8005e46 <_free_r+0x26>
 8005e84:	681c      	ldr	r4, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	6053      	str	r3, [r2, #4]
 8005e8a:	4421      	add	r1, r4
 8005e8c:	6011      	str	r1, [r2, #0]
 8005e8e:	e7da      	b.n	8005e46 <_free_r+0x26>
 8005e90:	d902      	bls.n	8005e98 <_free_r+0x78>
 8005e92:	230c      	movs	r3, #12
 8005e94:	6003      	str	r3, [r0, #0]
 8005e96:	e7d6      	b.n	8005e46 <_free_r+0x26>
 8005e98:	6825      	ldr	r5, [r4, #0]
 8005e9a:	1961      	adds	r1, r4, r5
 8005e9c:	428b      	cmp	r3, r1
 8005e9e:	bf04      	itt	eq
 8005ea0:	6819      	ldreq	r1, [r3, #0]
 8005ea2:	685b      	ldreq	r3, [r3, #4]
 8005ea4:	6063      	str	r3, [r4, #4]
 8005ea6:	bf04      	itt	eq
 8005ea8:	1949      	addeq	r1, r1, r5
 8005eaa:	6021      	streq	r1, [r4, #0]
 8005eac:	6054      	str	r4, [r2, #4]
 8005eae:	e7ca      	b.n	8005e46 <_free_r+0x26>
 8005eb0:	b003      	add	sp, #12
 8005eb2:	bd30      	pop	{r4, r5, pc}
 8005eb4:	200008ac 	.word	0x200008ac

08005eb8 <_read_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	4d07      	ldr	r5, [pc, #28]	; (8005ed8 <_read_r+0x20>)
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	4608      	mov	r0, r1
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	602a      	str	r2, [r5, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f7fa fb7a 	bl	80005c0 <_read>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d102      	bne.n	8005ed6 <_read_r+0x1e>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	b103      	cbz	r3, 8005ed6 <_read_r+0x1e>
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
 8005ed8:	200008b4 	.word	0x200008b4

08005edc <_fstat_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	4d07      	ldr	r5, [pc, #28]	; (8005efc <_fstat_r+0x20>)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	602b      	str	r3, [r5, #0]
 8005eea:	f7fb f8fd 	bl	80010e8 <_fstat>
 8005eee:	1c43      	adds	r3, r0, #1
 8005ef0:	d102      	bne.n	8005ef8 <_fstat_r+0x1c>
 8005ef2:	682b      	ldr	r3, [r5, #0]
 8005ef4:	b103      	cbz	r3, 8005ef8 <_fstat_r+0x1c>
 8005ef6:	6023      	str	r3, [r4, #0]
 8005ef8:	bd38      	pop	{r3, r4, r5, pc}
 8005efa:	bf00      	nop
 8005efc:	200008b4 	.word	0x200008b4

08005f00 <_isatty_r>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	4d06      	ldr	r5, [pc, #24]	; (8005f1c <_isatty_r+0x1c>)
 8005f04:	2300      	movs	r3, #0
 8005f06:	4604      	mov	r4, r0
 8005f08:	4608      	mov	r0, r1
 8005f0a:	602b      	str	r3, [r5, #0]
 8005f0c:	f7fb f8fc 	bl	8001108 <_isatty>
 8005f10:	1c43      	adds	r3, r0, #1
 8005f12:	d102      	bne.n	8005f1a <_isatty_r+0x1a>
 8005f14:	682b      	ldr	r3, [r5, #0]
 8005f16:	b103      	cbz	r3, 8005f1a <_isatty_r+0x1a>
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	bd38      	pop	{r3, r4, r5, pc}
 8005f1c:	200008b4 	.word	0x200008b4

08005f20 <_init>:
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	bf00      	nop
 8005f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f26:	bc08      	pop	{r3}
 8005f28:	469e      	mov	lr, r3
 8005f2a:	4770      	bx	lr

08005f2c <_fini>:
 8005f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2e:	bf00      	nop
 8005f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f32:	bc08      	pop	{r3}
 8005f34:	469e      	mov	lr, r3
 8005f36:	4770      	bx	lr
