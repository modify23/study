
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000459c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004748  08004748  00014748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004760  08004760  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004760  08004760  00014760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004768  08004768  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004768  08004768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000800  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000080c  2000080c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d73  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022f3  00000000  00000000  00031daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  000340a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cb8  00000000  00000000  00034e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ee0  00000000  00000000  00035ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f99f  00000000  00000000  0005b9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8598  00000000  00000000  0006b35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001538f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000393c  00000000  00000000  00153948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004730 	.word	0x08004730

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004730 	.word	0x08004730

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fd06 	bl	8000f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f832 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f9be 	bl	800087c <MX_GPIO_Init>
  MX_ETH_Init();
 8000500:	f000 f916 	bl	8000730 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000504:	f000 f962 	bl	80007cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000508:	f000 f98a 	bl	8000820 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800050c:	f000 f892 	bl	8000634 <MX_ADC1_Init>
  MX_DAC_Init();
 8000510:	f000 f8e4 	bl	80006dc <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000514:	2100      	movs	r1, #0
 8000516:	480f      	ldr	r0, [pc, #60]	; (8000554 <main+0x64>)
 8000518:	f001 facd 	bl	8001ab6 <HAL_DAC_Start>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_ADC_Start(&hadc1);
 800051c:	480e      	ldr	r0, [pc, #56]	; (8000558 <main+0x68>)
 800051e:	f000 fdcb 	bl	80010b8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 50);
 8000522:	2132      	movs	r1, #50	; 0x32
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <main+0x68>)
 8000526:	f000 fecc 	bl	80012c2 <HAL_ADC_PollForConversion>
		adc_value = HAL_ADC_GetValue(&hadc1);
 800052a:	480b      	ldr	r0, [pc, #44]	; (8000558 <main+0x68>)
 800052c:	f000 ff54 	bl	80013d8 <HAL_ADC_GetValue>
 8000530:	4603      	mov	r3, r0
 8000532:	461a      	mov	r2, r3
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <main+0x6c>)
 8000536:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 8000538:	4807      	ldr	r0, [pc, #28]	; (8000558 <main+0x68>)
 800053a:	f000 fe8f 	bl	800125c <HAL_ADC_Stop>
//		HAL_UART_Transmit(&huart3, (uint8_t*) uart_buf, sizeof(uart_buf), 100);
//		HAL_Delay(100);
//	}
		//dac_value = adc_value * 1;

		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, adc_value);
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <main+0x6c>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2200      	movs	r2, #0
 8000544:	2100      	movs	r1, #0
 8000546:	4803      	ldr	r0, [pc, #12]	; (8000554 <main+0x64>)
 8000548:	f001 fb07 	bl	8001b5a <HAL_DAC_SetValue>


		HAL_Delay(1);
 800054c:	2001      	movs	r0, #1
 800054e:	f000 fd4b 	bl	8000fe8 <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 8000552:	e7e3      	b.n	800051c <main+0x2c>
 8000554:	200001e8 	.word	0x200001e8
 8000558:	200001a0 	.word	0x200001a0
 800055c:	200007fc 	.word	0x200007fc

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 f8d6 	bl	8004720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a27      	ldr	r2, [pc, #156]	; (800062c <SystemClock_Config+0xcc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <SystemClock_Config+0xd0>)
 80005aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005bc:	2301      	movs	r3, #1
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d4:	23a8      	movs	r3, #168	; 0xa8
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005dc:	2307      	movs	r3, #7
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 f9c9 	bl	800297c <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f0:	f000 f9f2 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000600:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2105      	movs	r1, #5
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fc2a 	bl	8002e6c <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061e:	f000 f9db 	bl	80009d8 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063a:	463b      	mov	r3, r7
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000646:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000648:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <MX_ADC1_Init+0xa0>)
 800064a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800064c:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <MX_ADC1_Init+0x9c>)
 800064e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000652:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000656:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800065a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800065c:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MX_ADC1_Init+0x9c>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000662:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000664:	2200      	movs	r2, #0
 8000666:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_ADC1_Init+0x9c>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000672:	2200      	movs	r2, #0
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000678:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <MX_ADC1_Init+0xa4>)
 800067a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_ADC1_Init+0x9c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000684:	2201      	movs	r2, #1
 8000686:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_ADC1_Init+0x9c>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000692:	2201      	movs	r2, #1
 8000694:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000696:	480e      	ldr	r0, [pc, #56]	; (80006d0 <MX_ADC1_Init+0x9c>)
 8000698:	f000 fcca 	bl	8001030 <HAL_ADC_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80006a2:	f000 f999 	bl	80009d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006a6:	2303      	movs	r3, #3
 80006a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	4619      	mov	r1, r3
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <MX_ADC1_Init+0x9c>)
 80006b8:	f000 fe9c 	bl	80013f4 <HAL_ADC_ConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006c2:	f000 f989 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200001a0 	.word	0x200001a0
 80006d4:	40012000 	.word	0x40012000
 80006d8:	0f000001 	.word	0x0f000001

080006dc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_DAC_Init+0x4c>)
 80006ec:	4a0f      	ldr	r2, [pc, #60]	; (800072c <MX_DAC_Init+0x50>)
 80006ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_DAC_Init+0x4c>)
 80006f2:	f001 f9be 	bl	8001a72 <HAL_DAC_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80006fc:	f000 f96c 	bl	80009d8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <MX_DAC_Init+0x4c>)
 8000710:	f001 fa48 	bl	8001ba4 <HAL_DAC_ConfigChannel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800071a:	f000 f95d 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200001e8 	.word	0x200001e8
 800072c:	40007400 	.word	0x40007400

08000730 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_ETH_Init+0x84>)
 8000736:	4a20      	ldr	r2, [pc, #128]	; (80007b8 <MX_ETH_Init+0x88>)
 8000738:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <MX_ETH_Init+0x8c>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_ETH_Init+0x8c>)
 8000742:	2280      	movs	r2, #128	; 0x80
 8000744:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_ETH_Init+0x8c>)
 8000748:	22e1      	movs	r2, #225	; 0xe1
 800074a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_ETH_Init+0x8c>)
 800074e:	2200      	movs	r2, #0
 8000750:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_ETH_Init+0x8c>)
 8000754:	2200      	movs	r2, #0
 8000756:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_ETH_Init+0x8c>)
 800075a:	2200      	movs	r2, #0
 800075c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_ETH_Init+0x84>)
 8000760:	4a16      	ldr	r2, [pc, #88]	; (80007bc <MX_ETH_Init+0x8c>)
 8000762:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_ETH_Init+0x84>)
 8000766:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800076a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_ETH_Init+0x84>)
 800076e:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <MX_ETH_Init+0x90>)
 8000770:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_ETH_Init+0x84>)
 8000774:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <MX_ETH_Init+0x94>)
 8000776:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000778:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_ETH_Init+0x84>)
 800077a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800077e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <MX_ETH_Init+0x84>)
 8000782:	f001 faf1 	bl	8001d68 <HAL_ETH_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800078c:	f000 f924 	bl	80009d8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000790:	2238      	movs	r2, #56	; 0x38
 8000792:	2100      	movs	r1, #0
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_ETH_Init+0x98>)
 8000796:	f003 ffc3 	bl	8004720 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_ETH_Init+0x98>)
 800079c:	2221      	movs	r2, #33	; 0x21
 800079e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_ETH_Init+0x98>)
 80007a2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007a6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_ETH_Init+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200001fc 	.word	0x200001fc
 80007b8:	40028000 	.word	0x40028000
 80007bc:	20000800 	.word	0x20000800
 80007c0:	20000100 	.word	0x20000100
 80007c4:	20000060 	.word	0x20000060
 80007c8:	20000028 	.word	0x20000028

080007cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <MX_USART3_UART_Init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_USART3_UART_Init+0x4c>)
 8000804:	f002 fd52 	bl	80032ac <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800080e:	f000 f8e3 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200002ac 	.word	0x200002ac
 800081c:	40004800 	.word	0x40004800

08000820 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800082a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2204      	movs	r2, #4
 8000830:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	2202      	movs	r2, #2
 8000836:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	2202      	movs	r2, #2
 8000842:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2201      	movs	r2, #1
 8000848:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	2201      	movs	r2, #1
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	f001 ff6d 	bl	8002742 <HAL_PCD_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800086e:	f000 f8b3 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200002f0 	.word	0x200002f0

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	4b4c      	ldr	r3, [pc, #304]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a4b      	ldr	r2, [pc, #300]	; (80009c8 <MX_GPIO_Init+0x14c>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b49      	ldr	r3, [pc, #292]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	4b45      	ldr	r3, [pc, #276]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a44      	ldr	r2, [pc, #272]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b42      	ldr	r3, [pc, #264]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a3d      	ldr	r2, [pc, #244]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b37      	ldr	r3, [pc, #220]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a36      	ldr	r2, [pc, #216]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a2f      	ldr	r2, [pc, #188]	; (80009c8 <MX_GPIO_Init+0x14c>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a28      	ldr	r2, [pc, #160]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <MX_GPIO_Init+0x14c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000940:	4822      	ldr	r0, [pc, #136]	; (80009cc <MX_GPIO_Init+0x150>)
 8000942:	f001 fee5 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2140      	movs	r1, #64	; 0x40
 800094a:	4821      	ldr	r0, [pc, #132]	; (80009d0 <MX_GPIO_Init+0x154>)
 800094c:	f001 fee0 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000956:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	481b      	ldr	r0, [pc, #108]	; (80009d4 <MX_GPIO_Init+0x158>)
 8000968:	f001 fd26 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800096c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4811      	ldr	r0, [pc, #68]	; (80009cc <MX_GPIO_Init+0x150>)
 8000986:	f001 fd17 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800098a:	2340      	movs	r3, #64	; 0x40
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <MX_GPIO_Init+0x154>)
 80009a2:	f001 fd09 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_GPIO_Init+0x154>)
 80009ba:	f001 fcfd 	bl	80023b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	; 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020400 	.word	0x40020400
 80009d0:	40021800 	.word	0x40021800
 80009d4:	40020800 	.word	0x40020800

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <Error_Handler+0x8>
	...

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <HAL_ADC_MspInit+0x7c>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d127      	bne.n	8000aa6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a64:	6453      	str	r3, [r2, #68]	; 0x44
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a92:	2303      	movs	r3, #3
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <HAL_ADC_MspInit+0x84>)
 8000aa2:	f001 fc89 	bl	80023b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40012000 	.word	0x40012000
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000

08000abc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <HAL_DAC_MspInit+0x7c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d127      	bne.n	8000b2e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <HAL_DAC_MspInit+0x80>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <HAL_DAC_MspInit+0x80>)
 8000ae8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <HAL_DAC_MspInit+0x80>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_DAC_MspInit+0x80>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <HAL_DAC_MspInit+0x80>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_DAC_MspInit+0x80>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b16:	2310      	movs	r3, #16
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <HAL_DAC_MspInit+0x84>)
 8000b2a:	f001 fc45 	bl	80023b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40007400 	.word	0x40007400
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000

08000b44 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08e      	sub	sp, #56	; 0x38
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a55      	ldr	r2, [pc, #340]	; (8000cb8 <HAL_ETH_MspInit+0x174>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	f040 80a4 	bne.w	8000cb0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
 8000b6c:	4b53      	ldr	r3, [pc, #332]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a52      	ldr	r2, [pc, #328]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000b72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30
 8000b78:	4b50      	ldr	r3, [pc, #320]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b80:	623b      	str	r3, [r7, #32]
 8000b82:	6a3b      	ldr	r3, [r7, #32]
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
 8000b88:	4b4c      	ldr	r3, [pc, #304]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	4a4b      	ldr	r2, [pc, #300]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000b8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b92:	6313      	str	r3, [r2, #48]	; 0x30
 8000b94:	4b49      	ldr	r3, [pc, #292]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b9c:	61fb      	str	r3, [r7, #28]
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
 8000ba4:	4b45      	ldr	r3, [pc, #276]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a44      	ldr	r2, [pc, #272]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000baa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb0:	4b42      	ldr	r3, [pc, #264]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bb8:	61bb      	str	r3, [r7, #24]
 8000bba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	4b3e      	ldr	r3, [pc, #248]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a3d      	ldr	r2, [pc, #244]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b3b      	ldr	r3, [pc, #236]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a36      	ldr	r2, [pc, #216]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b34      	ldr	r3, [pc, #208]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	4a2f      	ldr	r2, [pc, #188]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000bfe:	f043 0302 	orr.w	r3, r3, #2
 8000c02:	6313      	str	r3, [r2, #48]	; 0x30
 8000c04:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	4a28      	ldr	r2, [pc, #160]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c20:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <HAL_ETH_MspInit+0x178>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c2c:	2332      	movs	r3, #50	; 0x32
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c3c:	230b      	movs	r3, #11
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	481e      	ldr	r0, [pc, #120]	; (8000cc0 <HAL_ETH_MspInit+0x17c>)
 8000c48:	f001 fbb6 	bl	80023b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c4c:	2386      	movs	r3, #134	; 0x86
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c5c:	230b      	movs	r3, #11
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4817      	ldr	r0, [pc, #92]	; (8000cc4 <HAL_ETH_MspInit+0x180>)
 8000c68:	f001 fba6 	bl	80023b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7e:	230b      	movs	r3, #11
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	480f      	ldr	r0, [pc, #60]	; (8000cc8 <HAL_ETH_MspInit+0x184>)
 8000c8a:	f001 fb95 	bl	80023b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca0:	230b      	movs	r3, #11
 8000ca2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4808      	ldr	r0, [pc, #32]	; (8000ccc <HAL_ETH_MspInit+0x188>)
 8000cac:	f001 fb84 	bl	80023b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3738      	adds	r7, #56	; 0x38
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40028000 	.word	0x40028000
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020800 	.word	0x40020800
 8000cc4:	40020000 	.word	0x40020000
 8000cc8:	40020400 	.word	0x40020400
 8000ccc:	40021800 	.word	0x40021800

08000cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a1d      	ldr	r2, [pc, #116]	; (8000d64 <HAL_UART_MspInit+0x94>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d134      	bne.n	8000d5c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <HAL_UART_MspInit+0x98>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <HAL_UART_MspInit+0x98>)
 8000cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <HAL_UART_MspInit+0x98>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_UART_MspInit+0x98>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a14      	ldr	r2, [pc, #80]	; (8000d68 <HAL_UART_MspInit+0x98>)
 8000d18:	f043 0308 	orr.w	r3, r3, #8
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_UART_MspInit+0x98>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d3c:	2307      	movs	r3, #7
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	4809      	ldr	r0, [pc, #36]	; (8000d6c <HAL_UART_MspInit+0x9c>)
 8000d48:	f001 fb36 	bl	80023b8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2027      	movs	r0, #39	; 0x27
 8000d52:	f000 fe58 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d56:	2027      	movs	r0, #39	; 0x27
 8000d58:	f000 fe71 	bl	8001a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	; 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40004800 	.word	0x40004800
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020c00 	.word	0x40020c00

08000d70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d90:	d13f      	bne.n	8000e12 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <HAL_PCD_MspInit+0xac>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a20      	ldr	r2, [pc, #128]	; (8000e1c <HAL_PCD_MspInit+0xac>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <HAL_PCD_MspInit+0xac>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dae:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dc0:	230a      	movs	r3, #10
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4815      	ldr	r0, [pc, #84]	; (8000e20 <HAL_PCD_MspInit+0xb0>)
 8000dcc:	f001 faf4 	bl	80023b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	480e      	ldr	r0, [pc, #56]	; (8000e20 <HAL_PCD_MspInit+0xb0>)
 8000de6:	f001 fae7 	bl	80023b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_PCD_MspInit+0xac>)
 8000dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dee:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <HAL_PCD_MspInit+0xac>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df4:	6353      	str	r3, [r2, #52]	; 0x34
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_PCD_MspInit+0xac>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_PCD_MspInit+0xac>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_PCD_MspInit+0xac>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	; 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020000 	.word	0x40020000

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <NMI_Handler+0x4>

08000e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <MemManage_Handler+0x4>

08000e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e70:	f000 f89a 	bl	8000fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <USART3_IRQHandler+0x10>)
 8000e7e:	f002 fa63 	bl	8003348 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200002ac 	.word	0x200002ac

08000e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eb6:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ecc:	4c0b      	ldr	r4, [pc, #44]	; (8000efc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eda:	f7ff ffd7 	bl	8000e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ede:	f003 fbfb 	bl	80046d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee2:	f7ff fb05 	bl	80004f0 <main>
  bx  lr    
 8000ee6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ee8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ef4:	08004770 	.word	0x08004770
  ldr r2, =_sbss
 8000ef8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000efc:	2000080c 	.word	0x2000080c

08000f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_Init+0x40>)
 8000f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_Init+0x40>)
 8000f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_Init+0x40>)
 8000f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 fd5f 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff fd54 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fd77 	bl	8001a5a <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f000 fd3f 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000004 	.word	0x20000004

08000fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000808 	.word	0x20000808

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000808 	.word	0x20000808

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff ffee 	bl	8000fd0 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001000:	d005      	beq.n	800100e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_Delay+0x44>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800100e:	bf00      	nop
 8001010:	f7ff ffde 	bl	8000fd0 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8f7      	bhi.n	8001010 <HAL_Delay+0x28>
  {
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000008 	.word	0x20000008

08001030 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e033      	b.n	80010ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	2b00      	cmp	r3, #0
 800104c:	d109      	bne.n	8001062 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fcf0 	bl	8000a34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f003 0310 	and.w	r3, r3, #16
 800106a:	2b00      	cmp	r3, #0
 800106c:	d118      	bne.n	80010a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001076:	f023 0302 	bic.w	r3, r3, #2
 800107a:	f043 0202 	orr.w	r2, r3, #2
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 fae8 	bl	8001658 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f023 0303 	bic.w	r3, r3, #3
 8001096:	f043 0201 	orr.w	r2, r3, #1
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
 800109e:	e001      	b.n	80010a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d101      	bne.n	80010d2 <HAL_ADC_Start+0x1a>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e0b2      	b.n	8001238 <HAL_ADC_Start+0x180>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d018      	beq.n	800111a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0201 	orr.w	r2, r2, #1
 80010f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010f8:	4b52      	ldr	r3, [pc, #328]	; (8001244 <HAL_ADC_Start+0x18c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a52      	ldr	r2, [pc, #328]	; (8001248 <HAL_ADC_Start+0x190>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	0c9a      	lsrs	r2, r3, #18
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800110c:	e002      	b.n	8001114 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	3b01      	subs	r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f9      	bne.n	800110e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b01      	cmp	r3, #1
 8001126:	d17a      	bne.n	800121e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001130:	f023 0301 	bic.w	r3, r3, #1
 8001134:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001146:	2b00      	cmp	r3, #0
 8001148:	d007      	beq.n	800115a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001152:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001166:	d106      	bne.n	8001176 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116c:	f023 0206 	bic.w	r2, r3, #6
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	645a      	str	r2, [r3, #68]	; 0x44
 8001174:	e002      	b.n	800117c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001184:	4b31      	ldr	r3, [pc, #196]	; (800124c <HAL_ADC_Start+0x194>)
 8001186:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001190:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	2b00      	cmp	r3, #0
 800119c:	d12a      	bne.n	80011f4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a2b      	ldr	r2, [pc, #172]	; (8001250 <HAL_ADC_Start+0x198>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d015      	beq.n	80011d4 <HAL_ADC_Start+0x11c>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a29      	ldr	r2, [pc, #164]	; (8001254 <HAL_ADC_Start+0x19c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d105      	bne.n	80011be <HAL_ADC_Start+0x106>
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <HAL_ADC_Start+0x194>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00a      	beq.n	80011d4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a25      	ldr	r2, [pc, #148]	; (8001258 <HAL_ADC_Start+0x1a0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d136      	bne.n	8001236 <HAL_ADC_Start+0x17e>
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_ADC_Start+0x194>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d130      	bne.n	8001236 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d129      	bne.n	8001236 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	e020      	b.n	8001236 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a15      	ldr	r2, [pc, #84]	; (8001250 <HAL_ADC_Start+0x198>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d11b      	bne.n	8001236 <HAL_ADC_Start+0x17e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d114      	bne.n	8001236 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	e00b      	b.n	8001236 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f043 0210 	orr.w	r2, r3, #16
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f043 0201 	orr.w	r2, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	20000000 	.word	0x20000000
 8001248:	431bde83 	.word	0x431bde83
 800124c:	40012300 	.word	0x40012300
 8001250:	40012000 	.word	0x40012000
 8001254:	40012100 	.word	0x40012100
 8001258:	40012200 	.word	0x40012200

0800125c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <HAL_ADC_Stop+0x16>
 800126e:	2302      	movs	r3, #2
 8001270:	e021      	b.n	80012b6 <HAL_ADC_Stop+0x5a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0201 	bic.w	r2, r2, #1
 8001288:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d109      	bne.n	80012ac <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012a0:	f023 0301 	bic.w	r3, r3, #1
 80012a4:	f043 0201 	orr.w	r2, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012de:	d113      	bne.n	8001308 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ee:	d10b      	bne.n	8001308 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f043 0220 	orr.w	r2, r3, #32
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e063      	b.n	80013d0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001308:	f7ff fe62 	bl	8000fd0 <HAL_GetTick>
 800130c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800130e:	e021      	b.n	8001354 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001316:	d01d      	beq.n	8001354 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d007      	beq.n	800132e <HAL_ADC_PollForConversion+0x6c>
 800131e:	f7ff fe57 	bl	8000fd0 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d212      	bcs.n	8001354 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b02      	cmp	r3, #2
 800133a:	d00b      	beq.n	8001354 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f043 0204 	orr.w	r2, r3, #4
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e03d      	b.n	80013d0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b02      	cmp	r3, #2
 8001360:	d1d6      	bne.n	8001310 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f06f 0212 	mvn.w	r2, #18
 800136a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d123      	bne.n	80013ce <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11f      	bne.n	80013ce <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001394:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001398:	2b00      	cmp	r3, #0
 800139a:	d006      	beq.n	80013aa <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d111      	bne.n	80013ce <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d105      	bne.n	80013ce <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f043 0201 	orr.w	r2, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x1c>
 800140c:	2302      	movs	r3, #2
 800140e:	e113      	b.n	8001638 <HAL_ADC_ConfigChannel+0x244>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b09      	cmp	r3, #9
 800141e:	d925      	bls.n	800146c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68d9      	ldr	r1, [r3, #12]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	3b1e      	subs	r3, #30
 8001436:	2207      	movs	r2, #7
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43da      	mvns	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	400a      	ands	r2, r1
 8001444:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68d9      	ldr	r1, [r3, #12]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	4618      	mov	r0, r3
 8001458:	4603      	mov	r3, r0
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4403      	add	r3, r0
 800145e:	3b1e      	subs	r3, #30
 8001460:	409a      	lsls	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	e022      	b.n	80014b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6919      	ldr	r1, [r3, #16]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	2207      	movs	r2, #7
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	400a      	ands	r2, r1
 800148e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6919      	ldr	r1, [r3, #16]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	4603      	mov	r3, r0
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4403      	add	r3, r0
 80014a8:	409a      	lsls	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d824      	bhi.n	8001504 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	3b05      	subs	r3, #5
 80014cc:	221f      	movs	r2, #31
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	400a      	ands	r2, r1
 80014da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	3b05      	subs	r3, #5
 80014f6:	fa00 f203 	lsl.w	r2, r0, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	635a      	str	r2, [r3, #52]	; 0x34
 8001502:	e04c      	b.n	800159e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b0c      	cmp	r3, #12
 800150a:	d824      	bhi.n	8001556 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	3b23      	subs	r3, #35	; 0x23
 800151e:	221f      	movs	r2, #31
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43da      	mvns	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	400a      	ands	r2, r1
 800152c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	4618      	mov	r0, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	3b23      	subs	r3, #35	; 0x23
 8001548:	fa00 f203 	lsl.w	r2, r0, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	631a      	str	r2, [r3, #48]	; 0x30
 8001554:	e023      	b.n	800159e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	3b41      	subs	r3, #65	; 0x41
 8001568:	221f      	movs	r2, #31
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	400a      	ands	r2, r1
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	3b41      	subs	r3, #65	; 0x41
 8001592:	fa00 f203 	lsl.w	r2, r0, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <HAL_ADC_ConfigChannel+0x250>)
 80015a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a28      	ldr	r2, [pc, #160]	; (8001648 <HAL_ADC_ConfigChannel+0x254>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d10f      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x1d8>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b12      	cmp	r3, #18
 80015b2:	d10b      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a1d      	ldr	r2, [pc, #116]	; (8001648 <HAL_ADC_ConfigChannel+0x254>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d12b      	bne.n	800162e <HAL_ADC_ConfigChannel+0x23a>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1c      	ldr	r2, [pc, #112]	; (800164c <HAL_ADC_ConfigChannel+0x258>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d003      	beq.n	80015e8 <HAL_ADC_ConfigChannel+0x1f4>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b11      	cmp	r3, #17
 80015e6:	d122      	bne.n	800162e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a11      	ldr	r2, [pc, #68]	; (800164c <HAL_ADC_ConfigChannel+0x258>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d111      	bne.n	800162e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_ADC_ConfigChannel+0x25c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a11      	ldr	r2, [pc, #68]	; (8001654 <HAL_ADC_ConfigChannel+0x260>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	0c9a      	lsrs	r2, r3, #18
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001620:	e002      	b.n	8001628 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	3b01      	subs	r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f9      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40012300 	.word	0x40012300
 8001648:	40012000 	.word	0x40012000
 800164c:	10000012 	.word	0x10000012
 8001650:	20000000 	.word	0x20000000
 8001654:	431bde83 	.word	0x431bde83

08001658 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001660:	4b79      	ldr	r3, [pc, #484]	; (8001848 <ADC_Init+0x1f0>)
 8001662:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	431a      	orrs	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800168c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6859      	ldr	r1, [r3, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	021a      	lsls	r2, r3, #8
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6859      	ldr	r1, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6899      	ldr	r1, [r3, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	4a58      	ldr	r2, [pc, #352]	; (800184c <ADC_Init+0x1f4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d022      	beq.n	8001736 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6899      	ldr	r1, [r3, #8]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001720:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6899      	ldr	r1, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	e00f      	b.n	8001756 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001744:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001754:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0202 	bic.w	r2, r2, #2
 8001764:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6899      	ldr	r1, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7e1b      	ldrb	r3, [r3, #24]
 8001770:	005a      	lsls	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d01b      	beq.n	80017bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001792:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6859      	ldr	r1, [r3, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	3b01      	subs	r3, #1
 80017b0:	035a      	lsls	r2, r3, #13
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	e007      	b.n	80017cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	051a      	lsls	r2, r3, #20
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001800:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6899      	ldr	r1, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800180e:	025a      	lsls	r2, r3, #9
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001826:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6899      	ldr	r1, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	029a      	lsls	r2, r3, #10
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	609a      	str	r2, [r3, #8]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	40012300 	.word	0x40012300
 800184c:	0f000001 	.word	0x0f000001

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4907      	ldr	r1, [pc, #28]	; (80018ec <__NVIC_EnableIRQ+0x38>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	; (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff8e 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff29 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a18:	f7ff ff3e 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f7ff ff8e 	bl	8001944 <NVIC_EncodePriority>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff5d 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff31 	bl	80018b4 <__NVIC_EnableIRQ>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffa2 	bl	80019ac <SysTick_Config>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e014      	b.n	8001aae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	791b      	ldrb	r3, [r3, #4]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff f811 	bl	8000abc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	795b      	ldrb	r3, [r3, #5]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_DAC_Start+0x16>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e040      	b.n	8001b4e <HAL_DAC_Start+0x98>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6819      	ldr	r1, [r3, #0]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10f      	bne.n	8001b16 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001b00:	2b3c      	cmp	r3, #60	; 0x3c
 8001b02:	d11d      	bne.n	8001b40 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	e014      	b.n	8001b40 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	213c      	movs	r1, #60	; 0x3c
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d107      	bne.n	8001b40 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0202 	orr.w	r2, r2, #2
 8001b3e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b087      	sub	sp, #28
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3308      	adds	r3, #8
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	e004      	b.n	8001b8e <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	3314      	adds	r3, #20
 8001b8c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	461a      	mov	r2, r3
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	795b      	ldrb	r3, [r3, #5]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_DAC_ConfigChannel+0x18>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e03c      	b.n	8001c36 <HAL_DAC_ConfigChannel+0x92>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	4013      	ands	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6819      	ldr	r1, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f003 0310 	and.w	r3, r3, #16
 8001c18:	22c0      	movs	r2, #192	; 0xc0
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	400a      	ands	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff f9be 	bl	8000fd0 <HAL_GetTick>
 8001c54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d008      	beq.n	8001c74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2280      	movs	r2, #128	; 0x80
 8001c66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e052      	b.n	8001d1a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0216 	bic.w	r2, r2, #22
 8001c82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695a      	ldr	r2, [r3, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d103      	bne.n	8001ca4 <HAL_DMA_Abort+0x62>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d007      	beq.n	8001cb4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0208 	bic.w	r2, r2, #8
 8001cb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0201 	bic.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc4:	e013      	b.n	8001cee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cc6:	f7ff f983 	bl	8000fd0 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b05      	cmp	r3, #5
 8001cd2:	d90c      	bls.n	8001cee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2203      	movs	r2, #3
 8001cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e015      	b.n	8001d1a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1e4      	bne.n	8001cc6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	223f      	movs	r2, #63	; 0x3f
 8001d02:	409a      	lsls	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d004      	beq.n	8001d40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2280      	movs	r2, #128	; 0x80
 8001d3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e00c      	b.n	8001d5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2205      	movs	r2, #5
 8001d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0201 	bic.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e06c      	b.n	8001e54 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d106      	bne.n	8001d92 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2223      	movs	r2, #35	; 0x23
 8001d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7fe fed9 	bl	8000b44 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	4b31      	ldr	r3, [pc, #196]	; (8001e5c <HAL_ETH_Init+0xf4>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	4a30      	ldr	r2, [pc, #192]	; (8001e5c <HAL_ETH_Init+0xf4>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da0:	6453      	str	r3, [r2, #68]	; 0x44
 8001da2:	4b2e      	ldr	r3, [pc, #184]	; (8001e5c <HAL_ETH_Init+0xf4>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001dae:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <HAL_ETH_Init+0xf8>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4a2b      	ldr	r2, [pc, #172]	; (8001e60 <HAL_ETH_Init+0xf8>)
 8001db4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001db8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001dba:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <HAL_ETH_Init+0xf8>)
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	4927      	ldr	r1, [pc, #156]	; (8001e60 <HAL_ETH_Init+0xf8>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001dc8:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <HAL_ETH_Init+0xf8>)
 8001dca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001de2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de4:	f7ff f8f4 	bl	8000fd0 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001dea:	e011      	b.n	8001e10 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001dec:	f7ff f8f0 	bl	8000fd0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001dfa:	d909      	bls.n	8001e10 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2204      	movs	r2, #4
 8001e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	22e0      	movs	r2, #224	; 0xe0
 8001e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e021      	b.n	8001e54 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1e4      	bne.n	8001dec <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f958 	bl	80020d8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f9ff 	bl	800222c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fa55 	bl	80022de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f9bd 	bl	80021bc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40013800 	.word	0x40013800

08001e64 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4b51      	ldr	r3, [pc, #324]	; (8001fc0 <ETH_SetMACConfig+0x15c>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	7c1b      	ldrb	r3, [r3, #16]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d102      	bne.n	8001e8c <ETH_SetMACConfig+0x28>
 8001e86:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e8a:	e000      	b.n	8001e8e <ETH_SetMACConfig+0x2a>
 8001e8c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	7c5b      	ldrb	r3, [r3, #17]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <ETH_SetMACConfig+0x38>
 8001e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e9a:	e000      	b.n	8001e9e <ETH_SetMACConfig+0x3a>
 8001e9c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e9e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ea4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	7fdb      	ldrb	r3, [r3, #31]
 8001eaa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001eac:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001eb2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	7f92      	ldrb	r2, [r2, #30]
 8001eb8:	2a00      	cmp	r2, #0
 8001eba:	d102      	bne.n	8001ec2 <ETH_SetMACConfig+0x5e>
 8001ebc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ec0:	e000      	b.n	8001ec4 <ETH_SetMACConfig+0x60>
 8001ec2:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ec4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	7f1b      	ldrb	r3, [r3, #28]
 8001eca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ecc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ed2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	791b      	ldrb	r3, [r3, #4]
 8001ed8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001eda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ee2:	2a00      	cmp	r2, #0
 8001ee4:	d102      	bne.n	8001eec <ETH_SetMACConfig+0x88>
 8001ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eea:	e000      	b.n	8001eee <ETH_SetMACConfig+0x8a>
 8001eec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001eee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	7bdb      	ldrb	r3, [r3, #15]
 8001ef4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ef6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001efc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f04:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f06:	4313      	orrs	r3, r2
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f7ff f862 	bl	8000fe8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f42:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f4a:	2a00      	cmp	r2, #0
 8001f4c:	d101      	bne.n	8001f52 <ETH_SetMACConfig+0xee>
 8001f4e:	2280      	movs	r2, #128	; 0x80
 8001f50:	e000      	b.n	8001f54 <ETH_SetMACConfig+0xf0>
 8001f52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f54:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001f62:	2a01      	cmp	r2, #1
 8001f64:	d101      	bne.n	8001f6a <ETH_SetMACConfig+0x106>
 8001f66:	2208      	movs	r2, #8
 8001f68:	e000      	b.n	8001f6c <ETH_SetMACConfig+0x108>
 8001f6a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f6c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001f74:	2a01      	cmp	r2, #1
 8001f76:	d101      	bne.n	8001f7c <ETH_SetMACConfig+0x118>
 8001f78:	2204      	movs	r2, #4
 8001f7a:	e000      	b.n	8001f7e <ETH_SetMACConfig+0x11a>
 8001f7c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001f86:	2a01      	cmp	r2, #1
 8001f88:	d101      	bne.n	8001f8e <ETH_SetMACConfig+0x12a>
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	e000      	b.n	8001f90 <ETH_SetMACConfig+0x12c>
 8001f8e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f90:	4313      	orrs	r3, r2
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f7ff f81d 	bl	8000fe8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	619a      	str	r2, [r3, #24]
}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	ff20810f 	.word	0xff20810f

08001fc4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <ETH_SetDMAConfig+0x110>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	7b1b      	ldrb	r3, [r3, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d102      	bne.n	8001ff0 <ETH_SetDMAConfig+0x2c>
 8001fea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fee:	e000      	b.n	8001ff2 <ETH_SetDMAConfig+0x2e>
 8001ff0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	7b5b      	ldrb	r3, [r3, #13]
 8001ff6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ff8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	7f52      	ldrb	r2, [r2, #29]
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d102      	bne.n	8002008 <ETH_SetDMAConfig+0x44>
 8002002:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002006:	e000      	b.n	800200a <ETH_SetDMAConfig+0x46>
 8002008:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800200a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	7b9b      	ldrb	r3, [r3, #14]
 8002010:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002012:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002018:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	7f1b      	ldrb	r3, [r3, #28]
 800201e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002020:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	7f9b      	ldrb	r3, [r3, #30]
 8002026:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002028:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800202e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002036:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002038:	4313      	orrs	r3, r2
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002048:	461a      	mov	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800205a:	2001      	movs	r0, #1
 800205c:	f7fe ffc4 	bl	8000fe8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002068:	461a      	mov	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	791b      	ldrb	r3, [r3, #4]
 8002072:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002078:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800207e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002084:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800208c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800208e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002096:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800209c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020aa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f7fe ff95 	bl	8000fe8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	f8de3f23 	.word	0xf8de3f23

080020d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b0a6      	sub	sp, #152	; 0x98
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80020e0:	2301      	movs	r3, #1
 80020e2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80020ec:	2300      	movs	r3, #0
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002102:	2301      	movs	r3, #1
 8002104:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002114:	2300      	movs	r3, #0
 8002116:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800211e:	2300      	movs	r3, #0
 8002120:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800213a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800213e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002144:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800214c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002150:	4619      	mov	r1, r3
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff fe86 	bl	8001e64 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002158:	2301      	movs	r3, #1
 800215a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800215c:	2301      	movs	r3, #1
 800215e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002160:	2301      	movs	r3, #1
 8002162:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002166:	2301      	movs	r3, #1
 8002168:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800217a:	2300      	movs	r3, #0
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800217e:	2301      	movs	r3, #1
 8002180:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002184:	2301      	movs	r3, #1
 8002186:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800218c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800218e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002192:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002198:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800219a:	2301      	movs	r3, #1
 800219c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021a8:	f107 0308 	add.w	r3, r7, #8
 80021ac:	4619      	mov	r1, r3
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ff08 	bl	8001fc4 <ETH_SetDMAConfig>
}
 80021b4:	bf00      	nop
 80021b6:	3798      	adds	r7, #152	; 0x98
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3305      	adds	r3, #5
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	3204      	adds	r2, #4
 80021d4:	7812      	ldrb	r2, [r2, #0]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <ETH_MACAddressConfig+0x68>)
 80021de:	4413      	add	r3, r2
 80021e0:	461a      	mov	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3303      	adds	r3, #3
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	061a      	lsls	r2, r3, #24
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3302      	adds	r3, #2
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	041b      	lsls	r3, r3, #16
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3301      	adds	r3, #1
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	4313      	orrs	r3, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	7812      	ldrb	r2, [r2, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <ETH_MACAddressConfig+0x6c>)
 800220e:	4413      	add	r3, r2
 8002210:	461a      	mov	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	6013      	str	r3, [r2, #0]
}
 8002216:	bf00      	nop
 8002218:	371c      	adds	r7, #28
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40028040 	.word	0x40028040
 8002228:	40028044 	.word	0x40028044

0800222c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e03e      	b.n	80022b8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68d9      	ldr	r1, [r3, #12]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	440b      	add	r3, r1
 800224a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2200      	movs	r2, #0
 8002256:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2200      	movs	r2, #0
 8002262:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	3206      	adds	r2, #6
 800226c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d80c      	bhi.n	800229c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68d9      	ldr	r1, [r3, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	440b      	add	r3, r1
 8002294:	461a      	mov	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	e004      	b.n	80022a6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	461a      	mov	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3301      	adds	r3, #1
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d9bd      	bls.n	800223a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d0:	611a      	str	r2, [r3, #16]
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80022de:	b480      	push	{r7}
 80022e0:	b085      	sub	sp, #20
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	e046      	b.n	800237a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6919      	ldr	r1, [r3, #16]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2200      	movs	r2, #0
 8002308:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2200      	movs	r2, #0
 8002314:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2200      	movs	r2, #0
 800231a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2200      	movs	r2, #0
 8002320:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002328:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002330:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	3212      	adds	r2, #18
 8002346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d80c      	bhi.n	800236a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6919      	ldr	r1, [r3, #16]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	440b      	add	r3, r1
 8002362:	461a      	mov	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	60da      	str	r2, [r3, #12]
 8002368:	e004      	b.n	8002374 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	461a      	mov	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	3301      	adds	r3, #1
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d9b5      	bls.n	80022ec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023aa:	60da      	str	r2, [r3, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	; 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	e177      	b.n	80026c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023d4:	2201      	movs	r2, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	f040 8166 	bne.w	80026be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d005      	beq.n	800240a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002406:	2b02      	cmp	r3, #2
 8002408:	d130      	bne.n	800246c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	2203      	movs	r2, #3
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002440:	2201      	movs	r2, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 0201 	and.w	r2, r3, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b03      	cmp	r3, #3
 8002476:	d017      	beq.n	80024a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d123      	bne.n	80024fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	08da      	lsrs	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3208      	adds	r2, #8
 80024bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	220f      	movs	r2, #15
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	08da      	lsrs	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3208      	adds	r2, #8
 80024f6:	69b9      	ldr	r1, [r7, #24]
 80024f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0203 	and.w	r2, r3, #3
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80c0 	beq.w	80026be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	4b66      	ldr	r3, [pc, #408]	; (80026dc <HAL_GPIO_Init+0x324>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	4a65      	ldr	r2, [pc, #404]	; (80026dc <HAL_GPIO_Init+0x324>)
 8002548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800254c:	6453      	str	r3, [r2, #68]	; 0x44
 800254e:	4b63      	ldr	r3, [pc, #396]	; (80026dc <HAL_GPIO_Init+0x324>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255a:	4a61      	ldr	r2, [pc, #388]	; (80026e0 <HAL_GPIO_Init+0x328>)
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	3302      	adds	r3, #2
 8002562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	220f      	movs	r2, #15
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a58      	ldr	r2, [pc, #352]	; (80026e4 <HAL_GPIO_Init+0x32c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d037      	beq.n	80025f6 <HAL_GPIO_Init+0x23e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a57      	ldr	r2, [pc, #348]	; (80026e8 <HAL_GPIO_Init+0x330>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d031      	beq.n	80025f2 <HAL_GPIO_Init+0x23a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a56      	ldr	r2, [pc, #344]	; (80026ec <HAL_GPIO_Init+0x334>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d02b      	beq.n	80025ee <HAL_GPIO_Init+0x236>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a55      	ldr	r2, [pc, #340]	; (80026f0 <HAL_GPIO_Init+0x338>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d025      	beq.n	80025ea <HAL_GPIO_Init+0x232>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a54      	ldr	r2, [pc, #336]	; (80026f4 <HAL_GPIO_Init+0x33c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01f      	beq.n	80025e6 <HAL_GPIO_Init+0x22e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a53      	ldr	r2, [pc, #332]	; (80026f8 <HAL_GPIO_Init+0x340>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d019      	beq.n	80025e2 <HAL_GPIO_Init+0x22a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a52      	ldr	r2, [pc, #328]	; (80026fc <HAL_GPIO_Init+0x344>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <HAL_GPIO_Init+0x226>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a51      	ldr	r2, [pc, #324]	; (8002700 <HAL_GPIO_Init+0x348>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00d      	beq.n	80025da <HAL_GPIO_Init+0x222>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a50      	ldr	r2, [pc, #320]	; (8002704 <HAL_GPIO_Init+0x34c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d007      	beq.n	80025d6 <HAL_GPIO_Init+0x21e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4f      	ldr	r2, [pc, #316]	; (8002708 <HAL_GPIO_Init+0x350>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <HAL_GPIO_Init+0x21a>
 80025ce:	2309      	movs	r3, #9
 80025d0:	e012      	b.n	80025f8 <HAL_GPIO_Init+0x240>
 80025d2:	230a      	movs	r3, #10
 80025d4:	e010      	b.n	80025f8 <HAL_GPIO_Init+0x240>
 80025d6:	2308      	movs	r3, #8
 80025d8:	e00e      	b.n	80025f8 <HAL_GPIO_Init+0x240>
 80025da:	2307      	movs	r3, #7
 80025dc:	e00c      	b.n	80025f8 <HAL_GPIO_Init+0x240>
 80025de:	2306      	movs	r3, #6
 80025e0:	e00a      	b.n	80025f8 <HAL_GPIO_Init+0x240>
 80025e2:	2305      	movs	r3, #5
 80025e4:	e008      	b.n	80025f8 <HAL_GPIO_Init+0x240>
 80025e6:	2304      	movs	r3, #4
 80025e8:	e006      	b.n	80025f8 <HAL_GPIO_Init+0x240>
 80025ea:	2303      	movs	r3, #3
 80025ec:	e004      	b.n	80025f8 <HAL_GPIO_Init+0x240>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e002      	b.n	80025f8 <HAL_GPIO_Init+0x240>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_GPIO_Init+0x240>
 80025f6:	2300      	movs	r3, #0
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	f002 0203 	and.w	r2, r2, #3
 80025fe:	0092      	lsls	r2, r2, #2
 8002600:	4093      	lsls	r3, r2
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002608:	4935      	ldr	r1, [pc, #212]	; (80026e0 <HAL_GPIO_Init+0x328>)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	089b      	lsrs	r3, r3, #2
 800260e:	3302      	adds	r3, #2
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002616:	4b3d      	ldr	r3, [pc, #244]	; (800270c <HAL_GPIO_Init+0x354>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263a:	4a34      	ldr	r2, [pc, #208]	; (800270c <HAL_GPIO_Init+0x354>)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002640:	4b32      	ldr	r3, [pc, #200]	; (800270c <HAL_GPIO_Init+0x354>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002664:	4a29      	ldr	r2, [pc, #164]	; (800270c <HAL_GPIO_Init+0x354>)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800266a:	4b28      	ldr	r3, [pc, #160]	; (800270c <HAL_GPIO_Init+0x354>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800268e:	4a1f      	ldr	r2, [pc, #124]	; (800270c <HAL_GPIO_Init+0x354>)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <HAL_GPIO_Init+0x354>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026b8:	4a14      	ldr	r2, [pc, #80]	; (800270c <HAL_GPIO_Init+0x354>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3301      	adds	r3, #1
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	2b0f      	cmp	r3, #15
 80026c8:	f67f ae84 	bls.w	80023d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40013800 	.word	0x40013800
 80026e4:	40020000 	.word	0x40020000
 80026e8:	40020400 	.word	0x40020400
 80026ec:	40020800 	.word	0x40020800
 80026f0:	40020c00 	.word	0x40020c00
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40021400 	.word	0x40021400
 80026fc:	40021800 	.word	0x40021800
 8002700:	40021c00 	.word	0x40021c00
 8002704:	40022000 	.word	0x40022000
 8002708:	40022400 	.word	0x40022400
 800270c:	40013c00 	.word	0x40013c00

08002710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
 800271c:	4613      	mov	r3, r2
 800271e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002720:	787b      	ldrb	r3, [r7, #1]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800272c:	e003      	b.n	8002736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800272e:	887b      	ldrh	r3, [r7, #2]
 8002730:	041a      	lsls	r2, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	619a      	str	r2, [r3, #24]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002742:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002744:	b08f      	sub	sp, #60	; 0x3c
 8002746:	af0a      	add	r7, sp, #40	; 0x28
 8002748:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e10f      	b.n	8002974 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fe fafe 	bl	8000d70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2203      	movs	r2, #3
 8002778:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f001 fcff 	bl	8004196 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	687e      	ldr	r6, [r7, #4]
 80027a0:	466d      	mov	r5, sp
 80027a2:	f106 0410 	add.w	r4, r6, #16
 80027a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80027b6:	1d33      	adds	r3, r6, #4
 80027b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ba:	6838      	ldr	r0, [r7, #0]
 80027bc:	f001 fc8a 	bl	80040d4 <USB_CoreInit>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2202      	movs	r2, #2
 80027ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0d0      	b.n	8002974 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2100      	movs	r1, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f001 fced 	bl	80041b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027de:	2300      	movs	r3, #0
 80027e0:	73fb      	strb	r3, [r7, #15]
 80027e2:	e04a      	b.n	800287a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	333d      	adds	r3, #61	; 0x3d
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	333c      	adds	r3, #60	; 0x3c
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	b298      	uxth	r0, r3
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	3344      	adds	r3, #68	; 0x44
 8002820:	4602      	mov	r2, r0
 8002822:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	3340      	adds	r3, #64	; 0x40
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	3348      	adds	r3, #72	; 0x48
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	334c      	adds	r3, #76	; 0x4c
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002860:	7bfa      	ldrb	r2, [r7, #15]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	3354      	adds	r3, #84	; 0x54
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	3301      	adds	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	429a      	cmp	r2, r3
 8002882:	d3af      	bcc.n	80027e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	e044      	b.n	8002914 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800288a:	7bfa      	ldrb	r2, [r7, #15]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	3301      	adds	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	429a      	cmp	r2, r3
 800291c:	d3b5      	bcc.n	800288a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	687e      	ldr	r6, [r7, #4]
 8002926:	466d      	mov	r5, sp
 8002928:	f106 0410 	add.w	r4, r6, #16
 800292c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800292e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002934:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002938:	e885 0003 	stmia.w	r5, {r0, r1}
 800293c:	1d33      	adds	r3, r6, #4
 800293e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002940:	6838      	ldr	r0, [r7, #0]
 8002942:	f001 fc85 	bl	8004250 <USB_DevInit>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e00d      	b.n	8002974 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f001 fe50 	bl	8004612 <USB_DevDisconnect>

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800297c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e267      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d075      	beq.n	8002a86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800299a:	4b88      	ldr	r3, [pc, #544]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d00c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a6:	4b85      	ldr	r3, [pc, #532]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d112      	bne.n	80029d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b2:	4b82      	ldr	r3, [pc, #520]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029be:	d10b      	bne.n	80029d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	4b7e      	ldr	r3, [pc, #504]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d05b      	beq.n	8002a84 <HAL_RCC_OscConfig+0x108>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d157      	bne.n	8002a84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e242      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e0:	d106      	bne.n	80029f0 <HAL_RCC_OscConfig+0x74>
 80029e2:	4b76      	ldr	r3, [pc, #472]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a75      	ldr	r2, [pc, #468]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e01d      	b.n	8002a2c <HAL_RCC_OscConfig+0xb0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x98>
 80029fa:	4b70      	ldr	r3, [pc, #448]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a6f      	ldr	r2, [pc, #444]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b6d      	ldr	r3, [pc, #436]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a6c      	ldr	r2, [pc, #432]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e00b      	b.n	8002a2c <HAL_RCC_OscConfig+0xb0>
 8002a14:	4b69      	ldr	r3, [pc, #420]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a68      	ldr	r2, [pc, #416]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b66      	ldr	r3, [pc, #408]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a65      	ldr	r2, [pc, #404]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d013      	beq.n	8002a5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fe facc 	bl	8000fd0 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fe fac8 	bl	8000fd0 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e207      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	4b5b      	ldr	r3, [pc, #364]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0xc0>
 8002a5a:	e014      	b.n	8002a86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fab8 	bl	8000fd0 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a64:	f7fe fab4 	bl	8000fd0 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e1f3      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	4b51      	ldr	r3, [pc, #324]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0xe8>
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d063      	beq.n	8002b5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a92:	4b4a      	ldr	r3, [pc, #296]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9e:	4b47      	ldr	r3, [pc, #284]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d11c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aaa:	4b44      	ldr	r3, [pc, #272]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d116      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	4b41      	ldr	r3, [pc, #260]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_RCC_OscConfig+0x152>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d001      	beq.n	8002ace <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e1c7      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ace:	4b3b      	ldr	r3, [pc, #236]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4937      	ldr	r1, [pc, #220]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	e03a      	b.n	8002b5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d020      	beq.n	8002b2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aec:	4b34      	ldr	r3, [pc, #208]	; (8002bc0 <HAL_RCC_OscConfig+0x244>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7fe fa6d 	bl	8000fd0 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afa:	f7fe fa69 	bl	8000fd0 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e1a8      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b18:	4b28      	ldr	r3, [pc, #160]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4925      	ldr	r1, [pc, #148]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]
 8002b2c:	e015      	b.n	8002b5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2e:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <HAL_RCC_OscConfig+0x244>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fe fa4c 	bl	8000fd0 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b3c:	f7fe fa48 	bl	8000fd0 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e187      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d036      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d016      	beq.n	8002b9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <HAL_RCC_OscConfig+0x248>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7fe fa2c 	bl	8000fd0 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b7c:	f7fe fa28 	bl	8000fd0 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e167      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCC_OscConfig+0x240>)
 8002b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x200>
 8002b9a:	e01b      	b.n	8002bd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b9c:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <HAL_RCC_OscConfig+0x248>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fa15 	bl	8000fd0 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba8:	e00e      	b.n	8002bc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002baa:	f7fe fa11 	bl	8000fd0 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d907      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e150      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	42470000 	.word	0x42470000
 8002bc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc8:	4b88      	ldr	r3, [pc, #544]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ea      	bne.n	8002baa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8097 	beq.w	8002d10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be6:	4b81      	ldr	r3, [pc, #516]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10f      	bne.n	8002c12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	4b7d      	ldr	r3, [pc, #500]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	4a7c      	ldr	r2, [pc, #496]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40
 8002c02:	4b7a      	ldr	r3, [pc, #488]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c12:	4b77      	ldr	r3, [pc, #476]	; (8002df0 <HAL_RCC_OscConfig+0x474>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d118      	bne.n	8002c50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c1e:	4b74      	ldr	r3, [pc, #464]	; (8002df0 <HAL_RCC_OscConfig+0x474>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a73      	ldr	r2, [pc, #460]	; (8002df0 <HAL_RCC_OscConfig+0x474>)
 8002c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2a:	f7fe f9d1 	bl	8000fd0 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c32:	f7fe f9cd 	bl	8000fd0 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e10c      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c44:	4b6a      	ldr	r3, [pc, #424]	; (8002df0 <HAL_RCC_OscConfig+0x474>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0f0      	beq.n	8002c32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d106      	bne.n	8002c66 <HAL_RCC_OscConfig+0x2ea>
 8002c58:	4b64      	ldr	r3, [pc, #400]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	4a63      	ldr	r2, [pc, #396]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6713      	str	r3, [r2, #112]	; 0x70
 8002c64:	e01c      	b.n	8002ca0 <HAL_RCC_OscConfig+0x324>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b05      	cmp	r3, #5
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x30c>
 8002c6e:	4b5f      	ldr	r3, [pc, #380]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	4a5e      	ldr	r2, [pc, #376]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c74:	f043 0304 	orr.w	r3, r3, #4
 8002c78:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7a:	4b5c      	ldr	r3, [pc, #368]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	4a5b      	ldr	r2, [pc, #364]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6713      	str	r3, [r2, #112]	; 0x70
 8002c86:	e00b      	b.n	8002ca0 <HAL_RCC_OscConfig+0x324>
 8002c88:	4b58      	ldr	r3, [pc, #352]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8c:	4a57      	ldr	r2, [pc, #348]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	6713      	str	r3, [r2, #112]	; 0x70
 8002c94:	4b55      	ldr	r3, [pc, #340]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	4a54      	ldr	r2, [pc, #336]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002c9a:	f023 0304 	bic.w	r3, r3, #4
 8002c9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d015      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7fe f992 	bl	8000fd0 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb0:	f7fe f98e 	bl	8000fd0 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e0cb      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc6:	4b49      	ldr	r3, [pc, #292]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0ee      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x334>
 8002cd2:	e014      	b.n	8002cfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd4:	f7fe f97c 	bl	8000fd0 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7fe f978 	bl	8000fd0 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e0b5      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf2:	4b3e      	ldr	r3, [pc, #248]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1ee      	bne.n	8002cdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d105      	bne.n	8002d10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d04:	4b39      	ldr	r3, [pc, #228]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	4a38      	ldr	r2, [pc, #224]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80a1 	beq.w	8002e5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d1a:	4b34      	ldr	r3, [pc, #208]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d05c      	beq.n	8002de0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d141      	bne.n	8002db2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2e:	4b31      	ldr	r3, [pc, #196]	; (8002df4 <HAL_RCC_OscConfig+0x478>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7fe f94c 	bl	8000fd0 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fe f948 	bl	8000fd0 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e087      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4e:	4b27      	ldr	r3, [pc, #156]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69da      	ldr	r2, [r3, #28]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	019b      	lsls	r3, r3, #6
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	085b      	lsrs	r3, r3, #1
 8002d72:	3b01      	subs	r3, #1
 8002d74:	041b      	lsls	r3, r3, #16
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	061b      	lsls	r3, r3, #24
 8002d7e:	491b      	ldr	r1, [pc, #108]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <HAL_RCC_OscConfig+0x478>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7fe f921 	bl	8000fd0 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fe f91d 	bl	8000fd0 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e05c      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x416>
 8002db0:	e054      	b.n	8002e5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <HAL_RCC_OscConfig+0x478>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fe f90a 	bl	8000fd0 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fe f906 	bl	8000fd0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e045      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_RCC_OscConfig+0x470>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x444>
 8002dde:	e03d      	b.n	8002e5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d107      	bne.n	8002df8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e038      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40007000 	.word	0x40007000
 8002df4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002df8:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <HAL_RCC_OscConfig+0x4ec>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d028      	beq.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d121      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d11a      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e28:	4013      	ands	r3, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d111      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	3b01      	subs	r3, #1
 8002e42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d107      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800

08002e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0cc      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e80:	4b68      	ldr	r3, [pc, #416]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d90c      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b65      	ldr	r3, [pc, #404]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b63      	ldr	r3, [pc, #396]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0b8      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec0:	4b59      	ldr	r3, [pc, #356]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	4a58      	ldr	r2, [pc, #352]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed8:	4b53      	ldr	r3, [pc, #332]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4a52      	ldr	r2, [pc, #328]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ee2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee4:	4b50      	ldr	r3, [pc, #320]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	494d      	ldr	r1, [pc, #308]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d044      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	4b47      	ldr	r3, [pc, #284]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d119      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e07f      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d003      	beq.n	8002f2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d107      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2a:	4b3f      	ldr	r3, [pc, #252]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e06f      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3a:	4b3b      	ldr	r3, [pc, #236]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e067      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f4a:	4b37      	ldr	r3, [pc, #220]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f023 0203 	bic.w	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4934      	ldr	r1, [pc, #208]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f5c:	f7fe f838 	bl	8000fd0 <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f64:	f7fe f834 	bl	8000fd0 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e04f      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 020c 	and.w	r2, r3, #12
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d1eb      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b25      	ldr	r3, [pc, #148]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d20c      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b22      	ldr	r3, [pc, #136]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b20      	ldr	r3, [pc, #128]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e032      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4916      	ldr	r1, [pc, #88]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	490e      	ldr	r1, [pc, #56]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ff2:	f000 f821 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	490a      	ldr	r1, [pc, #40]	; (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	5ccb      	ldrb	r3, [r1, r3]
 8003006:	fa22 f303 	lsr.w	r3, r2, r3
 800300a:	4a09      	ldr	r2, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_RCC_ClockConfig+0x1c8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd ff98 	bl	8000f48 <HAL_InitTick>

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40023c00 	.word	0x40023c00
 8003028:	40023800 	.word	0x40023800
 800302c:	08004748 	.word	0x08004748
 8003030:	20000000 	.word	0x20000000
 8003034:	20000004 	.word	0x20000004

08003038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800303c:	b094      	sub	sp, #80	; 0x50
 800303e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	647b      	str	r3, [r7, #68]	; 0x44
 8003044:	2300      	movs	r3, #0
 8003046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003048:	2300      	movs	r3, #0
 800304a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003050:	4b79      	ldr	r3, [pc, #484]	; (8003238 <HAL_RCC_GetSysClockFreq+0x200>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b08      	cmp	r3, #8
 800305a:	d00d      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0x40>
 800305c:	2b08      	cmp	r3, #8
 800305e:	f200 80e1 	bhi.w	8003224 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0x34>
 8003066:	2b04      	cmp	r3, #4
 8003068:	d003      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0x3a>
 800306a:	e0db      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800306c:	4b73      	ldr	r3, [pc, #460]	; (800323c <HAL_RCC_GetSysClockFreq+0x204>)
 800306e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003070:	e0db      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003072:	4b73      	ldr	r3, [pc, #460]	; (8003240 <HAL_RCC_GetSysClockFreq+0x208>)
 8003074:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003076:	e0d8      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003078:	4b6f      	ldr	r3, [pc, #444]	; (8003238 <HAL_RCC_GetSysClockFreq+0x200>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003080:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003082:	4b6d      	ldr	r3, [pc, #436]	; (8003238 <HAL_RCC_GetSysClockFreq+0x200>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d063      	beq.n	8003156 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308e:	4b6a      	ldr	r3, [pc, #424]	; (8003238 <HAL_RCC_GetSysClockFreq+0x200>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	099b      	lsrs	r3, r3, #6
 8003094:	2200      	movs	r2, #0
 8003096:	63bb      	str	r3, [r7, #56]	; 0x38
 8003098:	63fa      	str	r2, [r7, #60]	; 0x3c
 800309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a0:	633b      	str	r3, [r7, #48]	; 0x30
 80030a2:	2300      	movs	r3, #0
 80030a4:	637b      	str	r3, [r7, #52]	; 0x34
 80030a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030aa:	4622      	mov	r2, r4
 80030ac:	462b      	mov	r3, r5
 80030ae:	f04f 0000 	mov.w	r0, #0
 80030b2:	f04f 0100 	mov.w	r1, #0
 80030b6:	0159      	lsls	r1, r3, #5
 80030b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030bc:	0150      	lsls	r0, r2, #5
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4621      	mov	r1, r4
 80030c4:	1a51      	subs	r1, r2, r1
 80030c6:	6139      	str	r1, [r7, #16]
 80030c8:	4629      	mov	r1, r5
 80030ca:	eb63 0301 	sbc.w	r3, r3, r1
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030dc:	4659      	mov	r1, fp
 80030de:	018b      	lsls	r3, r1, #6
 80030e0:	4651      	mov	r1, sl
 80030e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030e6:	4651      	mov	r1, sl
 80030e8:	018a      	lsls	r2, r1, #6
 80030ea:	4651      	mov	r1, sl
 80030ec:	ebb2 0801 	subs.w	r8, r2, r1
 80030f0:	4659      	mov	r1, fp
 80030f2:	eb63 0901 	sbc.w	r9, r3, r1
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800310a:	4690      	mov	r8, r2
 800310c:	4699      	mov	r9, r3
 800310e:	4623      	mov	r3, r4
 8003110:	eb18 0303 	adds.w	r3, r8, r3
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	462b      	mov	r3, r5
 8003118:	eb49 0303 	adc.w	r3, r9, r3
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800312a:	4629      	mov	r1, r5
 800312c:	024b      	lsls	r3, r1, #9
 800312e:	4621      	mov	r1, r4
 8003130:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003134:	4621      	mov	r1, r4
 8003136:	024a      	lsls	r2, r1, #9
 8003138:	4610      	mov	r0, r2
 800313a:	4619      	mov	r1, r3
 800313c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800313e:	2200      	movs	r2, #0
 8003140:	62bb      	str	r3, [r7, #40]	; 0x28
 8003142:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003144:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003148:	f7fd f850 	bl	80001ec <__aeabi_uldivmod>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4613      	mov	r3, r2
 8003152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003154:	e058      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003156:	4b38      	ldr	r3, [pc, #224]	; (8003238 <HAL_RCC_GetSysClockFreq+0x200>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	099b      	lsrs	r3, r3, #6
 800315c:	2200      	movs	r2, #0
 800315e:	4618      	mov	r0, r3
 8003160:	4611      	mov	r1, r2
 8003162:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003166:	623b      	str	r3, [r7, #32]
 8003168:	2300      	movs	r3, #0
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
 800316c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003170:	4642      	mov	r2, r8
 8003172:	464b      	mov	r3, r9
 8003174:	f04f 0000 	mov.w	r0, #0
 8003178:	f04f 0100 	mov.w	r1, #0
 800317c:	0159      	lsls	r1, r3, #5
 800317e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003182:	0150      	lsls	r0, r2, #5
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4641      	mov	r1, r8
 800318a:	ebb2 0a01 	subs.w	sl, r2, r1
 800318e:	4649      	mov	r1, r9
 8003190:	eb63 0b01 	sbc.w	fp, r3, r1
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031a8:	ebb2 040a 	subs.w	r4, r2, sl
 80031ac:	eb63 050b 	sbc.w	r5, r3, fp
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	00eb      	lsls	r3, r5, #3
 80031ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031be:	00e2      	lsls	r2, r4, #3
 80031c0:	4614      	mov	r4, r2
 80031c2:	461d      	mov	r5, r3
 80031c4:	4643      	mov	r3, r8
 80031c6:	18e3      	adds	r3, r4, r3
 80031c8:	603b      	str	r3, [r7, #0]
 80031ca:	464b      	mov	r3, r9
 80031cc:	eb45 0303 	adc.w	r3, r5, r3
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031de:	4629      	mov	r1, r5
 80031e0:	028b      	lsls	r3, r1, #10
 80031e2:	4621      	mov	r1, r4
 80031e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031e8:	4621      	mov	r1, r4
 80031ea:	028a      	lsls	r2, r1, #10
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f2:	2200      	movs	r2, #0
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	61fa      	str	r2, [r7, #28]
 80031f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031fc:	f7fc fff6 	bl	80001ec <__aeabi_uldivmod>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4613      	mov	r3, r2
 8003206:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_GetSysClockFreq+0x200>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	3301      	adds	r3, #1
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003218:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800321a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800321c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003220:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003222:	e002      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_RCC_GetSysClockFreq+0x204>)
 8003226:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800322a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800322c:	4618      	mov	r0, r3
 800322e:	3750      	adds	r7, #80	; 0x50
 8003230:	46bd      	mov	sp, r7
 8003232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	00f42400 	.word	0x00f42400
 8003240:	007a1200 	.word	0x007a1200

08003244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003248:	4b03      	ldr	r3, [pc, #12]	; (8003258 <HAL_RCC_GetHCLKFreq+0x14>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	20000000 	.word	0x20000000

0800325c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003260:	f7ff fff0 	bl	8003244 <HAL_RCC_GetHCLKFreq>
 8003264:	4602      	mov	r2, r0
 8003266:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	0a9b      	lsrs	r3, r3, #10
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	4903      	ldr	r1, [pc, #12]	; (8003280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003272:	5ccb      	ldrb	r3, [r1, r3]
 8003274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003278:	4618      	mov	r0, r3
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40023800 	.word	0x40023800
 8003280:	08004758 	.word	0x08004758

08003284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003288:	f7ff ffdc 	bl	8003244 <HAL_RCC_GetHCLKFreq>
 800328c:	4602      	mov	r2, r0
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	0b5b      	lsrs	r3, r3, #13
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	4903      	ldr	r1, [pc, #12]	; (80032a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800329a:	5ccb      	ldrb	r3, [r1, r3]
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40023800 	.word	0x40023800
 80032a8:	08004758 	.word	0x08004758

080032ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e03f      	b.n	800333e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fd fcfc 	bl	8000cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2224      	movs	r2, #36	; 0x24
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fc7b 	bl	8003bec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b0ba      	sub	sp, #232	; 0xe8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800336e:	2300      	movs	r3, #0
 8003370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003374:	2300      	movs	r3, #0
 8003376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800337a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003386:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10f      	bne.n	80033ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800338e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <HAL_UART_IRQHandler+0x66>
 800339a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fb65 	bl	8003a76 <UART_Receive_IT>
      return;
 80033ac:	e256      	b.n	800385c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 80de 	beq.w	8003574 <HAL_UART_IRQHandler+0x22c>
 80033b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d106      	bne.n	80033d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80d1 	beq.w	8003574 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00b      	beq.n	80033f6 <HAL_UART_IRQHandler+0xae>
 80033de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f043 0201 	orr.w	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00b      	beq.n	800341a <HAL_UART_IRQHandler+0xd2>
 8003402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d005      	beq.n	800341a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f043 0202 	orr.w	r2, r3, #2
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800341a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00b      	beq.n	800343e <HAL_UART_IRQHandler+0xf6>
 8003426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f043 0204 	orr.w	r2, r3, #4
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d011      	beq.n	800346e <HAL_UART_IRQHandler+0x126>
 800344a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d105      	bne.n	8003462 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f043 0208 	orr.w	r2, r3, #8
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 81ed 	beq.w	8003852 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_UART_IRQHandler+0x14e>
 8003484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 faf0 	bl	8003a76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a0:	2b40      	cmp	r3, #64	; 0x40
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d103      	bne.n	80034c2 <HAL_UART_IRQHandler+0x17a>
 80034ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d04f      	beq.n	8003562 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f9f8 	bl	80038b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d2:	2b40      	cmp	r3, #64	; 0x40
 80034d4:	d141      	bne.n	800355a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3314      	adds	r3, #20
 80034dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3314      	adds	r3, #20
 80034fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003502:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003506:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800350e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003512:	e841 2300 	strex	r3, r2, [r1]
 8003516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800351a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1d9      	bne.n	80034d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	2b00      	cmp	r3, #0
 8003528:	d013      	beq.n	8003552 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	4a7d      	ldr	r2, [pc, #500]	; (8003724 <HAL_UART_IRQHandler+0x3dc>)
 8003530:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe fbf3 	bl	8001d22 <HAL_DMA_Abort_IT>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d016      	beq.n	8003570 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800354c:	4610      	mov	r0, r2
 800354e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003550:	e00e      	b.n	8003570 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f99a 	bl	800388c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003558:	e00a      	b.n	8003570 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f996 	bl	800388c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003560:	e006      	b.n	8003570 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f992 	bl	800388c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800356e:	e170      	b.n	8003852 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003570:	bf00      	nop
    return;
 8003572:	e16e      	b.n	8003852 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	2b01      	cmp	r3, #1
 800357a:	f040 814a 	bne.w	8003812 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800357e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8143 	beq.w	8003812 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800358c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 813c 	beq.w	8003812 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	f040 80b4 	bne.w	8003728 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8140 	beq.w	8003856 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035de:	429a      	cmp	r2, r3
 80035e0:	f080 8139 	bcs.w	8003856 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f6:	f000 8088 	beq.w	800370a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	330c      	adds	r3, #12
 8003600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003604:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003610:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	330c      	adds	r3, #12
 8003622:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003626:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800362a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003632:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003636:	e841 2300 	strex	r3, r2, [r1]
 800363a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800363e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1d9      	bne.n	80035fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3314      	adds	r3, #20
 800364c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003650:	e853 3f00 	ldrex	r3, [r3]
 8003654:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3314      	adds	r3, #20
 8003666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800366a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800366e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003672:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003676:	e841 2300 	strex	r3, r2, [r1]
 800367a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800367c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e1      	bne.n	8003646 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3314      	adds	r3, #20
 8003688:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3314      	adds	r3, #20
 80036a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036ae:	e841 2300 	strex	r3, r2, [r1]
 80036b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1e3      	bne.n	8003682 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	330c      	adds	r3, #12
 80036ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d2:	e853 3f00 	ldrex	r3, [r3]
 80036d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036da:	f023 0310 	bic.w	r3, r3, #16
 80036de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	330c      	adds	r3, #12
 80036e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80036ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80036ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e3      	bne.n	80036c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	4618      	mov	r0, r3
 8003706:	f7fe fa9c 	bl	8001c42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003712:	b29b      	uxth	r3, r3
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	b29b      	uxth	r3, r3
 8003718:	4619      	mov	r1, r3
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f8c0 	bl	80038a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003720:	e099      	b.n	8003856 <HAL_UART_IRQHandler+0x50e>
 8003722:	bf00      	nop
 8003724:	0800397f 	.word	0x0800397f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003730:	b29b      	uxth	r3, r3
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 808b 	beq.w	800385a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003744:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8086 	beq.w	800385a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	330c      	adds	r3, #12
 8003754:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003758:	e853 3f00 	ldrex	r3, [r3]
 800375c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800375e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003760:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003764:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003772:	647a      	str	r2, [r7, #68]	; 0x44
 8003774:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003778:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e3      	bne.n	800374e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3314      	adds	r3, #20
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	623b      	str	r3, [r7, #32]
   return(result);
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3314      	adds	r3, #20
 80037a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037aa:	633a      	str	r2, [r7, #48]	; 0x30
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e3      	bne.n	8003786 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	330c      	adds	r3, #12
 80037d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	60fb      	str	r3, [r7, #12]
   return(result);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0310 	bic.w	r3, r3, #16
 80037e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	330c      	adds	r3, #12
 80037ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80037f0:	61fa      	str	r2, [r7, #28]
 80037f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	69b9      	ldr	r1, [r7, #24]
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	617b      	str	r3, [r7, #20]
   return(result);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e3      	bne.n	80037cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003804:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003808:	4619      	mov	r1, r3
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f848 	bl	80038a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003810:	e023      	b.n	800385a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <HAL_UART_IRQHandler+0x4ea>
 800381e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f8bb 	bl	80039a6 <UART_Transmit_IT>
    return;
 8003830:	e014      	b.n	800385c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00e      	beq.n	800385c <HAL_UART_IRQHandler+0x514>
 800383e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	d008      	beq.n	800385c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f8fb 	bl	8003a46 <UART_EndTransmit_IT>
    return;
 8003850:	e004      	b.n	800385c <HAL_UART_IRQHandler+0x514>
    return;
 8003852:	bf00      	nop
 8003854:	e002      	b.n	800385c <HAL_UART_IRQHandler+0x514>
      return;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_UART_IRQHandler+0x514>
      return;
 800385a:	bf00      	nop
  }
}
 800385c:	37e8      	adds	r7, #232	; 0xe8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop

08003864 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b095      	sub	sp, #84	; 0x54
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	330c      	adds	r3, #12
 80038c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ca:	e853 3f00 	ldrex	r3, [r3]
 80038ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	330c      	adds	r3, #12
 80038de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038e0:	643a      	str	r2, [r7, #64]	; 0x40
 80038e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038e8:	e841 2300 	strex	r3, r2, [r1]
 80038ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1e5      	bne.n	80038c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3314      	adds	r3, #20
 80038fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	61fb      	str	r3, [r7, #28]
   return(result);
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	64bb      	str	r3, [r7, #72]	; 0x48
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3314      	adds	r3, #20
 8003912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003914:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800391a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e5      	bne.n	80038f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	2b01      	cmp	r3, #1
 800392e:	d119      	bne.n	8003964 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	330c      	adds	r3, #12
 8003936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	e853 3f00 	ldrex	r3, [r3]
 800393e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f023 0310 	bic.w	r3, r3, #16
 8003946:	647b      	str	r3, [r7, #68]	; 0x44
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	330c      	adds	r3, #12
 800394e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003950:	61ba      	str	r2, [r7, #24]
 8003952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	6979      	ldr	r1, [r7, #20]
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	e841 2300 	strex	r3, r2, [r1]
 800395c:	613b      	str	r3, [r7, #16]
   return(result);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e5      	bne.n	8003930 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003972:	bf00      	nop
 8003974:	3754      	adds	r7, #84	; 0x54
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f7ff ff77 	bl	800388c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b21      	cmp	r3, #33	; 0x21
 80039b8:	d13e      	bne.n	8003a38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c2:	d114      	bne.n	80039ee <UART_Transmit_IT+0x48>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d110      	bne.n	80039ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	1c9a      	adds	r2, r3, #2
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	621a      	str	r2, [r3, #32]
 80039ec:	e008      	b.n	8003a00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	1c59      	adds	r1, r3, #1
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6211      	str	r1, [r2, #32]
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10f      	bne.n	8003a34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff fefc 	bl	8003864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b08c      	sub	sp, #48	; 0x30
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b22      	cmp	r3, #34	; 0x22
 8003a88:	f040 80ab 	bne.w	8003be2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a94:	d117      	bne.n	8003ac6 <UART_Receive_IT+0x50>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d113      	bne.n	8003ac6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	1c9a      	adds	r2, r3, #2
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ac4:	e026      	b.n	8003b14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad8:	d007      	beq.n	8003aea <UART_Receive_IT+0x74>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <UART_Receive_IT+0x82>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	e008      	b.n	8003b0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	4619      	mov	r1, r3
 8003b22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d15a      	bne.n	8003bde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0220 	bic.w	r2, r2, #32
 8003b36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0201 	bic.w	r2, r2, #1
 8003b56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d135      	bne.n	8003bd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	330c      	adds	r3, #12
 8003b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	e853 3f00 	ldrex	r3, [r3]
 8003b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f023 0310 	bic.w	r3, r3, #16
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	330c      	adds	r3, #12
 8003b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8e:	623a      	str	r2, [r7, #32]
 8003b90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b92:	69f9      	ldr	r1, [r7, #28]
 8003b94:	6a3a      	ldr	r2, [r7, #32]
 8003b96:	e841 2300 	strex	r3, r2, [r1]
 8003b9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1e5      	bne.n	8003b6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d10a      	bne.n	8003bc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff fe67 	bl	80038a0 <HAL_UARTEx_RxEventCallback>
 8003bd2:	e002      	b.n	8003bda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff fe4f 	bl	8003878 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e002      	b.n	8003be4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e000      	b.n	8003be4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
  }
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3730      	adds	r7, #48	; 0x30
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf0:	b0c0      	sub	sp, #256	; 0x100
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c08:	68d9      	ldr	r1, [r3, #12]
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	ea40 0301 	orr.w	r3, r0, r1
 8003c14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c44:	f021 010c 	bic.w	r1, r1, #12
 8003c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c52:	430b      	orrs	r3, r1
 8003c54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c66:	6999      	ldr	r1, [r3, #24]
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	ea40 0301 	orr.w	r3, r0, r1
 8003c72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4b8f      	ldr	r3, [pc, #572]	; (8003eb8 <UART_SetConfig+0x2cc>)
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d005      	beq.n	8003c8c <UART_SetConfig+0xa0>
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4b8d      	ldr	r3, [pc, #564]	; (8003ebc <UART_SetConfig+0x2d0>)
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d104      	bne.n	8003c96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c8c:	f7ff fafa 	bl	8003284 <HAL_RCC_GetPCLK2Freq>
 8003c90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c94:	e003      	b.n	8003c9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c96:	f7ff fae1 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 8003c9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca8:	f040 810c 	bne.w	8003ec4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003cb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003cba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003cbe:	4622      	mov	r2, r4
 8003cc0:	462b      	mov	r3, r5
 8003cc2:	1891      	adds	r1, r2, r2
 8003cc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cc6:	415b      	adcs	r3, r3
 8003cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cce:	4621      	mov	r1, r4
 8003cd0:	eb12 0801 	adds.w	r8, r2, r1
 8003cd4:	4629      	mov	r1, r5
 8003cd6:	eb43 0901 	adc.w	r9, r3, r1
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cee:	4690      	mov	r8, r2
 8003cf0:	4699      	mov	r9, r3
 8003cf2:	4623      	mov	r3, r4
 8003cf4:	eb18 0303 	adds.w	r3, r8, r3
 8003cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cfc:	462b      	mov	r3, r5
 8003cfe:	eb49 0303 	adc.w	r3, r9, r3
 8003d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	18db      	adds	r3, r3, r3
 8003d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d20:	4613      	mov	r3, r2
 8003d22:	eb42 0303 	adc.w	r3, r2, r3
 8003d26:	657b      	str	r3, [r7, #84]	; 0x54
 8003d28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d30:	f7fc fa5c 	bl	80001ec <__aeabi_uldivmod>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4b61      	ldr	r3, [pc, #388]	; (8003ec0 <UART_SetConfig+0x2d4>)
 8003d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	011c      	lsls	r4, r3, #4
 8003d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d46:	2200      	movs	r2, #0
 8003d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d54:	4642      	mov	r2, r8
 8003d56:	464b      	mov	r3, r9
 8003d58:	1891      	adds	r1, r2, r2
 8003d5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d5c:	415b      	adcs	r3, r3
 8003d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d64:	4641      	mov	r1, r8
 8003d66:	eb12 0a01 	adds.w	sl, r2, r1
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	eb43 0b01 	adc.w	fp, r3, r1
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d84:	4692      	mov	sl, r2
 8003d86:	469b      	mov	fp, r3
 8003d88:	4643      	mov	r3, r8
 8003d8a:	eb1a 0303 	adds.w	r3, sl, r3
 8003d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d92:	464b      	mov	r3, r9
 8003d94:	eb4b 0303 	adc.w	r3, fp, r3
 8003d98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003da8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003dac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003db0:	460b      	mov	r3, r1
 8003db2:	18db      	adds	r3, r3, r3
 8003db4:	643b      	str	r3, [r7, #64]	; 0x40
 8003db6:	4613      	mov	r3, r2
 8003db8:	eb42 0303 	adc.w	r3, r2, r3
 8003dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8003dbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003dc6:	f7fc fa11 	bl	80001ec <__aeabi_uldivmod>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4b3b      	ldr	r3, [pc, #236]	; (8003ec0 <UART_SetConfig+0x2d4>)
 8003dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	2264      	movs	r2, #100	; 0x64
 8003dda:	fb02 f303 	mul.w	r3, r2, r3
 8003dde:	1acb      	subs	r3, r1, r3
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003de6:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <UART_SetConfig+0x2d4>)
 8003de8:	fba3 2302 	umull	r2, r3, r3, r2
 8003dec:	095b      	lsrs	r3, r3, #5
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003df4:	441c      	add	r4, r3
 8003df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e08:	4642      	mov	r2, r8
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	1891      	adds	r1, r2, r2
 8003e0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e10:	415b      	adcs	r3, r3
 8003e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e18:	4641      	mov	r1, r8
 8003e1a:	1851      	adds	r1, r2, r1
 8003e1c:	6339      	str	r1, [r7, #48]	; 0x30
 8003e1e:	4649      	mov	r1, r9
 8003e20:	414b      	adcs	r3, r1
 8003e22:	637b      	str	r3, [r7, #52]	; 0x34
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e30:	4659      	mov	r1, fp
 8003e32:	00cb      	lsls	r3, r1, #3
 8003e34:	4651      	mov	r1, sl
 8003e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e3a:	4651      	mov	r1, sl
 8003e3c:	00ca      	lsls	r2, r1, #3
 8003e3e:	4610      	mov	r0, r2
 8003e40:	4619      	mov	r1, r3
 8003e42:	4603      	mov	r3, r0
 8003e44:	4642      	mov	r2, r8
 8003e46:	189b      	adds	r3, r3, r2
 8003e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e4c:	464b      	mov	r3, r9
 8003e4e:	460a      	mov	r2, r1
 8003e50:	eb42 0303 	adc.w	r3, r2, r3
 8003e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	18db      	adds	r3, r3, r3
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e72:	4613      	mov	r3, r2
 8003e74:	eb42 0303 	adc.w	r3, r2, r3
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e82:	f7fc f9b3 	bl	80001ec <__aeabi_uldivmod>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <UART_SetConfig+0x2d4>)
 8003e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	2164      	movs	r1, #100	; 0x64
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	3332      	adds	r3, #50	; 0x32
 8003e9e:	4a08      	ldr	r2, [pc, #32]	; (8003ec0 <UART_SetConfig+0x2d4>)
 8003ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea4:	095b      	lsrs	r3, r3, #5
 8003ea6:	f003 0207 	and.w	r2, r3, #7
 8003eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4422      	add	r2, r4
 8003eb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003eb4:	e105      	b.n	80040c2 <UART_SetConfig+0x4d6>
 8003eb6:	bf00      	nop
 8003eb8:	40011000 	.word	0x40011000
 8003ebc:	40011400 	.word	0x40011400
 8003ec0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ece:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ed2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ed6:	4642      	mov	r2, r8
 8003ed8:	464b      	mov	r3, r9
 8003eda:	1891      	adds	r1, r2, r2
 8003edc:	6239      	str	r1, [r7, #32]
 8003ede:	415b      	adcs	r3, r3
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ee6:	4641      	mov	r1, r8
 8003ee8:	1854      	adds	r4, r2, r1
 8003eea:	4649      	mov	r1, r9
 8003eec:	eb43 0501 	adc.w	r5, r3, r1
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	00eb      	lsls	r3, r5, #3
 8003efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003efe:	00e2      	lsls	r2, r4, #3
 8003f00:	4614      	mov	r4, r2
 8003f02:	461d      	mov	r5, r3
 8003f04:	4643      	mov	r3, r8
 8003f06:	18e3      	adds	r3, r4, r3
 8003f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f0c:	464b      	mov	r3, r9
 8003f0e:	eb45 0303 	adc.w	r3, r5, r3
 8003f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f32:	4629      	mov	r1, r5
 8003f34:	008b      	lsls	r3, r1, #2
 8003f36:	4621      	mov	r1, r4
 8003f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	008a      	lsls	r2, r1, #2
 8003f40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f44:	f7fc f952 	bl	80001ec <__aeabi_uldivmod>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4b60      	ldr	r3, [pc, #384]	; (80040d0 <UART_SetConfig+0x4e4>)
 8003f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	011c      	lsls	r4, r3, #4
 8003f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f68:	4642      	mov	r2, r8
 8003f6a:	464b      	mov	r3, r9
 8003f6c:	1891      	adds	r1, r2, r2
 8003f6e:	61b9      	str	r1, [r7, #24]
 8003f70:	415b      	adcs	r3, r3
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f78:	4641      	mov	r1, r8
 8003f7a:	1851      	adds	r1, r2, r1
 8003f7c:	6139      	str	r1, [r7, #16]
 8003f7e:	4649      	mov	r1, r9
 8003f80:	414b      	adcs	r3, r1
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f90:	4659      	mov	r1, fp
 8003f92:	00cb      	lsls	r3, r1, #3
 8003f94:	4651      	mov	r1, sl
 8003f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f9a:	4651      	mov	r1, sl
 8003f9c:	00ca      	lsls	r2, r1, #3
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4642      	mov	r2, r8
 8003fa6:	189b      	adds	r3, r3, r2
 8003fa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fac:	464b      	mov	r3, r9
 8003fae:	460a      	mov	r2, r1
 8003fb0:	eb42 0303 	adc.w	r3, r2, r3
 8003fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003fd0:	4649      	mov	r1, r9
 8003fd2:	008b      	lsls	r3, r1, #2
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fda:	4641      	mov	r1, r8
 8003fdc:	008a      	lsls	r2, r1, #2
 8003fde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003fe2:	f7fc f903 	bl	80001ec <__aeabi_uldivmod>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4b39      	ldr	r3, [pc, #228]	; (80040d0 <UART_SetConfig+0x4e4>)
 8003fec:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	2164      	movs	r1, #100	; 0x64
 8003ff4:	fb01 f303 	mul.w	r3, r1, r3
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	3332      	adds	r3, #50	; 0x32
 8003ffe:	4a34      	ldr	r2, [pc, #208]	; (80040d0 <UART_SetConfig+0x4e4>)
 8004000:	fba2 2303 	umull	r2, r3, r2, r3
 8004004:	095b      	lsrs	r3, r3, #5
 8004006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800400a:	441c      	add	r4, r3
 800400c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004010:	2200      	movs	r2, #0
 8004012:	673b      	str	r3, [r7, #112]	; 0x70
 8004014:	677a      	str	r2, [r7, #116]	; 0x74
 8004016:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800401a:	4642      	mov	r2, r8
 800401c:	464b      	mov	r3, r9
 800401e:	1891      	adds	r1, r2, r2
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	415b      	adcs	r3, r3
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800402a:	4641      	mov	r1, r8
 800402c:	1851      	adds	r1, r2, r1
 800402e:	6039      	str	r1, [r7, #0]
 8004030:	4649      	mov	r1, r9
 8004032:	414b      	adcs	r3, r1
 8004034:	607b      	str	r3, [r7, #4]
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	f04f 0300 	mov.w	r3, #0
 800403e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004042:	4659      	mov	r1, fp
 8004044:	00cb      	lsls	r3, r1, #3
 8004046:	4651      	mov	r1, sl
 8004048:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800404c:	4651      	mov	r1, sl
 800404e:	00ca      	lsls	r2, r1, #3
 8004050:	4610      	mov	r0, r2
 8004052:	4619      	mov	r1, r3
 8004054:	4603      	mov	r3, r0
 8004056:	4642      	mov	r2, r8
 8004058:	189b      	adds	r3, r3, r2
 800405a:	66bb      	str	r3, [r7, #104]	; 0x68
 800405c:	464b      	mov	r3, r9
 800405e:	460a      	mov	r2, r1
 8004060:	eb42 0303 	adc.w	r3, r2, r3
 8004064:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	663b      	str	r3, [r7, #96]	; 0x60
 8004070:	667a      	str	r2, [r7, #100]	; 0x64
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800407e:	4649      	mov	r1, r9
 8004080:	008b      	lsls	r3, r1, #2
 8004082:	4641      	mov	r1, r8
 8004084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004088:	4641      	mov	r1, r8
 800408a:	008a      	lsls	r2, r1, #2
 800408c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004090:	f7fc f8ac 	bl	80001ec <__aeabi_uldivmod>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <UART_SetConfig+0x4e4>)
 800409a:	fba3 1302 	umull	r1, r3, r3, r2
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	2164      	movs	r1, #100	; 0x64
 80040a2:	fb01 f303 	mul.w	r3, r1, r3
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	3332      	adds	r3, #50	; 0x32
 80040ac:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <UART_SetConfig+0x4e4>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	f003 020f 	and.w	r2, r3, #15
 80040b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4422      	add	r2, r4
 80040c0:	609a      	str	r2, [r3, #8]
}
 80040c2:	bf00      	nop
 80040c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040c8:	46bd      	mov	sp, r7
 80040ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ce:	bf00      	nop
 80040d0:	51eb851f 	.word	0x51eb851f

080040d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040d4:	b084      	sub	sp, #16
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	f107 001c 	add.w	r0, r7, #28
 80040e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d122      	bne.n	8004132 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004116:	2b01      	cmp	r3, #1
 8004118:	d105      	bne.n	8004126 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 faa2 	bl	8004670 <USB_CoreReset>
 800412c:	4603      	mov	r3, r0
 800412e:	73fb      	strb	r3, [r7, #15]
 8004130:	e01a      	b.n	8004168 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fa96 	bl	8004670 <USB_CoreReset>
 8004144:	4603      	mov	r3, r0
 8004146:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	639a      	str	r2, [r3, #56]	; 0x38
 800415a:	e005      	b.n	8004168 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	2b01      	cmp	r3, #1
 800416c:	d10b      	bne.n	8004186 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f043 0206 	orr.w	r2, r3, #6
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f043 0220 	orr.w	r2, r3, #32
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004186:	7bfb      	ldrb	r3, [r7, #15]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004192:	b004      	add	sp, #16
 8004194:	4770      	bx	lr

08004196 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f023 0201 	bic.w	r2, r3, #1
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d115      	bne.n	8004206 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041e6:	2001      	movs	r0, #1
 80041e8:	f7fc fefe 	bl	8000fe8 <HAL_Delay>
      ms++;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	3301      	adds	r3, #1
 80041f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fa2e 	bl	8004654 <USB_GetMode>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d01e      	beq.n	800423c <USB_SetCurrentMode+0x84>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b31      	cmp	r3, #49	; 0x31
 8004202:	d9f0      	bls.n	80041e6 <USB_SetCurrentMode+0x2e>
 8004204:	e01a      	b.n	800423c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004206:	78fb      	ldrb	r3, [r7, #3]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d115      	bne.n	8004238 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004218:	2001      	movs	r0, #1
 800421a:	f7fc fee5 	bl	8000fe8 <HAL_Delay>
      ms++;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3301      	adds	r3, #1
 8004222:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fa15 	bl	8004654 <USB_GetMode>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <USB_SetCurrentMode+0x84>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b31      	cmp	r3, #49	; 0x31
 8004234:	d9f0      	bls.n	8004218 <USB_SetCurrentMode+0x60>
 8004236:	e001      	b.n	800423c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e005      	b.n	8004248 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b32      	cmp	r3, #50	; 0x32
 8004240:	d101      	bne.n	8004246 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004250:	b084      	sub	sp, #16
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800425e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800426a:	2300      	movs	r3, #0
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	e009      	b.n	8004284 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	3340      	adds	r3, #64	; 0x40
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	2200      	movs	r2, #0
 800427c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	3301      	adds	r3, #1
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	2b0e      	cmp	r3, #14
 8004288:	d9f2      	bls.n	8004270 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800428a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d11c      	bne.n	80042ca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800429e:	f043 0302 	orr.w	r3, r3, #2
 80042a2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	639a      	str	r2, [r3, #56]	; 0x38
 80042c8:	e00b      	b.n	80042e2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042e8:	461a      	mov	r2, r3
 80042ea:	2300      	movs	r3, #0
 80042ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f4:	4619      	mov	r1, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fc:	461a      	mov	r2, r3
 80042fe:	680b      	ldr	r3, [r1, #0]
 8004300:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004304:	2b01      	cmp	r3, #1
 8004306:	d10c      	bne.n	8004322 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430a:	2b00      	cmp	r3, #0
 800430c:	d104      	bne.n	8004318 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800430e:	2100      	movs	r1, #0
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f965 	bl	80045e0 <USB_SetDevSpeed>
 8004316:	e008      	b.n	800432a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004318:	2101      	movs	r1, #1
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f960 	bl	80045e0 <USB_SetDevSpeed>
 8004320:	e003      	b.n	800432a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004322:	2103      	movs	r1, #3
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f95b 	bl	80045e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800432a:	2110      	movs	r1, #16
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f8f3 	bl	8004518 <USB_FlushTxFifo>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f91f 	bl	8004580 <USB_FlushRxFifo>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004352:	461a      	mov	r2, r3
 8004354:	2300      	movs	r3, #0
 8004356:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435e:	461a      	mov	r2, r3
 8004360:	2300      	movs	r3, #0
 8004362:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800436a:	461a      	mov	r2, r3
 800436c:	2300      	movs	r3, #0
 800436e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004370:	2300      	movs	r3, #0
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	e043      	b.n	80043fe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004388:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800438c:	d118      	bne.n	80043c0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10a      	bne.n	80043aa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a0:	461a      	mov	r2, r3
 80043a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	e013      	b.n	80043d2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b6:	461a      	mov	r2, r3
 80043b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e008      	b.n	80043d2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043cc:	461a      	mov	r2, r3
 80043ce:	2300      	movs	r3, #0
 80043d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043de:	461a      	mov	r2, r3
 80043e0:	2300      	movs	r3, #0
 80043e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f0:	461a      	mov	r2, r3
 80043f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	3301      	adds	r3, #1
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	429a      	cmp	r2, r3
 8004404:	d3b7      	bcc.n	8004376 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004406:	2300      	movs	r3, #0
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	e043      	b.n	8004494 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800441e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004422:	d118      	bne.n	8004456 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004436:	461a      	mov	r2, r3
 8004438:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e013      	b.n	8004468 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444c:	461a      	mov	r2, r3
 800444e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	e008      	b.n	8004468 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004462:	461a      	mov	r2, r3
 8004464:	2300      	movs	r3, #0
 8004466:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004474:	461a      	mov	r2, r3
 8004476:	2300      	movs	r3, #0
 8004478:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004486:	461a      	mov	r2, r3
 8004488:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800448c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	3301      	adds	r3, #1
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	429a      	cmp	r2, r3
 800449a:	d3b7      	bcc.n	800440c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80044bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d105      	bne.n	80044d0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	f043 0210 	orr.w	r2, r3, #16
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699a      	ldr	r2, [r3, #24]
 80044d4:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <USB_DevInit+0x2c4>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80044dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f043 0208 	orr.w	r2, r3, #8
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d107      	bne.n	8004504 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044fc:	f043 0304 	orr.w	r3, r3, #4
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004504:	7dfb      	ldrb	r3, [r7, #23]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004510:	b004      	add	sp, #16
 8004512:	4770      	bx	lr
 8004514:	803c3800 	.word	0x803c3800

08004518 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3301      	adds	r3, #1
 800452a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a13      	ldr	r2, [pc, #76]	; (800457c <USB_FlushTxFifo+0x64>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e01b      	b.n	8004570 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	daf2      	bge.n	8004526 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	019b      	lsls	r3, r3, #6
 8004548:	f043 0220 	orr.w	r2, r3, #32
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3301      	adds	r3, #1
 8004554:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4a08      	ldr	r2, [pc, #32]	; (800457c <USB_FlushTxFifo+0x64>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e006      	b.n	8004570 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b20      	cmp	r3, #32
 800456c:	d0f0      	beq.n	8004550 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	00030d40 	.word	0x00030d40

08004580 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3301      	adds	r3, #1
 8004590:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a11      	ldr	r2, [pc, #68]	; (80045dc <USB_FlushRxFifo+0x5c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e018      	b.n	80045d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	daf2      	bge.n	800458c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2210      	movs	r2, #16
 80045ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3301      	adds	r3, #1
 80045b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4a08      	ldr	r2, [pc, #32]	; (80045dc <USB_FlushRxFifo+0x5c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d901      	bls.n	80045c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e006      	b.n	80045d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0310 	and.w	r3, r3, #16
 80045ca:	2b10      	cmp	r3, #16
 80045cc:	d0f0      	beq.n	80045b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	00030d40 	.word	0x00030d40

080045e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	68f9      	ldr	r1, [r7, #12]
 80045fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004600:	4313      	orrs	r3, r2
 8004602:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800462c:	f023 0303 	bic.w	r3, r3, #3
 8004630:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004640:	f043 0302 	orr.w	r3, r3, #2
 8004644:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	f003 0301 	and.w	r3, r3, #1
}
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3301      	adds	r3, #1
 8004680:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4a13      	ldr	r2, [pc, #76]	; (80046d4 <USB_CoreReset+0x64>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e01b      	b.n	80046c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	daf2      	bge.n	800467c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f043 0201 	orr.w	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3301      	adds	r3, #1
 80046aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4a09      	ldr	r2, [pc, #36]	; (80046d4 <USB_CoreReset+0x64>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d901      	bls.n	80046b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e006      	b.n	80046c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d0f0      	beq.n	80046a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	00030d40 	.word	0x00030d40

080046d8 <__libc_init_array>:
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	4d0d      	ldr	r5, [pc, #52]	; (8004710 <__libc_init_array+0x38>)
 80046dc:	4c0d      	ldr	r4, [pc, #52]	; (8004714 <__libc_init_array+0x3c>)
 80046de:	1b64      	subs	r4, r4, r5
 80046e0:	10a4      	asrs	r4, r4, #2
 80046e2:	2600      	movs	r6, #0
 80046e4:	42a6      	cmp	r6, r4
 80046e6:	d109      	bne.n	80046fc <__libc_init_array+0x24>
 80046e8:	4d0b      	ldr	r5, [pc, #44]	; (8004718 <__libc_init_array+0x40>)
 80046ea:	4c0c      	ldr	r4, [pc, #48]	; (800471c <__libc_init_array+0x44>)
 80046ec:	f000 f820 	bl	8004730 <_init>
 80046f0:	1b64      	subs	r4, r4, r5
 80046f2:	10a4      	asrs	r4, r4, #2
 80046f4:	2600      	movs	r6, #0
 80046f6:	42a6      	cmp	r6, r4
 80046f8:	d105      	bne.n	8004706 <__libc_init_array+0x2e>
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004700:	4798      	blx	r3
 8004702:	3601      	adds	r6, #1
 8004704:	e7ee      	b.n	80046e4 <__libc_init_array+0xc>
 8004706:	f855 3b04 	ldr.w	r3, [r5], #4
 800470a:	4798      	blx	r3
 800470c:	3601      	adds	r6, #1
 800470e:	e7f2      	b.n	80046f6 <__libc_init_array+0x1e>
 8004710:	08004768 	.word	0x08004768
 8004714:	08004768 	.word	0x08004768
 8004718:	08004768 	.word	0x08004768
 800471c:	0800476c 	.word	0x0800476c

08004720 <memset>:
 8004720:	4402      	add	r2, r0
 8004722:	4603      	mov	r3, r0
 8004724:	4293      	cmp	r3, r2
 8004726:	d100      	bne.n	800472a <memset+0xa>
 8004728:	4770      	bx	lr
 800472a:	f803 1b01 	strb.w	r1, [r3], #1
 800472e:	e7f9      	b.n	8004724 <memset+0x4>

08004730 <_init>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	bf00      	nop
 8004734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004736:	bc08      	pop	{r3}
 8004738:	469e      	mov	lr, r3
 800473a:	4770      	bx	lr

0800473c <_fini>:
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473e:	bf00      	nop
 8004740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004742:	bc08      	pop	{r3}
 8004744:	469e      	mov	lr, r3
 8004746:	4770      	bx	lr
