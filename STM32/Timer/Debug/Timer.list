
Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004054  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004204  08004204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800425c  0800425c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800425c  0800425c  0001425c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004264  08004264  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004264  08004264  00014264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800426c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007fc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000086c  2000086c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010767  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002042  00000000  00000000  00030807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  00032850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bc8  00000000  00000000  000334e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024bd5  00000000  00000000  000340a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e879  00000000  00000000  00058c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df904  00000000  00000000  000674f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146dfa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038c0  00000000  00000000  00146e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080041ec 	.word	0x080041ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080041ec 	.word	0x080041ec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_SYSTICK_Callback>:
//		flag = 1;
//		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
//	}
//}

void HAL_SYSTICK_Callback(void){
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	if((timer_cnt&1000)==0){
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <HAL_SYSTICK_Callback+0x54>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 737a 	and.w	r3, r3, #1000	; 0x3e8
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d11a      	bne.n	80005da <HAL_SYSTICK_Callback+0x46>
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	4811      	ldr	r0, [pc, #68]	; (80005ec <HAL_SYSTICK_Callback+0x58>)
 80005a8:	f001 faef 	bl	8001b8a <HAL_GPIO_TogglePin>
		memset(uart_buf, 0, sizeof(uart_buf));
 80005ac:	221e      	movs	r2, #30
 80005ae:	2100      	movs	r1, #0
 80005b0:	480f      	ldr	r0, [pc, #60]	; (80005f0 <HAL_SYSTICK_Callback+0x5c>)
 80005b2:	f003 f9a5 	bl	8003900 <memset>
		sprintf(uart_buf, "%d, %d \r\n", second_cnt, timer_cnt);
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <HAL_SYSTICK_Callback+0x60>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <HAL_SYSTICK_Callback+0x54>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	490e      	ldr	r1, [pc, #56]	; (80005f8 <HAL_SYSTICK_Callback+0x64>)
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <HAL_SYSTICK_Callback+0x5c>)
 80005c2:	f003 f9a5 	bl	8003910 <siprintf>
		HAL_UART_Transmit_IT(&huart3, (uint8_t *)&uart_buf, sizeof(uart_buf));
 80005c6:	221e      	movs	r2, #30
 80005c8:	4909      	ldr	r1, [pc, #36]	; (80005f0 <HAL_SYSTICK_Callback+0x5c>)
 80005ca:	480c      	ldr	r0, [pc, #48]	; (80005fc <HAL_SYSTICK_Callback+0x68>)
 80005cc:	f002 fbb3 	bl	8002d36 <HAL_UART_Transmit_IT>
		second_cnt++;
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <HAL_SYSTICK_Callback+0x60>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <HAL_SYSTICK_Callback+0x60>)
 80005d8:	6013      	str	r3, [r2, #0]
	}
	timer_cnt++;
 80005da:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <HAL_SYSTICK_Callback+0x54>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	4a01      	ldr	r2, [pc, #4]	; (80005e8 <HAL_SYSTICK_Callback+0x54>)
 80005e2:	6013      	str	r3, [r2, #0]
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000848 	.word	0x20000848
 80005ec:	40020400 	.word	0x40020400
 80005f0:	20000824 	.word	0x20000824
 80005f4:	20000844 	.word	0x20000844
 80005f8:	08004204 	.word	0x08004204
 80005fc:	200002d4 	.word	0x200002d4

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fc52 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f80c 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f942 	bl	8000894 <MX_GPIO_Init>
  MX_ETH_Init();
 8000610:	f000 f874 	bl	80006fc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000614:	f000 f8e6 	bl	80007e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000618:	f000 f90e 	bl	8000838 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 800061c:	f000 f8bc 	bl	8000798 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	e7fe      	b.n	8000620 <main+0x20>
	...

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f003 f964 	bl	8003900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a28      	ldr	r2, [pc, #160]	; (80006f4 <SystemClock_Config+0xd0>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <SystemClock_Config+0xd0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <SystemClock_Config+0xd4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a22      	ldr	r2, [pc, #136]	; (80006f8 <SystemClock_Config+0xd4>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <SystemClock_Config+0xd4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000680:	2305      	movs	r3, #5
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000684:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800068a:	2301      	movs	r3, #1
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800069c:	23a8      	movs	r3, #168	; 0xa8
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a4:	2307      	movs	r3, #7
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fba3 	bl	8001df8 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b8:	f000 f99a 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2105      	movs	r1, #5
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fe04 	bl	80022e8 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006e6:	f000 f983 	bl	80009f0 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_ETH_Init+0x84>)
 8000702:	4a20      	ldr	r2, [pc, #128]	; (8000784 <MX_ETH_Init+0x88>)
 8000704:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <MX_ETH_Init+0x8c>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_ETH_Init+0x8c>)
 800070e:	2280      	movs	r2, #128	; 0x80
 8000710:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_ETH_Init+0x8c>)
 8000714:	22e1      	movs	r2, #225	; 0xe1
 8000716:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_ETH_Init+0x8c>)
 800071a:	2200      	movs	r2, #0
 800071c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_ETH_Init+0x8c>)
 8000720:	2200      	movs	r2, #0
 8000722:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_ETH_Init+0x8c>)
 8000726:	2200      	movs	r2, #0
 8000728:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_ETH_Init+0x84>)
 800072c:	4a16      	ldr	r2, [pc, #88]	; (8000788 <MX_ETH_Init+0x8c>)
 800072e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_ETH_Init+0x84>)
 8000732:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000736:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_ETH_Init+0x84>)
 800073a:	4a14      	ldr	r2, [pc, #80]	; (800078c <MX_ETH_Init+0x90>)
 800073c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_ETH_Init+0x84>)
 8000740:	4a13      	ldr	r2, [pc, #76]	; (8000790 <MX_ETH_Init+0x94>)
 8000742:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_ETH_Init+0x84>)
 8000746:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800074a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <MX_ETH_Init+0x84>)
 800074e:	f000 fd2f 	bl	80011b0 <HAL_ETH_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f94a 	bl	80009f0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800075c:	2238      	movs	r2, #56	; 0x38
 800075e:	2100      	movs	r1, #0
 8000760:	480c      	ldr	r0, [pc, #48]	; (8000794 <MX_ETH_Init+0x98>)
 8000762:	f003 f8cd 	bl	8003900 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_ETH_Init+0x98>)
 8000768:	2221      	movs	r2, #33	; 0x21
 800076a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_ETH_Init+0x98>)
 800076e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000772:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_ETH_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000204 	.word	0x20000204
 8000784:	40028000 	.word	0x40028000
 8000788:	2000084c 	.word	0x2000084c
 800078c:	20000164 	.word	0x20000164
 8000790:	200000c4 	.word	0x200000c4
 8000794:	2000008c 	.word	0x2000008c

08000798 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_RTC_Init+0x44>)
 800079e:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <MX_RTC_Init+0x48>)
 80007a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_RTC_Init+0x44>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_RTC_Init+0x44>)
 80007aa:	227f      	movs	r2, #127	; 0x7f
 80007ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_RTC_Init+0x44>)
 80007b0:	22ff      	movs	r2, #255	; 0xff
 80007b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_RTC_Init+0x44>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_RTC_Init+0x44>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_RTC_Init+0x44>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_RTC_Init+0x44>)
 80007c8:	f002 f96e 	bl	8002aa8 <HAL_RTC_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80007d2:	f000 f90d 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200002b4 	.word	0x200002b4
 80007e0:	40002800 	.word	0x40002800

080007e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <MX_USART3_UART_Init+0x50>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART3_UART_Init+0x4c>)
 800081c:	f002 fa3e 	bl	8002c9c <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000826:	f000 f8e3 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200002d4 	.word	0x200002d4
 8000834:	40004800 	.word	0x40004800

08000838 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000842:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2204      	movs	r2, #4
 8000848:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	2202      	movs	r2, #2
 800084e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	2202      	movs	r2, #2
 800085a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2201      	movs	r2, #1
 8000860:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000870:	2201      	movs	r2, #1
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087c:	f001 f99f 	bl	8001bbe <HAL_PCD_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000886:	f000 f8b3 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000318 	.word	0x20000318

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	4b4c      	ldr	r3, [pc, #304]	; (80009e0 <MX_GPIO_Init+0x14c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a4b      	ldr	r2, [pc, #300]	; (80009e0 <MX_GPIO_Init+0x14c>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b49      	ldr	r3, [pc, #292]	; (80009e0 <MX_GPIO_Init+0x14c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	61bb      	str	r3, [r7, #24]
 80008c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	4b45      	ldr	r3, [pc, #276]	; (80009e0 <MX_GPIO_Init+0x14c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a44      	ldr	r2, [pc, #272]	; (80009e0 <MX_GPIO_Init+0x14c>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b42      	ldr	r3, [pc, #264]	; (80009e0 <MX_GPIO_Init+0x14c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b3e      	ldr	r3, [pc, #248]	; (80009e0 <MX_GPIO_Init+0x14c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a3d      	ldr	r2, [pc, #244]	; (80009e0 <MX_GPIO_Init+0x14c>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b3b      	ldr	r3, [pc, #236]	; (80009e0 <MX_GPIO_Init+0x14c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b37      	ldr	r3, [pc, #220]	; (80009e0 <MX_GPIO_Init+0x14c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a36      	ldr	r2, [pc, #216]	; (80009e0 <MX_GPIO_Init+0x14c>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <MX_GPIO_Init+0x14c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <MX_GPIO_Init+0x14c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a2f      	ldr	r2, [pc, #188]	; (80009e0 <MX_GPIO_Init+0x14c>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <MX_GPIO_Init+0x14c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <MX_GPIO_Init+0x14c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a28      	ldr	r2, [pc, #160]	; (80009e0 <MX_GPIO_Init+0x14c>)
 8000940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_GPIO_Init+0x14c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f244 0181 	movw	r1, #16513	; 0x4081
 8000958:	4822      	ldr	r0, [pc, #136]	; (80009e4 <MX_GPIO_Init+0x150>)
 800095a:	f001 f8fd 	bl	8001b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2140      	movs	r1, #64	; 0x40
 8000962:	4821      	ldr	r0, [pc, #132]	; (80009e8 <MX_GPIO_Init+0x154>)
 8000964:	f001 f8f8 	bl	8001b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	481b      	ldr	r0, [pc, #108]	; (80009ec <MX_GPIO_Init+0x158>)
 8000980:	f000 ff3e 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000984:	f244 0381 	movw	r3, #16513	; 0x4081
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4811      	ldr	r0, [pc, #68]	; (80009e4 <MX_GPIO_Init+0x150>)
 800099e:	f000 ff2f 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009a2:	2340      	movs	r3, #64	; 0x40
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	480b      	ldr	r0, [pc, #44]	; (80009e8 <MX_GPIO_Init+0x154>)
 80009ba:	f000 ff21 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_GPIO_Init+0x154>)
 80009d2:	f000 ff15 	bl	8001800 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d6:	bf00      	nop
 80009d8:	3730      	adds	r7, #48	; 0x30
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020400 	.word	0x40020400
 80009e8:	40021800 	.word	0x40021800
 80009ec:	40020800 	.word	0x40020800

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	; 0x38
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a55      	ldr	r2, [pc, #340]	; (8000bc0 <HAL_ETH_MspInit+0x174>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	f040 80a4 	bne.w	8000bb8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
 8000a74:	4b53      	ldr	r3, [pc, #332]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4a52      	ldr	r2, [pc, #328]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000a7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a80:	4b50      	ldr	r3, [pc, #320]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a88:	623b      	str	r3, [r7, #32]
 8000a8a:	6a3b      	ldr	r3, [r7, #32]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	4b4c      	ldr	r3, [pc, #304]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	4a4b      	ldr	r2, [pc, #300]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000a96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9c:	4b49      	ldr	r3, [pc, #292]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000aa4:	61fb      	str	r3, [r7, #28]
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	4b45      	ldr	r3, [pc, #276]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	4a44      	ldr	r2, [pc, #272]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000ab2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab8:	4b42      	ldr	r3, [pc, #264]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	4b3e      	ldr	r3, [pc, #248]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a3d      	ldr	r2, [pc, #244]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad4:	4b3b      	ldr	r3, [pc, #236]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	4b37      	ldr	r3, [pc, #220]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a36      	ldr	r2, [pc, #216]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	4b30      	ldr	r3, [pc, #192]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a2f      	ldr	r2, [pc, #188]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	4a28      	ldr	r2, [pc, #160]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
 8000b28:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <HAL_ETH_MspInit+0x178>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b34:	2332      	movs	r3, #50	; 0x32
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b44:	230b      	movs	r3, #11
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	481e      	ldr	r0, [pc, #120]	; (8000bc8 <HAL_ETH_MspInit+0x17c>)
 8000b50:	f000 fe56 	bl	8001800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b54:	2386      	movs	r3, #134	; 0x86
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b64:	230b      	movs	r3, #11
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4817      	ldr	r0, [pc, #92]	; (8000bcc <HAL_ETH_MspInit+0x180>)
 8000b70:	f000 fe46 	bl	8001800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b86:	230b      	movs	r3, #11
 8000b88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <HAL_ETH_MspInit+0x184>)
 8000b92:	f000 fe35 	bl	8001800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b96:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba8:	230b      	movs	r3, #11
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <HAL_ETH_MspInit+0x188>)
 8000bb4:	f000 fe24 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bb8:	bf00      	nop
 8000bba:	3738      	adds	r7, #56	; 0x38
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40028000 	.word	0x40028000
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020800 	.word	0x40020800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	40021800 	.word	0x40021800

08000bd8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08e      	sub	sp, #56	; 0x38
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	2230      	movs	r2, #48	; 0x30
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f002 fe89 	bl	8003900 <memset>
  if(hrtc->Instance==RTC)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <HAL_RTC_MspInit+0x4c>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d111      	bne.n	8000c1c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bf8:	2320      	movs	r3, #32
 8000bfa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 fd8e 	bl	8002728 <HAL_RCCEx_PeriphCLKConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000c12:	f7ff feed 	bl	80009f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <HAL_RTC_MspInit+0x50>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c1c:	bf00      	nop
 8000c1e:	3738      	adds	r7, #56	; 0x38
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40002800 	.word	0x40002800
 8000c28:	42470e3c 	.word	0x42470e3c

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <HAL_UART_MspInit+0x84>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d12c      	bne.n	8000ca8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a17      	ldr	r2, [pc, #92]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c74:	f043 0308 	orr.w	r3, r3, #8
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c98:	2307      	movs	r3, #7
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <HAL_UART_MspInit+0x8c>)
 8000ca4:	f000 fdac 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	; 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40004800 	.word	0x40004800
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020c00 	.word	0x40020c00

08000cbc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cdc:	d13f      	bne.n	8000d5e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <HAL_PCD_MspInit+0xac>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a20      	ldr	r2, [pc, #128]	; (8000d68 <HAL_PCD_MspInit+0xac>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <HAL_PCD_MspInit+0xac>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cfa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d0c:	230a      	movs	r3, #10
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	4815      	ldr	r0, [pc, #84]	; (8000d6c <HAL_PCD_MspInit+0xb0>)
 8000d18:	f000 fd72 	bl	8001800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480e      	ldr	r0, [pc, #56]	; (8000d6c <HAL_PCD_MspInit+0xb0>)
 8000d32:	f000 fd65 	bl	8001800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <HAL_PCD_MspInit+0xac>)
 8000d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <HAL_PCD_MspInit+0xac>)
 8000d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d40:	6353      	str	r3, [r2, #52]	; 0x34
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_PCD_MspInit+0xac>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <HAL_PCD_MspInit+0xac>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_PCD_MspInit+0xac>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	; 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler+0x4>

08000d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbc:	f000 f8c8 	bl	8000f50 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000dc0:	f000 f9ef 	bl	80011a2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd0:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <_sbrk+0x5c>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <_sbrk+0x60>)
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <_sbrk+0x64>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <_sbrk+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d207      	bcs.n	8000e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df8:	f002 fd58 	bl	80038ac <__errno>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	220c      	movs	r2, #12
 8000e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e009      	b.n	8000e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <_sbrk+0x64>)
 8000e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20030000 	.word	0x20030000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	20000854 	.word	0x20000854
 8000e30:	20000870 	.word	0x20000870

08000e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <SystemInit+0x20>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <SystemInit+0x20>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e90 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e5e:	490e      	ldr	r1, [pc, #56]	; (8000e98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e74:	4c0b      	ldr	r4, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e82:	f7ff ffd7 	bl	8000e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e86:	f002 fd17 	bl	80038b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff fbb9 	bl	8000600 <main>
  bx  lr    
 8000e8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e90:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e9c:	0800426c 	.word	0x0800426c
  ldr r2, =_sbss
 8000ea0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ea4:	2000086c 	.word	0x2000086c

08000ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC_IRQHandler>
	...

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <HAL_Init+0x40>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_Init+0x40>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_Init+0x40>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 f931 	bl	800113c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f808 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fd8c 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f93b 	bl	800118a <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f911 	bl	8001152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000004 	.word	0x20000004

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000858 	.word	0x20000858

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000858 	.word	0x20000858

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	db0a      	blt.n	8001066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	490c      	ldr	r1, [pc, #48]	; (8001088 <__NVIC_SetPriority+0x4c>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	440b      	add	r3, r1
 8001060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001064:	e00a      	b.n	800107c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4908      	ldr	r1, [pc, #32]	; (800108c <__NVIC_SetPriority+0x50>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	3b04      	subs	r3, #4
 8001074:	0112      	lsls	r2, r2, #4
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	440b      	add	r3, r1
 800107a:	761a      	strb	r2, [r3, #24]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000e100 	.word	0xe000e100
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f1c3 0307 	rsb	r3, r3, #7
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	bf28      	it	cs
 80010ae:	2304      	movcs	r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3304      	adds	r3, #4
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d902      	bls.n	80010c0 <NVIC_EncodePriority+0x30>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3b03      	subs	r3, #3
 80010be:	e000      	b.n	80010c2 <NVIC_EncodePriority+0x32>
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43da      	mvns	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	401a      	ands	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43d9      	mvns	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	4313      	orrs	r3, r2
         );
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3724      	adds	r7, #36	; 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001108:	d301      	bcc.n	800110e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110a:	2301      	movs	r3, #1
 800110c:	e00f      	b.n	800112e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <SysTick_Config+0x40>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001116:	210f      	movs	r1, #15
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f7ff ff8e 	bl	800103c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <SysTick_Config+0x40>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <SysTick_Config+0x40>)
 8001128:	2207      	movs	r2, #7
 800112a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	e000e010 	.word	0xe000e010

0800113c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff47 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001164:	f7ff ff5c 	bl	8001020 <__NVIC_GetPriorityGrouping>
 8001168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff ff8e 	bl	8001090 <NVIC_EncodePriority>
 8001174:	4602      	mov	r2, r0
 8001176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff5d 	bl	800103c <__NVIC_SetPriority>
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffb0 	bl	80010f8 <SysTick_Config>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80011a6:	f7ff f9f5 	bl	8000594 <HAL_SYSTICK_Callback>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e06c      	b.n	800129c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d106      	bne.n	80011da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2223      	movs	r2, #35	; 0x23
 80011d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff fc39 	bl	8000a4c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <HAL_ETH_Init+0xf4>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a30      	ldr	r2, [pc, #192]	; (80012a4 <HAL_ETH_Init+0xf4>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <HAL_ETH_Init+0xf4>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011f6:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <HAL_ETH_Init+0xf8>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	4a2b      	ldr	r2, [pc, #172]	; (80012a8 <HAL_ETH_Init+0xf8>)
 80011fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001200:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001202:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <HAL_ETH_Init+0xf8>)
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	4927      	ldr	r1, [pc, #156]	; (80012a8 <HAL_ETH_Init+0xf8>)
 800120c:	4313      	orrs	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001210:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <HAL_ETH_Init+0xf8>)
 8001212:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800122a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800122c:	f7ff fea4 	bl	8000f78 <HAL_GetTick>
 8001230:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001232:	e011      	b.n	8001258 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001234:	f7ff fea0 	bl	8000f78 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001242:	d909      	bls.n	8001258 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2204      	movs	r2, #4
 8001248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	22e0      	movs	r2, #224	; 0xe0
 8001250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e021      	b.n	800129c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1e4      	bne.n	8001234 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f958 	bl	8001520 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f9ff 	bl	8001674 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 fa55 	bl	8001726 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	461a      	mov	r2, r3
 8001282:	2100      	movs	r1, #0
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f9bd 	bl	8001604 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2210      	movs	r2, #16
 8001296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40013800 	.word	0x40013800

080012ac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	4b51      	ldr	r3, [pc, #324]	; (8001408 <ETH_SetMACConfig+0x15c>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	7c1b      	ldrb	r3, [r3, #16]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d102      	bne.n	80012d4 <ETH_SetMACConfig+0x28>
 80012ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012d2:	e000      	b.n	80012d6 <ETH_SetMACConfig+0x2a>
 80012d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	7c5b      	ldrb	r3, [r3, #17]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d102      	bne.n	80012e4 <ETH_SetMACConfig+0x38>
 80012de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012e2:	e000      	b.n	80012e6 <ETH_SetMACConfig+0x3a>
 80012e4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	7fdb      	ldrb	r3, [r3, #31]
 80012f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80012f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	7f92      	ldrb	r2, [r2, #30]
 8001300:	2a00      	cmp	r2, #0
 8001302:	d102      	bne.n	800130a <ETH_SetMACConfig+0x5e>
 8001304:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001308:	e000      	b.n	800130c <ETH_SetMACConfig+0x60>
 800130a:	2200      	movs	r2, #0
                        macconf->Speed |
 800130c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	7f1b      	ldrb	r3, [r3, #28]
 8001312:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001314:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800131a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	791b      	ldrb	r3, [r3, #4]
 8001320:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001322:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	f892 2020 	ldrb.w	r2, [r2, #32]
 800132a:	2a00      	cmp	r2, #0
 800132c:	d102      	bne.n	8001334 <ETH_SetMACConfig+0x88>
 800132e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001332:	e000      	b.n	8001336 <ETH_SetMACConfig+0x8a>
 8001334:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001336:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	7bdb      	ldrb	r3, [r3, #15]
 800133c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800133e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001344:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800134c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800134e:	4313      	orrs	r3, r2
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001366:	2001      	movs	r0, #1
 8001368:	f7ff fe12 	bl	8000f90 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001382:	4013      	ands	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001392:	2a00      	cmp	r2, #0
 8001394:	d101      	bne.n	800139a <ETH_SetMACConfig+0xee>
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	e000      	b.n	800139c <ETH_SetMACConfig+0xf0>
 800139a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800139c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80013aa:	2a01      	cmp	r2, #1
 80013ac:	d101      	bne.n	80013b2 <ETH_SetMACConfig+0x106>
 80013ae:	2208      	movs	r2, #8
 80013b0:	e000      	b.n	80013b4 <ETH_SetMACConfig+0x108>
 80013b2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80013b4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80013bc:	2a01      	cmp	r2, #1
 80013be:	d101      	bne.n	80013c4 <ETH_SetMACConfig+0x118>
 80013c0:	2204      	movs	r2, #4
 80013c2:	e000      	b.n	80013c6 <ETH_SetMACConfig+0x11a>
 80013c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80013ce:	2a01      	cmp	r2, #1
 80013d0:	d101      	bne.n	80013d6 <ETH_SetMACConfig+0x12a>
 80013d2:	2202      	movs	r2, #2
 80013d4:	e000      	b.n	80013d8 <ETH_SetMACConfig+0x12c>
 80013d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013d8:	4313      	orrs	r3, r2
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff fdcd 	bl	8000f90 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	ff20810f 	.word	0xff20810f

0800140c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4b3d      	ldr	r3, [pc, #244]	; (800151c <ETH_SetDMAConfig+0x110>)
 8001426:	4013      	ands	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	7b1b      	ldrb	r3, [r3, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <ETH_SetDMAConfig+0x2c>
 8001432:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001436:	e000      	b.n	800143a <ETH_SetDMAConfig+0x2e>
 8001438:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	7b5b      	ldrb	r3, [r3, #13]
 800143e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001440:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	7f52      	ldrb	r2, [r2, #29]
 8001446:	2a00      	cmp	r2, #0
 8001448:	d102      	bne.n	8001450 <ETH_SetDMAConfig+0x44>
 800144a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800144e:	e000      	b.n	8001452 <ETH_SetDMAConfig+0x46>
 8001450:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001452:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	7b9b      	ldrb	r3, [r3, #14]
 8001458:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800145a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001460:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	7f1b      	ldrb	r3, [r3, #28]
 8001466:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001468:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	7f9b      	ldrb	r3, [r3, #30]
 800146e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001470:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001476:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800147e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001480:	4313      	orrs	r3, r2
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	4313      	orrs	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001490:	461a      	mov	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014a2:	2001      	movs	r0, #1
 80014a4:	f7ff fd74 	bl	8000f90 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b0:	461a      	mov	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	791b      	ldrb	r3, [r3, #4]
 80014ba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014c0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80014c6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014cc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014d4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80014d6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014de:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014e4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014f2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001500:	2001      	movs	r0, #1
 8001502:	f7ff fd45 	bl	8000f90 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	f8de3f23 	.word	0xf8de3f23

08001520 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0a6      	sub	sp, #152	; 0x98
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001528:	2301      	movs	r3, #1
 800152a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800152e:	2301      	movs	r3, #1
 8001530:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001534:	2300      	movs	r3, #0
 8001536:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800153e:	2301      	movs	r3, #1
 8001540:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800154a:	2301      	movs	r3, #1
 800154c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800155c:	2300      	movs	r3, #0
 800155e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001566:	2300      	movs	r3, #0
 8001568:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001582:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001586:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001588:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800158c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001594:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001598:	4619      	mov	r1, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff fe86 	bl	80012ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80015a0:	2301      	movs	r3, #1
 80015a2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80015a4:	2301      	movs	r3, #1
 80015a6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80015a8:	2301      	movs	r3, #1
 80015aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80015ae:	2301      	movs	r3, #1
 80015b0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80015c6:	2301      	movs	r3, #1
 80015c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80015cc:	2301      	movs	r3, #1
 80015ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80015d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80015d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80015dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	4619      	mov	r1, r3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff08 	bl	800140c <ETH_SetDMAConfig>
}
 80015fc:	bf00      	nop
 80015fe:	3798      	adds	r7, #152	; 0x98
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3305      	adds	r3, #5
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	3204      	adds	r2, #4
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	4313      	orrs	r3, r2
 8001620:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <ETH_MACAddressConfig+0x68>)
 8001626:	4413      	add	r3, r2
 8001628:	461a      	mov	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3303      	adds	r3, #3
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	061a      	lsls	r2, r3, #24
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3302      	adds	r3, #2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	041b      	lsls	r3, r3, #16
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3301      	adds	r3, #1
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	4313      	orrs	r3, r2
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	7812      	ldrb	r2, [r2, #0]
 800164e:	4313      	orrs	r3, r2
 8001650:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <ETH_MACAddressConfig+0x6c>)
 8001656:	4413      	add	r3, r2
 8001658:	461a      	mov	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	6013      	str	r3, [r2, #0]
}
 800165e:	bf00      	nop
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40028040 	.word	0x40028040
 8001670:	40028044 	.word	0x40028044

08001674 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	e03e      	b.n	8001700 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68d9      	ldr	r1, [r3, #12]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	2200      	movs	r2, #0
 800169e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	3206      	adds	r2, #6
 80016b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d80c      	bhi.n	80016e4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68d9      	ldr	r1, [r3, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	461a      	mov	r2, r3
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	e004      	b.n	80016ee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	461a      	mov	r2, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3301      	adds	r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d9bd      	bls.n	8001682 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001718:	611a      	str	r2, [r3, #16]
}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001726:	b480      	push	{r7}
 8001728:	b085      	sub	sp, #20
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	e046      	b.n	80017c2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6919      	ldr	r1, [r3, #16]
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001770:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001778:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001786:	68b9      	ldr	r1, [r7, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	3212      	adds	r2, #18
 800178e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d80c      	bhi.n	80017b2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6919      	ldr	r1, [r3, #16]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	461a      	mov	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	e004      	b.n	80017bc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	461a      	mov	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3301      	adds	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d9b5      	bls.n	8001734 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f2:	60da      	str	r2, [r3, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	e177      	b.n	8001b0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800181c:	2201      	movs	r2, #1
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	429a      	cmp	r2, r3
 8001836:	f040 8166 	bne.w	8001b06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b01      	cmp	r3, #1
 8001844:	d005      	beq.n	8001852 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800184e:	2b02      	cmp	r3, #2
 8001850:	d130      	bne.n	80018b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001888:	2201      	movs	r2, #1
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 0201 	and.w	r2, r3, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d017      	beq.n	80018f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d123      	bne.n	8001944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	08da      	lsrs	r2, r3, #3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3208      	adds	r2, #8
 8001904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	691a      	ldr	r2, [r3, #16]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	08da      	lsrs	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3208      	adds	r2, #8
 800193e:	69b9      	ldr	r1, [r7, #24]
 8001940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0203 	and.w	r2, r3, #3
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80c0 	beq.w	8001b06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	4b66      	ldr	r3, [pc, #408]	; (8001b24 <HAL_GPIO_Init+0x324>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a65      	ldr	r2, [pc, #404]	; (8001b24 <HAL_GPIO_Init+0x324>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b63      	ldr	r3, [pc, #396]	; (8001b24 <HAL_GPIO_Init+0x324>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a2:	4a61      	ldr	r2, [pc, #388]	; (8001b28 <HAL_GPIO_Init+0x328>)
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	3302      	adds	r3, #2
 80019aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	220f      	movs	r2, #15
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <HAL_GPIO_Init+0x32c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d037      	beq.n	8001a3e <HAL_GPIO_Init+0x23e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a57      	ldr	r2, [pc, #348]	; (8001b30 <HAL_GPIO_Init+0x330>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d031      	beq.n	8001a3a <HAL_GPIO_Init+0x23a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a56      	ldr	r2, [pc, #344]	; (8001b34 <HAL_GPIO_Init+0x334>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d02b      	beq.n	8001a36 <HAL_GPIO_Init+0x236>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a55      	ldr	r2, [pc, #340]	; (8001b38 <HAL_GPIO_Init+0x338>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d025      	beq.n	8001a32 <HAL_GPIO_Init+0x232>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a54      	ldr	r2, [pc, #336]	; (8001b3c <HAL_GPIO_Init+0x33c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d01f      	beq.n	8001a2e <HAL_GPIO_Init+0x22e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a53      	ldr	r2, [pc, #332]	; (8001b40 <HAL_GPIO_Init+0x340>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d019      	beq.n	8001a2a <HAL_GPIO_Init+0x22a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a52      	ldr	r2, [pc, #328]	; (8001b44 <HAL_GPIO_Init+0x344>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d013      	beq.n	8001a26 <HAL_GPIO_Init+0x226>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a51      	ldr	r2, [pc, #324]	; (8001b48 <HAL_GPIO_Init+0x348>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d00d      	beq.n	8001a22 <HAL_GPIO_Init+0x222>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a50      	ldr	r2, [pc, #320]	; (8001b4c <HAL_GPIO_Init+0x34c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d007      	beq.n	8001a1e <HAL_GPIO_Init+0x21e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4f      	ldr	r2, [pc, #316]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d101      	bne.n	8001a1a <HAL_GPIO_Init+0x21a>
 8001a16:	2309      	movs	r3, #9
 8001a18:	e012      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a1a:	230a      	movs	r3, #10
 8001a1c:	e010      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a1e:	2308      	movs	r3, #8
 8001a20:	e00e      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a22:	2307      	movs	r3, #7
 8001a24:	e00c      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a26:	2306      	movs	r3, #6
 8001a28:	e00a      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a2a:	2305      	movs	r3, #5
 8001a2c:	e008      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a32:	2303      	movs	r3, #3
 8001a34:	e004      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e002      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	f002 0203 	and.w	r2, r2, #3
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	4093      	lsls	r3, r2
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a50:	4935      	ldr	r1, [pc, #212]	; (8001b28 <HAL_GPIO_Init+0x328>)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5e:	4b3d      	ldr	r3, [pc, #244]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a82:	4a34      	ldr	r2, [pc, #208]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a88:	4b32      	ldr	r3, [pc, #200]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aac:	4a29      	ldr	r2, [pc, #164]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ab2:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001adc:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b00:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b0f      	cmp	r3, #15
 8001b10:	f67f ae84 	bls.w	800181c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020400 	.word	0x40020400
 8001b34:	40020800 	.word	0x40020800
 8001b38:	40020c00 	.word	0x40020c00
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40021400 	.word	0x40021400
 8001b44:	40021800 	.word	0x40021800
 8001b48:	40021c00 	.word	0x40021c00
 8001b4c:	40022000 	.word	0x40022000
 8001b50:	40022400 	.word	0x40022400
 8001b54:	40013c00 	.word	0x40013c00

08001b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
 8001b64:	4613      	mov	r3, r2
 8001b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b68:	787b      	ldrb	r3, [r7, #1]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b6e:	887a      	ldrh	r2, [r7, #2]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b74:	e003      	b.n	8001b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b76:	887b      	ldrh	r3, [r7, #2]
 8001b78:	041a      	lsls	r2, r3, #16
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	619a      	str	r2, [r3, #24]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b085      	sub	sp, #20
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b9c:	887a      	ldrh	r2, [r7, #2]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	041a      	lsls	r2, r3, #16
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	400b      	ands	r3, r1
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	619a      	str	r2, [r3, #24]
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc0:	b08f      	sub	sp, #60	; 0x3c
 8001bc2:	af0a      	add	r7, sp, #40	; 0x28
 8001bc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e10f      	b.n	8001df0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff f866 	bl	8000cbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f001 fbab 	bl	800336a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	687e      	ldr	r6, [r7, #4]
 8001c1c:	466d      	mov	r5, sp
 8001c1e:	f106 0410 	add.w	r4, r6, #16
 8001c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c32:	1d33      	adds	r3, r6, #4
 8001c34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c36:	6838      	ldr	r0, [r7, #0]
 8001c38:	f001 fb36 	bl	80032a8 <USB_CoreInit>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2202      	movs	r2, #2
 8001c46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e0d0      	b.n	8001df0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 fb99 	bl	800338c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	e04a      	b.n	8001cf6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	333d      	adds	r3, #61	; 0x3d
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	333c      	adds	r3, #60	; 0x3c
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	b298      	uxth	r0, r3
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	3344      	adds	r3, #68	; 0x44
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	3340      	adds	r3, #64	; 0x40
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3348      	adds	r3, #72	; 0x48
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	334c      	adds	r3, #76	; 0x4c
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	3354      	adds	r3, #84	; 0x54
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d3af      	bcc.n	8001c60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	e044      	b.n	8001d90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d06:	7bfa      	ldrb	r2, [r7, #15]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	440b      	add	r3, r1
 8001d14:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d74:	7bfa      	ldrb	r2, [r7, #15]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d3b5      	bcc.n	8001d06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	687e      	ldr	r6, [r7, #4]
 8001da2:	466d      	mov	r5, sp
 8001da4:	f106 0410 	add.w	r4, r6, #16
 8001da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001db4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001db8:	1d33      	adds	r3, r6, #4
 8001dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dbc:	6838      	ldr	r0, [r7, #0]
 8001dbe:	f001 fb31 	bl	8003424 <USB_DevInit>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e00d      	b.n	8001df0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f001 fcfc 	bl	80037e6 <USB_DevDisconnect>

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001df8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e267      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d075      	beq.n	8001f02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e16:	4b88      	ldr	r3, [pc, #544]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d00c      	beq.n	8001e3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e22:	4b85      	ldr	r3, [pc, #532]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d112      	bne.n	8001e54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e2e:	4b82      	ldr	r3, [pc, #520]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e3a:	d10b      	bne.n	8001e54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	4b7e      	ldr	r3, [pc, #504]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d05b      	beq.n	8001f00 <HAL_RCC_OscConfig+0x108>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d157      	bne.n	8001f00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e242      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5c:	d106      	bne.n	8001e6c <HAL_RCC_OscConfig+0x74>
 8001e5e:	4b76      	ldr	r3, [pc, #472]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a75      	ldr	r2, [pc, #468]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e01d      	b.n	8001ea8 <HAL_RCC_OscConfig+0xb0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x98>
 8001e76:	4b70      	ldr	r3, [pc, #448]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a6f      	ldr	r2, [pc, #444]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b6d      	ldr	r3, [pc, #436]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a6c      	ldr	r2, [pc, #432]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0xb0>
 8001e90:	4b69      	ldr	r3, [pc, #420]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a68      	ldr	r2, [pc, #416]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b66      	ldr	r3, [pc, #408]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a65      	ldr	r2, [pc, #404]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d013      	beq.n	8001ed8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f862 	bl	8000f78 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7ff f85e 	bl	8000f78 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e207      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	4b5b      	ldr	r3, [pc, #364]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xc0>
 8001ed6:	e014      	b.n	8001f02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff f84e 	bl	8000f78 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff f84a 	bl	8000f78 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1f3      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	4b51      	ldr	r3, [pc, #324]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0xe8>
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d063      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f0e:	4b4a      	ldr	r3, [pc, #296]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00b      	beq.n	8001f32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1a:	4b47      	ldr	r3, [pc, #284]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d11c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f26:	4b44      	ldr	r3, [pc, #272]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d116      	bne.n	8001f60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	4b41      	ldr	r3, [pc, #260]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_RCC_OscConfig+0x152>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e1c7      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4a:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4937      	ldr	r1, [pc, #220]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	e03a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f68:	4b34      	ldr	r3, [pc, #208]	; (800203c <HAL_RCC_OscConfig+0x244>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6e:	f7ff f803 	bl	8000f78 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f76:	f7fe ffff 	bl	8000f78 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e1a8      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b28      	ldr	r3, [pc, #160]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4925      	ldr	r1, [pc, #148]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
 8001fa8:	e015      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_RCC_OscConfig+0x244>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7fe ffe2 	bl	8000f78 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7fe ffde 	bl	8000f78 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e187      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d036      	beq.n	8002050 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d016      	beq.n	8002018 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_RCC_OscConfig+0x248>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7fe ffc2 	bl	8000f78 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff8:	f7fe ffbe 	bl	8000f78 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e167      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_OscConfig+0x240>)
 800200c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x200>
 8002016:	e01b      	b.n	8002050 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_RCC_OscConfig+0x248>)
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201e:	f7fe ffab 	bl	8000f78 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002024:	e00e      	b.n	8002044 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002026:	f7fe ffa7 	bl	8000f78 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d907      	bls.n	8002044 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e150      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
 8002038:	40023800 	.word	0x40023800
 800203c:	42470000 	.word	0x42470000
 8002040:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002044:	4b88      	ldr	r3, [pc, #544]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1ea      	bne.n	8002026 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8097 	beq.w	800218c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002062:	4b81      	ldr	r3, [pc, #516]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10f      	bne.n	800208e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	4b7d      	ldr	r3, [pc, #500]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a7c      	ldr	r2, [pc, #496]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b7a      	ldr	r3, [pc, #488]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208a:	2301      	movs	r3, #1
 800208c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	4b77      	ldr	r3, [pc, #476]	; (800226c <HAL_RCC_OscConfig+0x474>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d118      	bne.n	80020cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209a:	4b74      	ldr	r3, [pc, #464]	; (800226c <HAL_RCC_OscConfig+0x474>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a73      	ldr	r2, [pc, #460]	; (800226c <HAL_RCC_OscConfig+0x474>)
 80020a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a6:	f7fe ff67 	bl	8000f78 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ae:	f7fe ff63 	bl	8000f78 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e10c      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	4b6a      	ldr	r3, [pc, #424]	; (800226c <HAL_RCC_OscConfig+0x474>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x2ea>
 80020d4:	4b64      	ldr	r3, [pc, #400]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	4a63      	ldr	r2, [pc, #396]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6713      	str	r3, [r2, #112]	; 0x70
 80020e0:	e01c      	b.n	800211c <HAL_RCC_OscConfig+0x324>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x30c>
 80020ea:	4b5f      	ldr	r3, [pc, #380]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	4a5e      	ldr	r2, [pc, #376]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020f0:	f043 0304 	orr.w	r3, r3, #4
 80020f4:	6713      	str	r3, [r2, #112]	; 0x70
 80020f6:	4b5c      	ldr	r3, [pc, #368]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	4a5b      	ldr	r2, [pc, #364]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6713      	str	r3, [r2, #112]	; 0x70
 8002102:	e00b      	b.n	800211c <HAL_RCC_OscConfig+0x324>
 8002104:	4b58      	ldr	r3, [pc, #352]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	4a57      	ldr	r2, [pc, #348]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 800210a:	f023 0301 	bic.w	r3, r3, #1
 800210e:	6713      	str	r3, [r2, #112]	; 0x70
 8002110:	4b55      	ldr	r3, [pc, #340]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	4a54      	ldr	r2, [pc, #336]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002116:	f023 0304 	bic.w	r3, r3, #4
 800211a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d015      	beq.n	8002150 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7fe ff28 	bl	8000f78 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212a:	e00a      	b.n	8002142 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7fe ff24 	bl	8000f78 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0cb      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002142:	4b49      	ldr	r3, [pc, #292]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0ee      	beq.n	800212c <HAL_RCC_OscConfig+0x334>
 800214e:	e014      	b.n	800217a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002150:	f7fe ff12 	bl	8000f78 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002156:	e00a      	b.n	800216e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002158:	f7fe ff0e 	bl	8000f78 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e0b5      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216e:	4b3e      	ldr	r3, [pc, #248]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1ee      	bne.n	8002158 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800217a:	7dfb      	ldrb	r3, [r7, #23]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d105      	bne.n	800218c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002180:	4b39      	ldr	r3, [pc, #228]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	4a38      	ldr	r2, [pc, #224]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 80a1 	beq.w	80022d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002196:	4b34      	ldr	r3, [pc, #208]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d05c      	beq.n	800225c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d141      	bne.n	800222e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021aa:	4b31      	ldr	r3, [pc, #196]	; (8002270 <HAL_RCC_OscConfig+0x478>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7fe fee2 	bl	8000f78 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b8:	f7fe fede 	bl	8000f78 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e087      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ca:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69da      	ldr	r2, [r3, #28]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	019b      	lsls	r3, r3, #6
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ec:	085b      	lsrs	r3, r3, #1
 80021ee:	3b01      	subs	r3, #1
 80021f0:	041b      	lsls	r3, r3, #16
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	061b      	lsls	r3, r3, #24
 80021fa:	491b      	ldr	r1, [pc, #108]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x478>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7fe feb7 	bl	8000f78 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220e:	f7fe feb3 	bl	8000f78 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e05c      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x416>
 800222c:	e054      	b.n	80022d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_RCC_OscConfig+0x478>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7fe fea0 	bl	8000f78 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe fe9c 	bl	8000f78 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e045      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_OscConfig+0x470>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x444>
 800225a:	e03d      	b.n	80022d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d107      	bne.n	8002274 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e038      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
 8002268:	40023800 	.word	0x40023800
 800226c:	40007000 	.word	0x40007000
 8002270:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002274:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_RCC_OscConfig+0x4ec>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d028      	beq.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d121      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d11a      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d111      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	3b01      	subs	r3, #1
 80022be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d107      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0cc      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022fc:	4b68      	ldr	r3, [pc, #416]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d90c      	bls.n	8002324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b65      	ldr	r3, [pc, #404]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0b8      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800233c:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4a58      	ldr	r2, [pc, #352]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800235e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b50      	ldr	r3, [pc, #320]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	494d      	ldr	r1, [pc, #308]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d044      	beq.n	8002408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d119      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e07f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d003      	beq.n	80023a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a6:	4b3f      	ldr	r3, [pc, #252]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e06f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b6:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e067      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f023 0203 	bic.w	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4934      	ldr	r1, [pc, #208]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d8:	f7fe fdce 	bl	8000f78 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e0:	f7fe fdca 	bl	8000f78 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e04f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 020c 	and.w	r2, r3, #12
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	429a      	cmp	r2, r3
 8002406:	d1eb      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002408:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d20c      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e032      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4916      	ldr	r1, [pc, #88]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	490e      	ldr	r1, [pc, #56]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800246e:	f000 f821 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8002472:	4602      	mov	r2, r0
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	490a      	ldr	r1, [pc, #40]	; (80024a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	5ccb      	ldrb	r3, [r1, r3]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fd2e 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023c00 	.word	0x40023c00
 80024a4:	40023800 	.word	0x40023800
 80024a8:	08004210 	.word	0x08004210
 80024ac:	20000000 	.word	0x20000000
 80024b0:	20000004 	.word	0x20000004

080024b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024b8:	b094      	sub	sp, #80	; 0x50
 80024ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	647b      	str	r3, [r7, #68]	; 0x44
 80024c0:	2300      	movs	r3, #0
 80024c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024c4:	2300      	movs	r3, #0
 80024c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024cc:	4b79      	ldr	r3, [pc, #484]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d00d      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x40>
 80024d8:	2b08      	cmp	r3, #8
 80024da:	f200 80e1 	bhi.w	80026a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <HAL_RCC_GetSysClockFreq+0x34>
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d003      	beq.n	80024ee <HAL_RCC_GetSysClockFreq+0x3a>
 80024e6:	e0db      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024e8:	4b73      	ldr	r3, [pc, #460]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80024ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024ec:	e0db      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ee:	4b73      	ldr	r3, [pc, #460]	; (80026bc <HAL_RCC_GetSysClockFreq+0x208>)
 80024f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024f2:	e0d8      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f4:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024fe:	4b6d      	ldr	r3, [pc, #436]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d063      	beq.n	80025d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250a:	4b6a      	ldr	r3, [pc, #424]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	099b      	lsrs	r3, r3, #6
 8002510:	2200      	movs	r2, #0
 8002512:	63bb      	str	r3, [r7, #56]	; 0x38
 8002514:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800251c:	633b      	str	r3, [r7, #48]	; 0x30
 800251e:	2300      	movs	r3, #0
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
 8002522:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002526:	4622      	mov	r2, r4
 8002528:	462b      	mov	r3, r5
 800252a:	f04f 0000 	mov.w	r0, #0
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	0159      	lsls	r1, r3, #5
 8002534:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002538:	0150      	lsls	r0, r2, #5
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4621      	mov	r1, r4
 8002540:	1a51      	subs	r1, r2, r1
 8002542:	6139      	str	r1, [r7, #16]
 8002544:	4629      	mov	r1, r5
 8002546:	eb63 0301 	sbc.w	r3, r3, r1
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002558:	4659      	mov	r1, fp
 800255a:	018b      	lsls	r3, r1, #6
 800255c:	4651      	mov	r1, sl
 800255e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002562:	4651      	mov	r1, sl
 8002564:	018a      	lsls	r2, r1, #6
 8002566:	4651      	mov	r1, sl
 8002568:	ebb2 0801 	subs.w	r8, r2, r1
 800256c:	4659      	mov	r1, fp
 800256e:	eb63 0901 	sbc.w	r9, r3, r1
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800257e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002586:	4690      	mov	r8, r2
 8002588:	4699      	mov	r9, r3
 800258a:	4623      	mov	r3, r4
 800258c:	eb18 0303 	adds.w	r3, r8, r3
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	462b      	mov	r3, r5
 8002594:	eb49 0303 	adc.w	r3, r9, r3
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025a6:	4629      	mov	r1, r5
 80025a8:	024b      	lsls	r3, r1, #9
 80025aa:	4621      	mov	r1, r4
 80025ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025b0:	4621      	mov	r1, r4
 80025b2:	024a      	lsls	r2, r1, #9
 80025b4:	4610      	mov	r0, r2
 80025b6:	4619      	mov	r1, r3
 80025b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ba:	2200      	movs	r2, #0
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80025be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025c4:	f7fd fe64 	bl	8000290 <__aeabi_uldivmod>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4613      	mov	r3, r2
 80025ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025d0:	e058      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d2:	4b38      	ldr	r3, [pc, #224]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	2200      	movs	r2, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	4611      	mov	r1, r2
 80025de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025e2:	623b      	str	r3, [r7, #32]
 80025e4:	2300      	movs	r3, #0
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
 80025e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025ec:	4642      	mov	r2, r8
 80025ee:	464b      	mov	r3, r9
 80025f0:	f04f 0000 	mov.w	r0, #0
 80025f4:	f04f 0100 	mov.w	r1, #0
 80025f8:	0159      	lsls	r1, r3, #5
 80025fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025fe:	0150      	lsls	r0, r2, #5
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4641      	mov	r1, r8
 8002606:	ebb2 0a01 	subs.w	sl, r2, r1
 800260a:	4649      	mov	r1, r9
 800260c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800261c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002620:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002624:	ebb2 040a 	subs.w	r4, r2, sl
 8002628:	eb63 050b 	sbc.w	r5, r3, fp
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	00eb      	lsls	r3, r5, #3
 8002636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800263a:	00e2      	lsls	r2, r4, #3
 800263c:	4614      	mov	r4, r2
 800263e:	461d      	mov	r5, r3
 8002640:	4643      	mov	r3, r8
 8002642:	18e3      	adds	r3, r4, r3
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	464b      	mov	r3, r9
 8002648:	eb45 0303 	adc.w	r3, r5, r3
 800264c:	607b      	str	r3, [r7, #4]
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	e9d7 4500 	ldrd	r4, r5, [r7]
 800265a:	4629      	mov	r1, r5
 800265c:	028b      	lsls	r3, r1, #10
 800265e:	4621      	mov	r1, r4
 8002660:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002664:	4621      	mov	r1, r4
 8002666:	028a      	lsls	r2, r1, #10
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800266e:	2200      	movs	r2, #0
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	61fa      	str	r2, [r7, #28]
 8002674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002678:	f7fd fe0a 	bl	8000290 <__aeabi_uldivmod>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4613      	mov	r3, r2
 8002682:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	0c1b      	lsrs	r3, r3, #16
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	3301      	adds	r3, #1
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002694:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800269e:	e002      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80026a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3750      	adds	r7, #80	; 0x50
 80026ac:	46bd      	mov	sp, r7
 80026ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	00f42400 	.word	0x00f42400
 80026bc:	007a1200 	.word	0x007a1200

080026c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026c6:	681b      	ldr	r3, [r3, #0]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000000 	.word	0x20000000

080026d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026dc:	f7ff fff0 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	0a9b      	lsrs	r3, r3, #10
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	4903      	ldr	r1, [pc, #12]	; (80026fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40023800 	.word	0x40023800
 80026fc:	08004220 	.word	0x08004220

08002700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002704:	f7ff ffdc 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	0b5b      	lsrs	r3, r3, #13
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	4903      	ldr	r1, [pc, #12]	; (8002724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002716:	5ccb      	ldrb	r3, [r1, r3]
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40023800 	.word	0x40023800
 8002724:	08004220 	.word	0x08004220

08002728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10b      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800274c:	2b00      	cmp	r3, #0
 800274e:	d105      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002758:	2b00      	cmp	r3, #0
 800275a:	d075      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800275c:	4b91      	ldr	r3, [pc, #580]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002762:	f7fe fc09 	bl	8000f78 <HAL_GetTick>
 8002766:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002768:	e008      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800276a:	f7fe fc05 	bl	8000f78 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e189      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800277c:	4b8a      	ldr	r3, [pc, #552]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f0      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d009      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	019a      	lsls	r2, r3, #6
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	071b      	lsls	r3, r3, #28
 80027a0:	4981      	ldr	r1, [pc, #516]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01f      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027b4:	4b7c      	ldr	r3, [pc, #496]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ba:	0f1b      	lsrs	r3, r3, #28
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	019a      	lsls	r2, r3, #6
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	061b      	lsls	r3, r3, #24
 80027ce:	431a      	orrs	r2, r3
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	071b      	lsls	r3, r3, #28
 80027d4:	4974      	ldr	r1, [pc, #464]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027dc:	4b72      	ldr	r3, [pc, #456]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e2:	f023 021f 	bic.w	r2, r3, #31
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	496e      	ldr	r1, [pc, #440]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00d      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	019a      	lsls	r2, r3, #6
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	061b      	lsls	r3, r3, #24
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	071b      	lsls	r3, r3, #28
 8002814:	4964      	ldr	r1, [pc, #400]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800281c:	4b61      	ldr	r3, [pc, #388]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800281e:	2201      	movs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002822:	f7fe fba9 	bl	8000f78 <HAL_GetTick>
 8002826:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002828:	e008      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800282a:	f7fe fba5 	bl	8000f78 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e129      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800283c:	4b5a      	ldr	r3, [pc, #360]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d105      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800285c:	2b00      	cmp	r3, #0
 800285e:	d079      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002860:	4b52      	ldr	r3, [pc, #328]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002866:	f7fe fb87 	bl	8000f78 <HAL_GetTick>
 800286a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800286e:	f7fe fb83 	bl	8000f78 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e107      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002880:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800288c:	d0ef      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b00      	cmp	r3, #0
 8002898:	d020      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800289a:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	0f1b      	lsrs	r3, r3, #28
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	019a      	lsls	r2, r3, #6
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	061b      	lsls	r3, r3, #24
 80028b4:	431a      	orrs	r2, r3
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	071b      	lsls	r3, r3, #28
 80028ba:	493b      	ldr	r1, [pc, #236]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80028c2:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	4934      	ldr	r1, [pc, #208]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d01e      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028e8:	4b2f      	ldr	r3, [pc, #188]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ee:	0e1b      	lsrs	r3, r3, #24
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	019a      	lsls	r2, r3, #6
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	061b      	lsls	r3, r3, #24
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	071b      	lsls	r3, r3, #28
 8002908:	4927      	ldr	r1, [pc, #156]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002910:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002916:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	4922      	ldr	r1, [pc, #136]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800292c:	f7fe fb24 	bl	8000f78 <HAL_GetTick>
 8002930:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002934:	f7fe fb20 	bl	8000f78 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e0a4      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800294e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002952:	d1ef      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 808b 	beq.w	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	4a0f      	ldr	r2, [pc, #60]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800296c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002970:	6413      	str	r3, [r2, #64]	; 0x40
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800297e:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a0b      	ldr	r2, [pc, #44]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002988:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800298a:	f7fe faf5 	bl	8000f78 <HAL_GetTick>
 800298e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002990:	e010      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002992:	f7fe faf1 	bl	8000f78 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d909      	bls.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e075      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80029a4:	42470068 	.word	0x42470068
 80029a8:	40023800 	.word	0x40023800
 80029ac:	42470070 	.word	0x42470070
 80029b0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80029b4:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0e8      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029c0:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d02f      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d028      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029de:	4b2f      	ldr	r3, [pc, #188]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029e8:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ee:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80029f4:	4a29      	ldr	r2, [pc, #164]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029fa:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d114      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002a06:	f7fe fab7 	bl	8000f78 <HAL_GetTick>
 8002a0a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0c:	e00a      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0e:	f7fe fab3 	bl	8000f78 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e035      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0ee      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a3c:	d10d      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002a3e:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a52:	4912      	ldr	r1, [pc, #72]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	608b      	str	r3, [r1, #8]
 8002a58:	e005      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002a5a:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	4a0f      	ldr	r2, [pc, #60]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002a60:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a64:	6093      	str	r3, [r2, #8]
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002a68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a72:	490a      	ldr	r1, [pc, #40]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d004      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002a8c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40007000 	.word	0x40007000
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	42470e40 	.word	0x42470e40
 8002aa4:	424711e0 	.word	0x424711e0

08002aa8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e066      	b.n	8002b8c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	7f5b      	ldrb	r3, [r3, #29]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d105      	bne.n	8002ad4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe f882 	bl	8000bd8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	22ca      	movs	r2, #202	; 0xca
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2253      	movs	r2, #83	; 0x53
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f87a 	bl	8002be4 <RTC_EnterInitMode>
 8002af0:	4603      	mov	r3, r0
 8002af2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d12c      	bne.n	8002b54 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b0c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6899      	ldr	r1, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	68d2      	ldr	r2, [r2, #12]
 8002b34:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6919      	ldr	r1, [r3, #16]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	041a      	lsls	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f881 	bl	8002c52 <RTC_ExitInitMode>
 8002b50:	4603      	mov	r3, r0
 8002b52:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d113      	bne.n	8002b82 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699a      	ldr	r2, [r3, #24]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	22ff      	movs	r2, #255	; 0xff
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bb0:	f7fe f9e2 	bl	8000f78 <HAL_GetTick>
 8002bb4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002bb6:	e009      	b.n	8002bcc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bb8:	f7fe f9de 	bl	8000f78 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc6:	d901      	bls.n	8002bcc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e007      	b.n	8002bdc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0ee      	beq.n	8002bb8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d122      	bne.n	8002c48 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c10:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c12:	f7fe f9b1 	bl	8000f78 <HAL_GetTick>
 8002c16:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002c18:	e00c      	b.n	8002c34 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c1a:	f7fe f9ad 	bl	8000f78 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c28:	d904      	bls.n	8002c34 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <RTC_EnterInitMode+0x64>
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d1e8      	bne.n	8002c1a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c6c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10a      	bne.n	8002c92 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff ff89 	bl	8002b94 <HAL_RTC_WaitForSynchro>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e03f      	b.n	8002d2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fd ffb2 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2224      	movs	r2, #36	; 0x24
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f86d 	bl	8002dc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	4613      	mov	r3, r2
 8002d42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d130      	bne.n	8002db2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_UART_Transmit_IT+0x26>
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e029      	b.n	8002db4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_UART_Transmit_IT+0x38>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e022      	b.n	8002db4 <HAL_UART_Transmit_IT+0x7e>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	88fa      	ldrh	r2, [r7, #6]
 8002d80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	88fa      	ldrh	r2, [r7, #6]
 8002d86:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2221      	movs	r2, #33	; 0x21
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dac:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	e000      	b.n	8002db4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002db2:	2302      	movs	r3, #2
  }
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc4:	b0c0      	sub	sp, #256	; 0x100
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ddc:	68d9      	ldr	r1, [r3, #12]
 8002dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	ea40 0301 	orr.w	r3, r0, r1
 8002de8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e18:	f021 010c 	bic.w	r1, r1, #12
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e26:	430b      	orrs	r3, r1
 8002e28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3a:	6999      	ldr	r1, [r3, #24]
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	ea40 0301 	orr.w	r3, r0, r1
 8002e46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4b8f      	ldr	r3, [pc, #572]	; (800308c <UART_SetConfig+0x2cc>)
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d005      	beq.n	8002e60 <UART_SetConfig+0xa0>
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4b8d      	ldr	r3, [pc, #564]	; (8003090 <UART_SetConfig+0x2d0>)
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d104      	bne.n	8002e6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e60:	f7ff fc4e 	bl	8002700 <HAL_RCC_GetPCLK2Freq>
 8002e64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e68:	e003      	b.n	8002e72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e6a:	f7ff fc35 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 8002e6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e7c:	f040 810c 	bne.w	8003098 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e84:	2200      	movs	r2, #0
 8002e86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e92:	4622      	mov	r2, r4
 8002e94:	462b      	mov	r3, r5
 8002e96:	1891      	adds	r1, r2, r2
 8002e98:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e9a:	415b      	adcs	r3, r3
 8002e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	eb12 0801 	adds.w	r8, r2, r1
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	eb43 0901 	adc.w	r9, r3, r1
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ec2:	4690      	mov	r8, r2
 8002ec4:	4699      	mov	r9, r3
 8002ec6:	4623      	mov	r3, r4
 8002ec8:	eb18 0303 	adds.w	r3, r8, r3
 8002ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ed0:	462b      	mov	r3, r5
 8002ed2:	eb49 0303 	adc.w	r3, r9, r3
 8002ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ee6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002eea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002eee:	460b      	mov	r3, r1
 8002ef0:	18db      	adds	r3, r3, r3
 8002ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	eb42 0303 	adc.w	r3, r2, r3
 8002efa:	657b      	str	r3, [r7, #84]	; 0x54
 8002efc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f04:	f7fd f9c4 	bl	8000290 <__aeabi_uldivmod>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4b61      	ldr	r3, [pc, #388]	; (8003094 <UART_SetConfig+0x2d4>)
 8002f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	011c      	lsls	r4, r3, #4
 8002f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f28:	4642      	mov	r2, r8
 8002f2a:	464b      	mov	r3, r9
 8002f2c:	1891      	adds	r1, r2, r2
 8002f2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f30:	415b      	adcs	r3, r3
 8002f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f38:	4641      	mov	r1, r8
 8002f3a:	eb12 0a01 	adds.w	sl, r2, r1
 8002f3e:	4649      	mov	r1, r9
 8002f40:	eb43 0b01 	adc.w	fp, r3, r1
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f58:	4692      	mov	sl, r2
 8002f5a:	469b      	mov	fp, r3
 8002f5c:	4643      	mov	r3, r8
 8002f5e:	eb1a 0303 	adds.w	r3, sl, r3
 8002f62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f66:	464b      	mov	r3, r9
 8002f68:	eb4b 0303 	adc.w	r3, fp, r3
 8002f6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f84:	460b      	mov	r3, r1
 8002f86:	18db      	adds	r3, r3, r3
 8002f88:	643b      	str	r3, [r7, #64]	; 0x40
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	eb42 0303 	adc.w	r3, r2, r3
 8002f90:	647b      	str	r3, [r7, #68]	; 0x44
 8002f92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f9a:	f7fd f979 	bl	8000290 <__aeabi_uldivmod>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4b3b      	ldr	r3, [pc, #236]	; (8003094 <UART_SetConfig+0x2d4>)
 8002fa6:	fba3 2301 	umull	r2, r3, r3, r1
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2264      	movs	r2, #100	; 0x64
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	1acb      	subs	r3, r1, r3
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002fba:	4b36      	ldr	r3, [pc, #216]	; (8003094 <UART_SetConfig+0x2d4>)
 8002fbc:	fba3 2302 	umull	r2, r3, r3, r2
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fc8:	441c      	add	r4, r3
 8002fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fdc:	4642      	mov	r2, r8
 8002fde:	464b      	mov	r3, r9
 8002fe0:	1891      	adds	r1, r2, r2
 8002fe2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fe4:	415b      	adcs	r3, r3
 8002fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fe8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fec:	4641      	mov	r1, r8
 8002fee:	1851      	adds	r1, r2, r1
 8002ff0:	6339      	str	r1, [r7, #48]	; 0x30
 8002ff2:	4649      	mov	r1, r9
 8002ff4:	414b      	adcs	r3, r1
 8002ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003004:	4659      	mov	r1, fp
 8003006:	00cb      	lsls	r3, r1, #3
 8003008:	4651      	mov	r1, sl
 800300a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800300e:	4651      	mov	r1, sl
 8003010:	00ca      	lsls	r2, r1, #3
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	4603      	mov	r3, r0
 8003018:	4642      	mov	r2, r8
 800301a:	189b      	adds	r3, r3, r2
 800301c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003020:	464b      	mov	r3, r9
 8003022:	460a      	mov	r2, r1
 8003024:	eb42 0303 	adc.w	r3, r2, r3
 8003028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003038:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800303c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003040:	460b      	mov	r3, r1
 8003042:	18db      	adds	r3, r3, r3
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
 8003046:	4613      	mov	r3, r2
 8003048:	eb42 0303 	adc.w	r3, r2, r3
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800304e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003052:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003056:	f7fd f91b 	bl	8000290 <__aeabi_uldivmod>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <UART_SetConfig+0x2d4>)
 8003060:	fba3 1302 	umull	r1, r3, r3, r2
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	2164      	movs	r1, #100	; 0x64
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	3332      	adds	r3, #50	; 0x32
 8003072:	4a08      	ldr	r2, [pc, #32]	; (8003094 <UART_SetConfig+0x2d4>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	f003 0207 	and.w	r2, r3, #7
 800307e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4422      	add	r2, r4
 8003086:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003088:	e105      	b.n	8003296 <UART_SetConfig+0x4d6>
 800308a:	bf00      	nop
 800308c:	40011000 	.word	0x40011000
 8003090:	40011400 	.word	0x40011400
 8003094:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800309c:	2200      	movs	r2, #0
 800309e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80030aa:	4642      	mov	r2, r8
 80030ac:	464b      	mov	r3, r9
 80030ae:	1891      	adds	r1, r2, r2
 80030b0:	6239      	str	r1, [r7, #32]
 80030b2:	415b      	adcs	r3, r3
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
 80030b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030ba:	4641      	mov	r1, r8
 80030bc:	1854      	adds	r4, r2, r1
 80030be:	4649      	mov	r1, r9
 80030c0:	eb43 0501 	adc.w	r5, r3, r1
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	00eb      	lsls	r3, r5, #3
 80030ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030d2:	00e2      	lsls	r2, r4, #3
 80030d4:	4614      	mov	r4, r2
 80030d6:	461d      	mov	r5, r3
 80030d8:	4643      	mov	r3, r8
 80030da:	18e3      	adds	r3, r4, r3
 80030dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030e0:	464b      	mov	r3, r9
 80030e2:	eb45 0303 	adc.w	r3, r5, r3
 80030e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003106:	4629      	mov	r1, r5
 8003108:	008b      	lsls	r3, r1, #2
 800310a:	4621      	mov	r1, r4
 800310c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003110:	4621      	mov	r1, r4
 8003112:	008a      	lsls	r2, r1, #2
 8003114:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003118:	f7fd f8ba 	bl	8000290 <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4b60      	ldr	r3, [pc, #384]	; (80032a4 <UART_SetConfig+0x4e4>)
 8003122:	fba3 2302 	umull	r2, r3, r3, r2
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	011c      	lsls	r4, r3, #4
 800312a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800312e:	2200      	movs	r2, #0
 8003130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003134:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003138:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800313c:	4642      	mov	r2, r8
 800313e:	464b      	mov	r3, r9
 8003140:	1891      	adds	r1, r2, r2
 8003142:	61b9      	str	r1, [r7, #24]
 8003144:	415b      	adcs	r3, r3
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800314c:	4641      	mov	r1, r8
 800314e:	1851      	adds	r1, r2, r1
 8003150:	6139      	str	r1, [r7, #16]
 8003152:	4649      	mov	r1, r9
 8003154:	414b      	adcs	r3, r1
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003164:	4659      	mov	r1, fp
 8003166:	00cb      	lsls	r3, r1, #3
 8003168:	4651      	mov	r1, sl
 800316a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800316e:	4651      	mov	r1, sl
 8003170:	00ca      	lsls	r2, r1, #3
 8003172:	4610      	mov	r0, r2
 8003174:	4619      	mov	r1, r3
 8003176:	4603      	mov	r3, r0
 8003178:	4642      	mov	r2, r8
 800317a:	189b      	adds	r3, r3, r2
 800317c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003180:	464b      	mov	r3, r9
 8003182:	460a      	mov	r2, r1
 8003184:	eb42 0303 	adc.w	r3, r2, r3
 8003188:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	67bb      	str	r3, [r7, #120]	; 0x78
 8003196:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031a4:	4649      	mov	r1, r9
 80031a6:	008b      	lsls	r3, r1, #2
 80031a8:	4641      	mov	r1, r8
 80031aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ae:	4641      	mov	r1, r8
 80031b0:	008a      	lsls	r2, r1, #2
 80031b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031b6:	f7fd f86b 	bl	8000290 <__aeabi_uldivmod>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4b39      	ldr	r3, [pc, #228]	; (80032a4 <UART_SetConfig+0x4e4>)
 80031c0:	fba3 1302 	umull	r1, r3, r3, r2
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	2164      	movs	r1, #100	; 0x64
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	3332      	adds	r3, #50	; 0x32
 80031d2:	4a34      	ldr	r2, [pc, #208]	; (80032a4 <UART_SetConfig+0x4e4>)
 80031d4:	fba2 2303 	umull	r2, r3, r2, r3
 80031d8:	095b      	lsrs	r3, r3, #5
 80031da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031de:	441c      	add	r4, r3
 80031e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031e4:	2200      	movs	r2, #0
 80031e6:	673b      	str	r3, [r7, #112]	; 0x70
 80031e8:	677a      	str	r2, [r7, #116]	; 0x74
 80031ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031ee:	4642      	mov	r2, r8
 80031f0:	464b      	mov	r3, r9
 80031f2:	1891      	adds	r1, r2, r2
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	415b      	adcs	r3, r3
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031fe:	4641      	mov	r1, r8
 8003200:	1851      	adds	r1, r2, r1
 8003202:	6039      	str	r1, [r7, #0]
 8003204:	4649      	mov	r1, r9
 8003206:	414b      	adcs	r3, r1
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003216:	4659      	mov	r1, fp
 8003218:	00cb      	lsls	r3, r1, #3
 800321a:	4651      	mov	r1, sl
 800321c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003220:	4651      	mov	r1, sl
 8003222:	00ca      	lsls	r2, r1, #3
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	4603      	mov	r3, r0
 800322a:	4642      	mov	r2, r8
 800322c:	189b      	adds	r3, r3, r2
 800322e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003230:	464b      	mov	r3, r9
 8003232:	460a      	mov	r2, r1
 8003234:	eb42 0303 	adc.w	r3, r2, r3
 8003238:	66fb      	str	r3, [r7, #108]	; 0x6c
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	663b      	str	r3, [r7, #96]	; 0x60
 8003244:	667a      	str	r2, [r7, #100]	; 0x64
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003252:	4649      	mov	r1, r9
 8003254:	008b      	lsls	r3, r1, #2
 8003256:	4641      	mov	r1, r8
 8003258:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800325c:	4641      	mov	r1, r8
 800325e:	008a      	lsls	r2, r1, #2
 8003260:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003264:	f7fd f814 	bl	8000290 <__aeabi_uldivmod>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <UART_SetConfig+0x4e4>)
 800326e:	fba3 1302 	umull	r1, r3, r3, r2
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	2164      	movs	r1, #100	; 0x64
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	3332      	adds	r3, #50	; 0x32
 8003280:	4a08      	ldr	r2, [pc, #32]	; (80032a4 <UART_SetConfig+0x4e4>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	f003 020f 	and.w	r2, r3, #15
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4422      	add	r2, r4
 8003294:	609a      	str	r2, [r3, #8]
}
 8003296:	bf00      	nop
 8003298:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800329c:	46bd      	mov	sp, r7
 800329e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032a2:	bf00      	nop
 80032a4:	51eb851f 	.word	0x51eb851f

080032a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032a8:	b084      	sub	sp, #16
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	f107 001c 	add.w	r0, r7, #28
 80032b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d122      	bne.n	8003306 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80032d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80032e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d105      	bne.n	80032fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 faa2 	bl	8003844 <USB_CoreReset>
 8003300:	4603      	mov	r3, r0
 8003302:	73fb      	strb	r3, [r7, #15]
 8003304:	e01a      	b.n	800333c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fa96 	bl	8003844 <USB_CoreReset>
 8003318:	4603      	mov	r3, r0
 800331a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800331c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	639a      	str	r2, [r3, #56]	; 0x38
 800332e:	e005      	b.n	800333c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800333c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333e:	2b01      	cmp	r3, #1
 8003340:	d10b      	bne.n	800335a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f043 0206 	orr.w	r2, r3, #6
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f043 0220 	orr.w	r2, r3, #32
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003366:	b004      	add	sp, #16
 8003368:	4770      	bx	lr

0800336a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f023 0201 	bic.w	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d115      	bne.n	80033da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80033ba:	2001      	movs	r0, #1
 80033bc:	f7fd fde8 	bl	8000f90 <HAL_Delay>
      ms++;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	3301      	adds	r3, #1
 80033c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fa2e 	bl	8003828 <USB_GetMode>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d01e      	beq.n	8003410 <USB_SetCurrentMode+0x84>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b31      	cmp	r3, #49	; 0x31
 80033d6:	d9f0      	bls.n	80033ba <USB_SetCurrentMode+0x2e>
 80033d8:	e01a      	b.n	8003410 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d115      	bne.n	800340c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80033ec:	2001      	movs	r0, #1
 80033ee:	f7fd fdcf 	bl	8000f90 <HAL_Delay>
      ms++;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3301      	adds	r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fa15 	bl	8003828 <USB_GetMode>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <USB_SetCurrentMode+0x84>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b31      	cmp	r3, #49	; 0x31
 8003408:	d9f0      	bls.n	80033ec <USB_SetCurrentMode+0x60>
 800340a:	e001      	b.n	8003410 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e005      	b.n	800341c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b32      	cmp	r3, #50	; 0x32
 8003414:	d101      	bne.n	800341a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003424:	b084      	sub	sp, #16
 8003426:	b580      	push	{r7, lr}
 8003428:	b086      	sub	sp, #24
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	e009      	b.n	8003458 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	3340      	adds	r3, #64	; 0x40
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	2200      	movs	r2, #0
 8003450:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	3301      	adds	r3, #1
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	2b0e      	cmp	r3, #14
 800345c:	d9f2      	bls.n	8003444 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800345e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d11c      	bne.n	800349e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003472:	f043 0302 	orr.w	r3, r3, #2
 8003476:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003488:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	639a      	str	r2, [r3, #56]	; 0x38
 800349c:	e00b      	b.n	80034b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80034bc:	461a      	mov	r2, r3
 80034be:	2300      	movs	r3, #0
 80034c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c8:	4619      	mov	r1, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d0:	461a      	mov	r2, r3
 80034d2:	680b      	ldr	r3, [r1, #0]
 80034d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d10c      	bne.n	80034f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80034dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80034e2:	2100      	movs	r1, #0
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f965 	bl	80037b4 <USB_SetDevSpeed>
 80034ea:	e008      	b.n	80034fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80034ec:	2101      	movs	r1, #1
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f960 	bl	80037b4 <USB_SetDevSpeed>
 80034f4:	e003      	b.n	80034fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80034f6:	2103      	movs	r1, #3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f95b 	bl	80037b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80034fe:	2110      	movs	r1, #16
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f8f3 	bl	80036ec <USB_FlushTxFifo>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f91f 	bl	8003754 <USB_FlushRxFifo>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003526:	461a      	mov	r2, r3
 8003528:	2300      	movs	r3, #0
 800352a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003532:	461a      	mov	r2, r3
 8003534:	2300      	movs	r3, #0
 8003536:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353e:	461a      	mov	r2, r3
 8003540:	2300      	movs	r3, #0
 8003542:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003544:	2300      	movs	r3, #0
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	e043      	b.n	80035d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4413      	add	r3, r2
 8003552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800355c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003560:	d118      	bne.n	8003594 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10a      	bne.n	800357e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003574:	461a      	mov	r2, r3
 8003576:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	e013      	b.n	80035a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358a:	461a      	mov	r2, r3
 800358c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e008      	b.n	80035a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a0:	461a      	mov	r2, r3
 80035a2:	2300      	movs	r3, #0
 80035a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b2:	461a      	mov	r2, r3
 80035b4:	2300      	movs	r3, #0
 80035b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c4:	461a      	mov	r2, r3
 80035c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	3301      	adds	r3, #1
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d3b7      	bcc.n	800354a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035da:	2300      	movs	r3, #0
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	e043      	b.n	8003668 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035f6:	d118      	bne.n	800362a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360a:	461a      	mov	r2, r3
 800360c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e013      	b.n	800363c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003620:	461a      	mov	r2, r3
 8003622:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	e008      	b.n	800363c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003636:	461a      	mov	r2, r3
 8003638:	2300      	movs	r3, #0
 800363a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003648:	461a      	mov	r2, r3
 800364a:	2300      	movs	r3, #0
 800364c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365a:	461a      	mov	r2, r3
 800365c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003660:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	3301      	adds	r3, #1
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	429a      	cmp	r2, r3
 800366e:	d3b7      	bcc.n	80035e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800367e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003682:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003690:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	2b00      	cmp	r3, #0
 8003696:	d105      	bne.n	80036a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f043 0210 	orr.w	r2, r3, #16
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699a      	ldr	r2, [r3, #24]
 80036a8:	4b0f      	ldr	r3, [pc, #60]	; (80036e8 <USB_DevInit+0x2c4>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80036b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f043 0208 	orr.w	r2, r3, #8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80036c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d107      	bne.n	80036d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036d0:	f043 0304 	orr.w	r3, r3, #4
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036e4:	b004      	add	sp, #16
 80036e6:	4770      	bx	lr
 80036e8:	803c3800 	.word	0x803c3800

080036ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3301      	adds	r3, #1
 80036fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a13      	ldr	r2, [pc, #76]	; (8003750 <USB_FlushTxFifo+0x64>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d901      	bls.n	800370c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e01b      	b.n	8003744 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	daf2      	bge.n	80036fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	019b      	lsls	r3, r3, #6
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	3301      	adds	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4a08      	ldr	r2, [pc, #32]	; (8003750 <USB_FlushTxFifo+0x64>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e006      	b.n	8003744 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b20      	cmp	r3, #32
 8003740:	d0f0      	beq.n	8003724 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	00030d40 	.word	0x00030d40

08003754 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	3301      	adds	r3, #1
 8003764:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4a11      	ldr	r2, [pc, #68]	; (80037b0 <USB_FlushRxFifo+0x5c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d901      	bls.n	8003772 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e018      	b.n	80037a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	daf2      	bge.n	8003760 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2210      	movs	r2, #16
 8003782:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3301      	adds	r3, #1
 8003788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4a08      	ldr	r2, [pc, #32]	; (80037b0 <USB_FlushRxFifo+0x5c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e006      	b.n	80037a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b10      	cmp	r3, #16
 80037a0:	d0f0      	beq.n	8003784 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	00030d40 	.word	0x00030d40

080037b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	68f9      	ldr	r1, [r7, #12]
 80037d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037d4:	4313      	orrs	r3, r2
 80037d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b085      	sub	sp, #20
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003800:	f023 0303 	bic.w	r3, r3, #3
 8003804:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003814:	f043 0302 	orr.w	r3, r3, #2
 8003818:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f003 0301 	and.w	r3, r3, #1
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	3301      	adds	r3, #1
 8003854:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a13      	ldr	r2, [pc, #76]	; (80038a8 <USB_CoreReset+0x64>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e01b      	b.n	800389a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	daf2      	bge.n	8003850 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f043 0201 	orr.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3301      	adds	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <USB_CoreReset+0x64>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d901      	bls.n	800388c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e006      	b.n	800389a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d0f0      	beq.n	800387a <USB_CoreReset+0x36>

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	00030d40 	.word	0x00030d40

080038ac <__errno>:
 80038ac:	4b01      	ldr	r3, [pc, #4]	; (80038b4 <__errno+0x8>)
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	2000000c 	.word	0x2000000c

080038b8 <__libc_init_array>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	4d0d      	ldr	r5, [pc, #52]	; (80038f0 <__libc_init_array+0x38>)
 80038bc:	4c0d      	ldr	r4, [pc, #52]	; (80038f4 <__libc_init_array+0x3c>)
 80038be:	1b64      	subs	r4, r4, r5
 80038c0:	10a4      	asrs	r4, r4, #2
 80038c2:	2600      	movs	r6, #0
 80038c4:	42a6      	cmp	r6, r4
 80038c6:	d109      	bne.n	80038dc <__libc_init_array+0x24>
 80038c8:	4d0b      	ldr	r5, [pc, #44]	; (80038f8 <__libc_init_array+0x40>)
 80038ca:	4c0c      	ldr	r4, [pc, #48]	; (80038fc <__libc_init_array+0x44>)
 80038cc:	f000 fc8e 	bl	80041ec <_init>
 80038d0:	1b64      	subs	r4, r4, r5
 80038d2:	10a4      	asrs	r4, r4, #2
 80038d4:	2600      	movs	r6, #0
 80038d6:	42a6      	cmp	r6, r4
 80038d8:	d105      	bne.n	80038e6 <__libc_init_array+0x2e>
 80038da:	bd70      	pop	{r4, r5, r6, pc}
 80038dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e0:	4798      	blx	r3
 80038e2:	3601      	adds	r6, #1
 80038e4:	e7ee      	b.n	80038c4 <__libc_init_array+0xc>
 80038e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ea:	4798      	blx	r3
 80038ec:	3601      	adds	r6, #1
 80038ee:	e7f2      	b.n	80038d6 <__libc_init_array+0x1e>
 80038f0:	08004264 	.word	0x08004264
 80038f4:	08004264 	.word	0x08004264
 80038f8:	08004264 	.word	0x08004264
 80038fc:	08004268 	.word	0x08004268

08003900 <memset>:
 8003900:	4402      	add	r2, r0
 8003902:	4603      	mov	r3, r0
 8003904:	4293      	cmp	r3, r2
 8003906:	d100      	bne.n	800390a <memset+0xa>
 8003908:	4770      	bx	lr
 800390a:	f803 1b01 	strb.w	r1, [r3], #1
 800390e:	e7f9      	b.n	8003904 <memset+0x4>

08003910 <siprintf>:
 8003910:	b40e      	push	{r1, r2, r3}
 8003912:	b500      	push	{lr}
 8003914:	b09c      	sub	sp, #112	; 0x70
 8003916:	ab1d      	add	r3, sp, #116	; 0x74
 8003918:	9002      	str	r0, [sp, #8]
 800391a:	9006      	str	r0, [sp, #24]
 800391c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003920:	4809      	ldr	r0, [pc, #36]	; (8003948 <siprintf+0x38>)
 8003922:	9107      	str	r1, [sp, #28]
 8003924:	9104      	str	r1, [sp, #16]
 8003926:	4909      	ldr	r1, [pc, #36]	; (800394c <siprintf+0x3c>)
 8003928:	f853 2b04 	ldr.w	r2, [r3], #4
 800392c:	9105      	str	r1, [sp, #20]
 800392e:	6800      	ldr	r0, [r0, #0]
 8003930:	9301      	str	r3, [sp, #4]
 8003932:	a902      	add	r1, sp, #8
 8003934:	f000 f868 	bl	8003a08 <_svfiprintf_r>
 8003938:	9b02      	ldr	r3, [sp, #8]
 800393a:	2200      	movs	r2, #0
 800393c:	701a      	strb	r2, [r3, #0]
 800393e:	b01c      	add	sp, #112	; 0x70
 8003940:	f85d eb04 	ldr.w	lr, [sp], #4
 8003944:	b003      	add	sp, #12
 8003946:	4770      	bx	lr
 8003948:	2000000c 	.word	0x2000000c
 800394c:	ffff0208 	.word	0xffff0208

08003950 <__ssputs_r>:
 8003950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003954:	688e      	ldr	r6, [r1, #8]
 8003956:	429e      	cmp	r6, r3
 8003958:	4682      	mov	sl, r0
 800395a:	460c      	mov	r4, r1
 800395c:	4690      	mov	r8, r2
 800395e:	461f      	mov	r7, r3
 8003960:	d838      	bhi.n	80039d4 <__ssputs_r+0x84>
 8003962:	898a      	ldrh	r2, [r1, #12]
 8003964:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003968:	d032      	beq.n	80039d0 <__ssputs_r+0x80>
 800396a:	6825      	ldr	r5, [r4, #0]
 800396c:	6909      	ldr	r1, [r1, #16]
 800396e:	eba5 0901 	sub.w	r9, r5, r1
 8003972:	6965      	ldr	r5, [r4, #20]
 8003974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003978:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800397c:	3301      	adds	r3, #1
 800397e:	444b      	add	r3, r9
 8003980:	106d      	asrs	r5, r5, #1
 8003982:	429d      	cmp	r5, r3
 8003984:	bf38      	it	cc
 8003986:	461d      	movcc	r5, r3
 8003988:	0553      	lsls	r3, r2, #21
 800398a:	d531      	bpl.n	80039f0 <__ssputs_r+0xa0>
 800398c:	4629      	mov	r1, r5
 800398e:	f000 fb63 	bl	8004058 <_malloc_r>
 8003992:	4606      	mov	r6, r0
 8003994:	b950      	cbnz	r0, 80039ac <__ssputs_r+0x5c>
 8003996:	230c      	movs	r3, #12
 8003998:	f8ca 3000 	str.w	r3, [sl]
 800399c:	89a3      	ldrh	r3, [r4, #12]
 800399e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039a2:	81a3      	strh	r3, [r4, #12]
 80039a4:	f04f 30ff 	mov.w	r0, #4294967295
 80039a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ac:	6921      	ldr	r1, [r4, #16]
 80039ae:	464a      	mov	r2, r9
 80039b0:	f000 fabe 	bl	8003f30 <memcpy>
 80039b4:	89a3      	ldrh	r3, [r4, #12]
 80039b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039be:	81a3      	strh	r3, [r4, #12]
 80039c0:	6126      	str	r6, [r4, #16]
 80039c2:	6165      	str	r5, [r4, #20]
 80039c4:	444e      	add	r6, r9
 80039c6:	eba5 0509 	sub.w	r5, r5, r9
 80039ca:	6026      	str	r6, [r4, #0]
 80039cc:	60a5      	str	r5, [r4, #8]
 80039ce:	463e      	mov	r6, r7
 80039d0:	42be      	cmp	r6, r7
 80039d2:	d900      	bls.n	80039d6 <__ssputs_r+0x86>
 80039d4:	463e      	mov	r6, r7
 80039d6:	6820      	ldr	r0, [r4, #0]
 80039d8:	4632      	mov	r2, r6
 80039da:	4641      	mov	r1, r8
 80039dc:	f000 fab6 	bl	8003f4c <memmove>
 80039e0:	68a3      	ldr	r3, [r4, #8]
 80039e2:	1b9b      	subs	r3, r3, r6
 80039e4:	60a3      	str	r3, [r4, #8]
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	4433      	add	r3, r6
 80039ea:	6023      	str	r3, [r4, #0]
 80039ec:	2000      	movs	r0, #0
 80039ee:	e7db      	b.n	80039a8 <__ssputs_r+0x58>
 80039f0:	462a      	mov	r2, r5
 80039f2:	f000 fba5 	bl	8004140 <_realloc_r>
 80039f6:	4606      	mov	r6, r0
 80039f8:	2800      	cmp	r0, #0
 80039fa:	d1e1      	bne.n	80039c0 <__ssputs_r+0x70>
 80039fc:	6921      	ldr	r1, [r4, #16]
 80039fe:	4650      	mov	r0, sl
 8003a00:	f000 fabe 	bl	8003f80 <_free_r>
 8003a04:	e7c7      	b.n	8003996 <__ssputs_r+0x46>
	...

08003a08 <_svfiprintf_r>:
 8003a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a0c:	4698      	mov	r8, r3
 8003a0e:	898b      	ldrh	r3, [r1, #12]
 8003a10:	061b      	lsls	r3, r3, #24
 8003a12:	b09d      	sub	sp, #116	; 0x74
 8003a14:	4607      	mov	r7, r0
 8003a16:	460d      	mov	r5, r1
 8003a18:	4614      	mov	r4, r2
 8003a1a:	d50e      	bpl.n	8003a3a <_svfiprintf_r+0x32>
 8003a1c:	690b      	ldr	r3, [r1, #16]
 8003a1e:	b963      	cbnz	r3, 8003a3a <_svfiprintf_r+0x32>
 8003a20:	2140      	movs	r1, #64	; 0x40
 8003a22:	f000 fb19 	bl	8004058 <_malloc_r>
 8003a26:	6028      	str	r0, [r5, #0]
 8003a28:	6128      	str	r0, [r5, #16]
 8003a2a:	b920      	cbnz	r0, 8003a36 <_svfiprintf_r+0x2e>
 8003a2c:	230c      	movs	r3, #12
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	f04f 30ff 	mov.w	r0, #4294967295
 8003a34:	e0d1      	b.n	8003bda <_svfiprintf_r+0x1d2>
 8003a36:	2340      	movs	r3, #64	; 0x40
 8003a38:	616b      	str	r3, [r5, #20]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a3e:	2320      	movs	r3, #32
 8003a40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a44:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a48:	2330      	movs	r3, #48	; 0x30
 8003a4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003bf4 <_svfiprintf_r+0x1ec>
 8003a4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a52:	f04f 0901 	mov.w	r9, #1
 8003a56:	4623      	mov	r3, r4
 8003a58:	469a      	mov	sl, r3
 8003a5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a5e:	b10a      	cbz	r2, 8003a64 <_svfiprintf_r+0x5c>
 8003a60:	2a25      	cmp	r2, #37	; 0x25
 8003a62:	d1f9      	bne.n	8003a58 <_svfiprintf_r+0x50>
 8003a64:	ebba 0b04 	subs.w	fp, sl, r4
 8003a68:	d00b      	beq.n	8003a82 <_svfiprintf_r+0x7a>
 8003a6a:	465b      	mov	r3, fp
 8003a6c:	4622      	mov	r2, r4
 8003a6e:	4629      	mov	r1, r5
 8003a70:	4638      	mov	r0, r7
 8003a72:	f7ff ff6d 	bl	8003950 <__ssputs_r>
 8003a76:	3001      	adds	r0, #1
 8003a78:	f000 80aa 	beq.w	8003bd0 <_svfiprintf_r+0x1c8>
 8003a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a7e:	445a      	add	r2, fp
 8003a80:	9209      	str	r2, [sp, #36]	; 0x24
 8003a82:	f89a 3000 	ldrb.w	r3, [sl]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80a2 	beq.w	8003bd0 <_svfiprintf_r+0x1c8>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a96:	f10a 0a01 	add.w	sl, sl, #1
 8003a9a:	9304      	str	r3, [sp, #16]
 8003a9c:	9307      	str	r3, [sp, #28]
 8003a9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003aa2:	931a      	str	r3, [sp, #104]	; 0x68
 8003aa4:	4654      	mov	r4, sl
 8003aa6:	2205      	movs	r2, #5
 8003aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aac:	4851      	ldr	r0, [pc, #324]	; (8003bf4 <_svfiprintf_r+0x1ec>)
 8003aae:	f7fc fb9f 	bl	80001f0 <memchr>
 8003ab2:	9a04      	ldr	r2, [sp, #16]
 8003ab4:	b9d8      	cbnz	r0, 8003aee <_svfiprintf_r+0xe6>
 8003ab6:	06d0      	lsls	r0, r2, #27
 8003ab8:	bf44      	itt	mi
 8003aba:	2320      	movmi	r3, #32
 8003abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ac0:	0711      	lsls	r1, r2, #28
 8003ac2:	bf44      	itt	mi
 8003ac4:	232b      	movmi	r3, #43	; 0x2b
 8003ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003aca:	f89a 3000 	ldrb.w	r3, [sl]
 8003ace:	2b2a      	cmp	r3, #42	; 0x2a
 8003ad0:	d015      	beq.n	8003afe <_svfiprintf_r+0xf6>
 8003ad2:	9a07      	ldr	r2, [sp, #28]
 8003ad4:	4654      	mov	r4, sl
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f04f 0c0a 	mov.w	ip, #10
 8003adc:	4621      	mov	r1, r4
 8003ade:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ae2:	3b30      	subs	r3, #48	; 0x30
 8003ae4:	2b09      	cmp	r3, #9
 8003ae6:	d94e      	bls.n	8003b86 <_svfiprintf_r+0x17e>
 8003ae8:	b1b0      	cbz	r0, 8003b18 <_svfiprintf_r+0x110>
 8003aea:	9207      	str	r2, [sp, #28]
 8003aec:	e014      	b.n	8003b18 <_svfiprintf_r+0x110>
 8003aee:	eba0 0308 	sub.w	r3, r0, r8
 8003af2:	fa09 f303 	lsl.w	r3, r9, r3
 8003af6:	4313      	orrs	r3, r2
 8003af8:	9304      	str	r3, [sp, #16]
 8003afa:	46a2      	mov	sl, r4
 8003afc:	e7d2      	b.n	8003aa4 <_svfiprintf_r+0x9c>
 8003afe:	9b03      	ldr	r3, [sp, #12]
 8003b00:	1d19      	adds	r1, r3, #4
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	9103      	str	r1, [sp, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bfbb      	ittet	lt
 8003b0a:	425b      	neglt	r3, r3
 8003b0c:	f042 0202 	orrlt.w	r2, r2, #2
 8003b10:	9307      	strge	r3, [sp, #28]
 8003b12:	9307      	strlt	r3, [sp, #28]
 8003b14:	bfb8      	it	lt
 8003b16:	9204      	strlt	r2, [sp, #16]
 8003b18:	7823      	ldrb	r3, [r4, #0]
 8003b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b1c:	d10c      	bne.n	8003b38 <_svfiprintf_r+0x130>
 8003b1e:	7863      	ldrb	r3, [r4, #1]
 8003b20:	2b2a      	cmp	r3, #42	; 0x2a
 8003b22:	d135      	bne.n	8003b90 <_svfiprintf_r+0x188>
 8003b24:	9b03      	ldr	r3, [sp, #12]
 8003b26:	1d1a      	adds	r2, r3, #4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	9203      	str	r2, [sp, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bfb8      	it	lt
 8003b30:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b34:	3402      	adds	r4, #2
 8003b36:	9305      	str	r3, [sp, #20]
 8003b38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c04 <_svfiprintf_r+0x1fc>
 8003b3c:	7821      	ldrb	r1, [r4, #0]
 8003b3e:	2203      	movs	r2, #3
 8003b40:	4650      	mov	r0, sl
 8003b42:	f7fc fb55 	bl	80001f0 <memchr>
 8003b46:	b140      	cbz	r0, 8003b5a <_svfiprintf_r+0x152>
 8003b48:	2340      	movs	r3, #64	; 0x40
 8003b4a:	eba0 000a 	sub.w	r0, r0, sl
 8003b4e:	fa03 f000 	lsl.w	r0, r3, r0
 8003b52:	9b04      	ldr	r3, [sp, #16]
 8003b54:	4303      	orrs	r3, r0
 8003b56:	3401      	adds	r4, #1
 8003b58:	9304      	str	r3, [sp, #16]
 8003b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b5e:	4826      	ldr	r0, [pc, #152]	; (8003bf8 <_svfiprintf_r+0x1f0>)
 8003b60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b64:	2206      	movs	r2, #6
 8003b66:	f7fc fb43 	bl	80001f0 <memchr>
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d038      	beq.n	8003be0 <_svfiprintf_r+0x1d8>
 8003b6e:	4b23      	ldr	r3, [pc, #140]	; (8003bfc <_svfiprintf_r+0x1f4>)
 8003b70:	bb1b      	cbnz	r3, 8003bba <_svfiprintf_r+0x1b2>
 8003b72:	9b03      	ldr	r3, [sp, #12]
 8003b74:	3307      	adds	r3, #7
 8003b76:	f023 0307 	bic.w	r3, r3, #7
 8003b7a:	3308      	adds	r3, #8
 8003b7c:	9303      	str	r3, [sp, #12]
 8003b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b80:	4433      	add	r3, r6
 8003b82:	9309      	str	r3, [sp, #36]	; 0x24
 8003b84:	e767      	b.n	8003a56 <_svfiprintf_r+0x4e>
 8003b86:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	e7a5      	b.n	8003adc <_svfiprintf_r+0xd4>
 8003b90:	2300      	movs	r3, #0
 8003b92:	3401      	adds	r4, #1
 8003b94:	9305      	str	r3, [sp, #20]
 8003b96:	4619      	mov	r1, r3
 8003b98:	f04f 0c0a 	mov.w	ip, #10
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ba2:	3a30      	subs	r2, #48	; 0x30
 8003ba4:	2a09      	cmp	r2, #9
 8003ba6:	d903      	bls.n	8003bb0 <_svfiprintf_r+0x1a8>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0c5      	beq.n	8003b38 <_svfiprintf_r+0x130>
 8003bac:	9105      	str	r1, [sp, #20]
 8003bae:	e7c3      	b.n	8003b38 <_svfiprintf_r+0x130>
 8003bb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e7f0      	b.n	8003b9c <_svfiprintf_r+0x194>
 8003bba:	ab03      	add	r3, sp, #12
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	462a      	mov	r2, r5
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <_svfiprintf_r+0x1f8>)
 8003bc2:	a904      	add	r1, sp, #16
 8003bc4:	4638      	mov	r0, r7
 8003bc6:	f3af 8000 	nop.w
 8003bca:	1c42      	adds	r2, r0, #1
 8003bcc:	4606      	mov	r6, r0
 8003bce:	d1d6      	bne.n	8003b7e <_svfiprintf_r+0x176>
 8003bd0:	89ab      	ldrh	r3, [r5, #12]
 8003bd2:	065b      	lsls	r3, r3, #25
 8003bd4:	f53f af2c 	bmi.w	8003a30 <_svfiprintf_r+0x28>
 8003bd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bda:	b01d      	add	sp, #116	; 0x74
 8003bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be0:	ab03      	add	r3, sp, #12
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	462a      	mov	r2, r5
 8003be6:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <_svfiprintf_r+0x1f8>)
 8003be8:	a904      	add	r1, sp, #16
 8003bea:	4638      	mov	r0, r7
 8003bec:	f000 f87a 	bl	8003ce4 <_printf_i>
 8003bf0:	e7eb      	b.n	8003bca <_svfiprintf_r+0x1c2>
 8003bf2:	bf00      	nop
 8003bf4:	08004228 	.word	0x08004228
 8003bf8:	08004232 	.word	0x08004232
 8003bfc:	00000000 	.word	0x00000000
 8003c00:	08003951 	.word	0x08003951
 8003c04:	0800422e 	.word	0x0800422e

08003c08 <_printf_common>:
 8003c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c0c:	4616      	mov	r6, r2
 8003c0e:	4699      	mov	r9, r3
 8003c10:	688a      	ldr	r2, [r1, #8]
 8003c12:	690b      	ldr	r3, [r1, #16]
 8003c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	bfb8      	it	lt
 8003c1c:	4613      	movlt	r3, r2
 8003c1e:	6033      	str	r3, [r6, #0]
 8003c20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c24:	4607      	mov	r7, r0
 8003c26:	460c      	mov	r4, r1
 8003c28:	b10a      	cbz	r2, 8003c2e <_printf_common+0x26>
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	6033      	str	r3, [r6, #0]
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	0699      	lsls	r1, r3, #26
 8003c32:	bf42      	ittt	mi
 8003c34:	6833      	ldrmi	r3, [r6, #0]
 8003c36:	3302      	addmi	r3, #2
 8003c38:	6033      	strmi	r3, [r6, #0]
 8003c3a:	6825      	ldr	r5, [r4, #0]
 8003c3c:	f015 0506 	ands.w	r5, r5, #6
 8003c40:	d106      	bne.n	8003c50 <_printf_common+0x48>
 8003c42:	f104 0a19 	add.w	sl, r4, #25
 8003c46:	68e3      	ldr	r3, [r4, #12]
 8003c48:	6832      	ldr	r2, [r6, #0]
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	42ab      	cmp	r3, r5
 8003c4e:	dc26      	bgt.n	8003c9e <_printf_common+0x96>
 8003c50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c54:	1e13      	subs	r3, r2, #0
 8003c56:	6822      	ldr	r2, [r4, #0]
 8003c58:	bf18      	it	ne
 8003c5a:	2301      	movne	r3, #1
 8003c5c:	0692      	lsls	r2, r2, #26
 8003c5e:	d42b      	bmi.n	8003cb8 <_printf_common+0xb0>
 8003c60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c64:	4649      	mov	r1, r9
 8003c66:	4638      	mov	r0, r7
 8003c68:	47c0      	blx	r8
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	d01e      	beq.n	8003cac <_printf_common+0xa4>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	68e5      	ldr	r5, [r4, #12]
 8003c72:	6832      	ldr	r2, [r6, #0]
 8003c74:	f003 0306 	and.w	r3, r3, #6
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	bf08      	it	eq
 8003c7c:	1aad      	subeq	r5, r5, r2
 8003c7e:	68a3      	ldr	r3, [r4, #8]
 8003c80:	6922      	ldr	r2, [r4, #16]
 8003c82:	bf0c      	ite	eq
 8003c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c88:	2500      	movne	r5, #0
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	bfc4      	itt	gt
 8003c8e:	1a9b      	subgt	r3, r3, r2
 8003c90:	18ed      	addgt	r5, r5, r3
 8003c92:	2600      	movs	r6, #0
 8003c94:	341a      	adds	r4, #26
 8003c96:	42b5      	cmp	r5, r6
 8003c98:	d11a      	bne.n	8003cd0 <_printf_common+0xc8>
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	e008      	b.n	8003cb0 <_printf_common+0xa8>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	4652      	mov	r2, sl
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	4638      	mov	r0, r7
 8003ca6:	47c0      	blx	r8
 8003ca8:	3001      	adds	r0, #1
 8003caa:	d103      	bne.n	8003cb4 <_printf_common+0xac>
 8003cac:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb4:	3501      	adds	r5, #1
 8003cb6:	e7c6      	b.n	8003c46 <_printf_common+0x3e>
 8003cb8:	18e1      	adds	r1, r4, r3
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	2030      	movs	r0, #48	; 0x30
 8003cbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cc2:	4422      	add	r2, r4
 8003cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ccc:	3302      	adds	r3, #2
 8003cce:	e7c7      	b.n	8003c60 <_printf_common+0x58>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	4638      	mov	r0, r7
 8003cd8:	47c0      	blx	r8
 8003cda:	3001      	adds	r0, #1
 8003cdc:	d0e6      	beq.n	8003cac <_printf_common+0xa4>
 8003cde:	3601      	adds	r6, #1
 8003ce0:	e7d9      	b.n	8003c96 <_printf_common+0x8e>
	...

08003ce4 <_printf_i>:
 8003ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce8:	7e0f      	ldrb	r7, [r1, #24]
 8003cea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cec:	2f78      	cmp	r7, #120	; 0x78
 8003cee:	4691      	mov	r9, r2
 8003cf0:	4680      	mov	r8, r0
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	469a      	mov	sl, r3
 8003cf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cfa:	d807      	bhi.n	8003d0c <_printf_i+0x28>
 8003cfc:	2f62      	cmp	r7, #98	; 0x62
 8003cfe:	d80a      	bhi.n	8003d16 <_printf_i+0x32>
 8003d00:	2f00      	cmp	r7, #0
 8003d02:	f000 80d8 	beq.w	8003eb6 <_printf_i+0x1d2>
 8003d06:	2f58      	cmp	r7, #88	; 0x58
 8003d08:	f000 80a3 	beq.w	8003e52 <_printf_i+0x16e>
 8003d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d14:	e03a      	b.n	8003d8c <_printf_i+0xa8>
 8003d16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d1a:	2b15      	cmp	r3, #21
 8003d1c:	d8f6      	bhi.n	8003d0c <_printf_i+0x28>
 8003d1e:	a101      	add	r1, pc, #4	; (adr r1, 8003d24 <_printf_i+0x40>)
 8003d20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d24:	08003d7d 	.word	0x08003d7d
 8003d28:	08003d91 	.word	0x08003d91
 8003d2c:	08003d0d 	.word	0x08003d0d
 8003d30:	08003d0d 	.word	0x08003d0d
 8003d34:	08003d0d 	.word	0x08003d0d
 8003d38:	08003d0d 	.word	0x08003d0d
 8003d3c:	08003d91 	.word	0x08003d91
 8003d40:	08003d0d 	.word	0x08003d0d
 8003d44:	08003d0d 	.word	0x08003d0d
 8003d48:	08003d0d 	.word	0x08003d0d
 8003d4c:	08003d0d 	.word	0x08003d0d
 8003d50:	08003e9d 	.word	0x08003e9d
 8003d54:	08003dc1 	.word	0x08003dc1
 8003d58:	08003e7f 	.word	0x08003e7f
 8003d5c:	08003d0d 	.word	0x08003d0d
 8003d60:	08003d0d 	.word	0x08003d0d
 8003d64:	08003ebf 	.word	0x08003ebf
 8003d68:	08003d0d 	.word	0x08003d0d
 8003d6c:	08003dc1 	.word	0x08003dc1
 8003d70:	08003d0d 	.word	0x08003d0d
 8003d74:	08003d0d 	.word	0x08003d0d
 8003d78:	08003e87 	.word	0x08003e87
 8003d7c:	682b      	ldr	r3, [r5, #0]
 8003d7e:	1d1a      	adds	r2, r3, #4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	602a      	str	r2, [r5, #0]
 8003d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0a3      	b.n	8003ed8 <_printf_i+0x1f4>
 8003d90:	6820      	ldr	r0, [r4, #0]
 8003d92:	6829      	ldr	r1, [r5, #0]
 8003d94:	0606      	lsls	r6, r0, #24
 8003d96:	f101 0304 	add.w	r3, r1, #4
 8003d9a:	d50a      	bpl.n	8003db2 <_printf_i+0xce>
 8003d9c:	680e      	ldr	r6, [r1, #0]
 8003d9e:	602b      	str	r3, [r5, #0]
 8003da0:	2e00      	cmp	r6, #0
 8003da2:	da03      	bge.n	8003dac <_printf_i+0xc8>
 8003da4:	232d      	movs	r3, #45	; 0x2d
 8003da6:	4276      	negs	r6, r6
 8003da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dac:	485e      	ldr	r0, [pc, #376]	; (8003f28 <_printf_i+0x244>)
 8003dae:	230a      	movs	r3, #10
 8003db0:	e019      	b.n	8003de6 <_printf_i+0x102>
 8003db2:	680e      	ldr	r6, [r1, #0]
 8003db4:	602b      	str	r3, [r5, #0]
 8003db6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003dba:	bf18      	it	ne
 8003dbc:	b236      	sxthne	r6, r6
 8003dbe:	e7ef      	b.n	8003da0 <_printf_i+0xbc>
 8003dc0:	682b      	ldr	r3, [r5, #0]
 8003dc2:	6820      	ldr	r0, [r4, #0]
 8003dc4:	1d19      	adds	r1, r3, #4
 8003dc6:	6029      	str	r1, [r5, #0]
 8003dc8:	0601      	lsls	r1, r0, #24
 8003dca:	d501      	bpl.n	8003dd0 <_printf_i+0xec>
 8003dcc:	681e      	ldr	r6, [r3, #0]
 8003dce:	e002      	b.n	8003dd6 <_printf_i+0xf2>
 8003dd0:	0646      	lsls	r6, r0, #25
 8003dd2:	d5fb      	bpl.n	8003dcc <_printf_i+0xe8>
 8003dd4:	881e      	ldrh	r6, [r3, #0]
 8003dd6:	4854      	ldr	r0, [pc, #336]	; (8003f28 <_printf_i+0x244>)
 8003dd8:	2f6f      	cmp	r7, #111	; 0x6f
 8003dda:	bf0c      	ite	eq
 8003ddc:	2308      	moveq	r3, #8
 8003dde:	230a      	movne	r3, #10
 8003de0:	2100      	movs	r1, #0
 8003de2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003de6:	6865      	ldr	r5, [r4, #4]
 8003de8:	60a5      	str	r5, [r4, #8]
 8003dea:	2d00      	cmp	r5, #0
 8003dec:	bfa2      	ittt	ge
 8003dee:	6821      	ldrge	r1, [r4, #0]
 8003df0:	f021 0104 	bicge.w	r1, r1, #4
 8003df4:	6021      	strge	r1, [r4, #0]
 8003df6:	b90e      	cbnz	r6, 8003dfc <_printf_i+0x118>
 8003df8:	2d00      	cmp	r5, #0
 8003dfa:	d04d      	beq.n	8003e98 <_printf_i+0x1b4>
 8003dfc:	4615      	mov	r5, r2
 8003dfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e02:	fb03 6711 	mls	r7, r3, r1, r6
 8003e06:	5dc7      	ldrb	r7, [r0, r7]
 8003e08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e0c:	4637      	mov	r7, r6
 8003e0e:	42bb      	cmp	r3, r7
 8003e10:	460e      	mov	r6, r1
 8003e12:	d9f4      	bls.n	8003dfe <_printf_i+0x11a>
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d10b      	bne.n	8003e30 <_printf_i+0x14c>
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	07de      	lsls	r6, r3, #31
 8003e1c:	d508      	bpl.n	8003e30 <_printf_i+0x14c>
 8003e1e:	6923      	ldr	r3, [r4, #16]
 8003e20:	6861      	ldr	r1, [r4, #4]
 8003e22:	4299      	cmp	r1, r3
 8003e24:	bfde      	ittt	le
 8003e26:	2330      	movle	r3, #48	; 0x30
 8003e28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e30:	1b52      	subs	r2, r2, r5
 8003e32:	6122      	str	r2, [r4, #16]
 8003e34:	f8cd a000 	str.w	sl, [sp]
 8003e38:	464b      	mov	r3, r9
 8003e3a:	aa03      	add	r2, sp, #12
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	4640      	mov	r0, r8
 8003e40:	f7ff fee2 	bl	8003c08 <_printf_common>
 8003e44:	3001      	adds	r0, #1
 8003e46:	d14c      	bne.n	8003ee2 <_printf_i+0x1fe>
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4c:	b004      	add	sp, #16
 8003e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e52:	4835      	ldr	r0, [pc, #212]	; (8003f28 <_printf_i+0x244>)
 8003e54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e58:	6829      	ldr	r1, [r5, #0]
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e60:	6029      	str	r1, [r5, #0]
 8003e62:	061d      	lsls	r5, r3, #24
 8003e64:	d514      	bpl.n	8003e90 <_printf_i+0x1ac>
 8003e66:	07df      	lsls	r7, r3, #31
 8003e68:	bf44      	itt	mi
 8003e6a:	f043 0320 	orrmi.w	r3, r3, #32
 8003e6e:	6023      	strmi	r3, [r4, #0]
 8003e70:	b91e      	cbnz	r6, 8003e7a <_printf_i+0x196>
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	f023 0320 	bic.w	r3, r3, #32
 8003e78:	6023      	str	r3, [r4, #0]
 8003e7a:	2310      	movs	r3, #16
 8003e7c:	e7b0      	b.n	8003de0 <_printf_i+0xfc>
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	f043 0320 	orr.w	r3, r3, #32
 8003e84:	6023      	str	r3, [r4, #0]
 8003e86:	2378      	movs	r3, #120	; 0x78
 8003e88:	4828      	ldr	r0, [pc, #160]	; (8003f2c <_printf_i+0x248>)
 8003e8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e8e:	e7e3      	b.n	8003e58 <_printf_i+0x174>
 8003e90:	0659      	lsls	r1, r3, #25
 8003e92:	bf48      	it	mi
 8003e94:	b2b6      	uxthmi	r6, r6
 8003e96:	e7e6      	b.n	8003e66 <_printf_i+0x182>
 8003e98:	4615      	mov	r5, r2
 8003e9a:	e7bb      	b.n	8003e14 <_printf_i+0x130>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	6826      	ldr	r6, [r4, #0]
 8003ea0:	6961      	ldr	r1, [r4, #20]
 8003ea2:	1d18      	adds	r0, r3, #4
 8003ea4:	6028      	str	r0, [r5, #0]
 8003ea6:	0635      	lsls	r5, r6, #24
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	d501      	bpl.n	8003eb0 <_printf_i+0x1cc>
 8003eac:	6019      	str	r1, [r3, #0]
 8003eae:	e002      	b.n	8003eb6 <_printf_i+0x1d2>
 8003eb0:	0670      	lsls	r0, r6, #25
 8003eb2:	d5fb      	bpl.n	8003eac <_printf_i+0x1c8>
 8003eb4:	8019      	strh	r1, [r3, #0]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	6123      	str	r3, [r4, #16]
 8003eba:	4615      	mov	r5, r2
 8003ebc:	e7ba      	b.n	8003e34 <_printf_i+0x150>
 8003ebe:	682b      	ldr	r3, [r5, #0]
 8003ec0:	1d1a      	adds	r2, r3, #4
 8003ec2:	602a      	str	r2, [r5, #0]
 8003ec4:	681d      	ldr	r5, [r3, #0]
 8003ec6:	6862      	ldr	r2, [r4, #4]
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4628      	mov	r0, r5
 8003ecc:	f7fc f990 	bl	80001f0 <memchr>
 8003ed0:	b108      	cbz	r0, 8003ed6 <_printf_i+0x1f2>
 8003ed2:	1b40      	subs	r0, r0, r5
 8003ed4:	6060      	str	r0, [r4, #4]
 8003ed6:	6863      	ldr	r3, [r4, #4]
 8003ed8:	6123      	str	r3, [r4, #16]
 8003eda:	2300      	movs	r3, #0
 8003edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ee0:	e7a8      	b.n	8003e34 <_printf_i+0x150>
 8003ee2:	6923      	ldr	r3, [r4, #16]
 8003ee4:	462a      	mov	r2, r5
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	4640      	mov	r0, r8
 8003eea:	47d0      	blx	sl
 8003eec:	3001      	adds	r0, #1
 8003eee:	d0ab      	beq.n	8003e48 <_printf_i+0x164>
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	079b      	lsls	r3, r3, #30
 8003ef4:	d413      	bmi.n	8003f1e <_printf_i+0x23a>
 8003ef6:	68e0      	ldr	r0, [r4, #12]
 8003ef8:	9b03      	ldr	r3, [sp, #12]
 8003efa:	4298      	cmp	r0, r3
 8003efc:	bfb8      	it	lt
 8003efe:	4618      	movlt	r0, r3
 8003f00:	e7a4      	b.n	8003e4c <_printf_i+0x168>
 8003f02:	2301      	movs	r3, #1
 8003f04:	4632      	mov	r2, r6
 8003f06:	4649      	mov	r1, r9
 8003f08:	4640      	mov	r0, r8
 8003f0a:	47d0      	blx	sl
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	d09b      	beq.n	8003e48 <_printf_i+0x164>
 8003f10:	3501      	adds	r5, #1
 8003f12:	68e3      	ldr	r3, [r4, #12]
 8003f14:	9903      	ldr	r1, [sp, #12]
 8003f16:	1a5b      	subs	r3, r3, r1
 8003f18:	42ab      	cmp	r3, r5
 8003f1a:	dcf2      	bgt.n	8003f02 <_printf_i+0x21e>
 8003f1c:	e7eb      	b.n	8003ef6 <_printf_i+0x212>
 8003f1e:	2500      	movs	r5, #0
 8003f20:	f104 0619 	add.w	r6, r4, #25
 8003f24:	e7f5      	b.n	8003f12 <_printf_i+0x22e>
 8003f26:	bf00      	nop
 8003f28:	08004239 	.word	0x08004239
 8003f2c:	0800424a 	.word	0x0800424a

08003f30 <memcpy>:
 8003f30:	440a      	add	r2, r1
 8003f32:	4291      	cmp	r1, r2
 8003f34:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f38:	d100      	bne.n	8003f3c <memcpy+0xc>
 8003f3a:	4770      	bx	lr
 8003f3c:	b510      	push	{r4, lr}
 8003f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f46:	4291      	cmp	r1, r2
 8003f48:	d1f9      	bne.n	8003f3e <memcpy+0xe>
 8003f4a:	bd10      	pop	{r4, pc}

08003f4c <memmove>:
 8003f4c:	4288      	cmp	r0, r1
 8003f4e:	b510      	push	{r4, lr}
 8003f50:	eb01 0402 	add.w	r4, r1, r2
 8003f54:	d902      	bls.n	8003f5c <memmove+0x10>
 8003f56:	4284      	cmp	r4, r0
 8003f58:	4623      	mov	r3, r4
 8003f5a:	d807      	bhi.n	8003f6c <memmove+0x20>
 8003f5c:	1e43      	subs	r3, r0, #1
 8003f5e:	42a1      	cmp	r1, r4
 8003f60:	d008      	beq.n	8003f74 <memmove+0x28>
 8003f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f6a:	e7f8      	b.n	8003f5e <memmove+0x12>
 8003f6c:	4402      	add	r2, r0
 8003f6e:	4601      	mov	r1, r0
 8003f70:	428a      	cmp	r2, r1
 8003f72:	d100      	bne.n	8003f76 <memmove+0x2a>
 8003f74:	bd10      	pop	{r4, pc}
 8003f76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f7e:	e7f7      	b.n	8003f70 <memmove+0x24>

08003f80 <_free_r>:
 8003f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f82:	2900      	cmp	r1, #0
 8003f84:	d044      	beq.n	8004010 <_free_r+0x90>
 8003f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f8a:	9001      	str	r0, [sp, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f1a1 0404 	sub.w	r4, r1, #4
 8003f92:	bfb8      	it	lt
 8003f94:	18e4      	addlt	r4, r4, r3
 8003f96:	f000 f913 	bl	80041c0 <__malloc_lock>
 8003f9a:	4a1e      	ldr	r2, [pc, #120]	; (8004014 <_free_r+0x94>)
 8003f9c:	9801      	ldr	r0, [sp, #4]
 8003f9e:	6813      	ldr	r3, [r2, #0]
 8003fa0:	b933      	cbnz	r3, 8003fb0 <_free_r+0x30>
 8003fa2:	6063      	str	r3, [r4, #4]
 8003fa4:	6014      	str	r4, [r2, #0]
 8003fa6:	b003      	add	sp, #12
 8003fa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fac:	f000 b90e 	b.w	80041cc <__malloc_unlock>
 8003fb0:	42a3      	cmp	r3, r4
 8003fb2:	d908      	bls.n	8003fc6 <_free_r+0x46>
 8003fb4:	6825      	ldr	r5, [r4, #0]
 8003fb6:	1961      	adds	r1, r4, r5
 8003fb8:	428b      	cmp	r3, r1
 8003fba:	bf01      	itttt	eq
 8003fbc:	6819      	ldreq	r1, [r3, #0]
 8003fbe:	685b      	ldreq	r3, [r3, #4]
 8003fc0:	1949      	addeq	r1, r1, r5
 8003fc2:	6021      	streq	r1, [r4, #0]
 8003fc4:	e7ed      	b.n	8003fa2 <_free_r+0x22>
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	b10b      	cbz	r3, 8003fd0 <_free_r+0x50>
 8003fcc:	42a3      	cmp	r3, r4
 8003fce:	d9fa      	bls.n	8003fc6 <_free_r+0x46>
 8003fd0:	6811      	ldr	r1, [r2, #0]
 8003fd2:	1855      	adds	r5, r2, r1
 8003fd4:	42a5      	cmp	r5, r4
 8003fd6:	d10b      	bne.n	8003ff0 <_free_r+0x70>
 8003fd8:	6824      	ldr	r4, [r4, #0]
 8003fda:	4421      	add	r1, r4
 8003fdc:	1854      	adds	r4, r2, r1
 8003fde:	42a3      	cmp	r3, r4
 8003fe0:	6011      	str	r1, [r2, #0]
 8003fe2:	d1e0      	bne.n	8003fa6 <_free_r+0x26>
 8003fe4:	681c      	ldr	r4, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	6053      	str	r3, [r2, #4]
 8003fea:	4421      	add	r1, r4
 8003fec:	6011      	str	r1, [r2, #0]
 8003fee:	e7da      	b.n	8003fa6 <_free_r+0x26>
 8003ff0:	d902      	bls.n	8003ff8 <_free_r+0x78>
 8003ff2:	230c      	movs	r3, #12
 8003ff4:	6003      	str	r3, [r0, #0]
 8003ff6:	e7d6      	b.n	8003fa6 <_free_r+0x26>
 8003ff8:	6825      	ldr	r5, [r4, #0]
 8003ffa:	1961      	adds	r1, r4, r5
 8003ffc:	428b      	cmp	r3, r1
 8003ffe:	bf04      	itt	eq
 8004000:	6819      	ldreq	r1, [r3, #0]
 8004002:	685b      	ldreq	r3, [r3, #4]
 8004004:	6063      	str	r3, [r4, #4]
 8004006:	bf04      	itt	eq
 8004008:	1949      	addeq	r1, r1, r5
 800400a:	6021      	streq	r1, [r4, #0]
 800400c:	6054      	str	r4, [r2, #4]
 800400e:	e7ca      	b.n	8003fa6 <_free_r+0x26>
 8004010:	b003      	add	sp, #12
 8004012:	bd30      	pop	{r4, r5, pc}
 8004014:	2000085c 	.word	0x2000085c

08004018 <sbrk_aligned>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	4e0e      	ldr	r6, [pc, #56]	; (8004054 <sbrk_aligned+0x3c>)
 800401c:	460c      	mov	r4, r1
 800401e:	6831      	ldr	r1, [r6, #0]
 8004020:	4605      	mov	r5, r0
 8004022:	b911      	cbnz	r1, 800402a <sbrk_aligned+0x12>
 8004024:	f000 f8bc 	bl	80041a0 <_sbrk_r>
 8004028:	6030      	str	r0, [r6, #0]
 800402a:	4621      	mov	r1, r4
 800402c:	4628      	mov	r0, r5
 800402e:	f000 f8b7 	bl	80041a0 <_sbrk_r>
 8004032:	1c43      	adds	r3, r0, #1
 8004034:	d00a      	beq.n	800404c <sbrk_aligned+0x34>
 8004036:	1cc4      	adds	r4, r0, #3
 8004038:	f024 0403 	bic.w	r4, r4, #3
 800403c:	42a0      	cmp	r0, r4
 800403e:	d007      	beq.n	8004050 <sbrk_aligned+0x38>
 8004040:	1a21      	subs	r1, r4, r0
 8004042:	4628      	mov	r0, r5
 8004044:	f000 f8ac 	bl	80041a0 <_sbrk_r>
 8004048:	3001      	adds	r0, #1
 800404a:	d101      	bne.n	8004050 <sbrk_aligned+0x38>
 800404c:	f04f 34ff 	mov.w	r4, #4294967295
 8004050:	4620      	mov	r0, r4
 8004052:	bd70      	pop	{r4, r5, r6, pc}
 8004054:	20000860 	.word	0x20000860

08004058 <_malloc_r>:
 8004058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800405c:	1ccd      	adds	r5, r1, #3
 800405e:	f025 0503 	bic.w	r5, r5, #3
 8004062:	3508      	adds	r5, #8
 8004064:	2d0c      	cmp	r5, #12
 8004066:	bf38      	it	cc
 8004068:	250c      	movcc	r5, #12
 800406a:	2d00      	cmp	r5, #0
 800406c:	4607      	mov	r7, r0
 800406e:	db01      	blt.n	8004074 <_malloc_r+0x1c>
 8004070:	42a9      	cmp	r1, r5
 8004072:	d905      	bls.n	8004080 <_malloc_r+0x28>
 8004074:	230c      	movs	r3, #12
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	2600      	movs	r6, #0
 800407a:	4630      	mov	r0, r6
 800407c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004080:	4e2e      	ldr	r6, [pc, #184]	; (800413c <_malloc_r+0xe4>)
 8004082:	f000 f89d 	bl	80041c0 <__malloc_lock>
 8004086:	6833      	ldr	r3, [r6, #0]
 8004088:	461c      	mov	r4, r3
 800408a:	bb34      	cbnz	r4, 80040da <_malloc_r+0x82>
 800408c:	4629      	mov	r1, r5
 800408e:	4638      	mov	r0, r7
 8004090:	f7ff ffc2 	bl	8004018 <sbrk_aligned>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	4604      	mov	r4, r0
 8004098:	d14d      	bne.n	8004136 <_malloc_r+0xde>
 800409a:	6834      	ldr	r4, [r6, #0]
 800409c:	4626      	mov	r6, r4
 800409e:	2e00      	cmp	r6, #0
 80040a0:	d140      	bne.n	8004124 <_malloc_r+0xcc>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	4631      	mov	r1, r6
 80040a6:	4638      	mov	r0, r7
 80040a8:	eb04 0803 	add.w	r8, r4, r3
 80040ac:	f000 f878 	bl	80041a0 <_sbrk_r>
 80040b0:	4580      	cmp	r8, r0
 80040b2:	d13a      	bne.n	800412a <_malloc_r+0xd2>
 80040b4:	6821      	ldr	r1, [r4, #0]
 80040b6:	3503      	adds	r5, #3
 80040b8:	1a6d      	subs	r5, r5, r1
 80040ba:	f025 0503 	bic.w	r5, r5, #3
 80040be:	3508      	adds	r5, #8
 80040c0:	2d0c      	cmp	r5, #12
 80040c2:	bf38      	it	cc
 80040c4:	250c      	movcc	r5, #12
 80040c6:	4629      	mov	r1, r5
 80040c8:	4638      	mov	r0, r7
 80040ca:	f7ff ffa5 	bl	8004018 <sbrk_aligned>
 80040ce:	3001      	adds	r0, #1
 80040d0:	d02b      	beq.n	800412a <_malloc_r+0xd2>
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	442b      	add	r3, r5
 80040d6:	6023      	str	r3, [r4, #0]
 80040d8:	e00e      	b.n	80040f8 <_malloc_r+0xa0>
 80040da:	6822      	ldr	r2, [r4, #0]
 80040dc:	1b52      	subs	r2, r2, r5
 80040de:	d41e      	bmi.n	800411e <_malloc_r+0xc6>
 80040e0:	2a0b      	cmp	r2, #11
 80040e2:	d916      	bls.n	8004112 <_malloc_r+0xba>
 80040e4:	1961      	adds	r1, r4, r5
 80040e6:	42a3      	cmp	r3, r4
 80040e8:	6025      	str	r5, [r4, #0]
 80040ea:	bf18      	it	ne
 80040ec:	6059      	strne	r1, [r3, #4]
 80040ee:	6863      	ldr	r3, [r4, #4]
 80040f0:	bf08      	it	eq
 80040f2:	6031      	streq	r1, [r6, #0]
 80040f4:	5162      	str	r2, [r4, r5]
 80040f6:	604b      	str	r3, [r1, #4]
 80040f8:	4638      	mov	r0, r7
 80040fa:	f104 060b 	add.w	r6, r4, #11
 80040fe:	f000 f865 	bl	80041cc <__malloc_unlock>
 8004102:	f026 0607 	bic.w	r6, r6, #7
 8004106:	1d23      	adds	r3, r4, #4
 8004108:	1af2      	subs	r2, r6, r3
 800410a:	d0b6      	beq.n	800407a <_malloc_r+0x22>
 800410c:	1b9b      	subs	r3, r3, r6
 800410e:	50a3      	str	r3, [r4, r2]
 8004110:	e7b3      	b.n	800407a <_malloc_r+0x22>
 8004112:	6862      	ldr	r2, [r4, #4]
 8004114:	42a3      	cmp	r3, r4
 8004116:	bf0c      	ite	eq
 8004118:	6032      	streq	r2, [r6, #0]
 800411a:	605a      	strne	r2, [r3, #4]
 800411c:	e7ec      	b.n	80040f8 <_malloc_r+0xa0>
 800411e:	4623      	mov	r3, r4
 8004120:	6864      	ldr	r4, [r4, #4]
 8004122:	e7b2      	b.n	800408a <_malloc_r+0x32>
 8004124:	4634      	mov	r4, r6
 8004126:	6876      	ldr	r6, [r6, #4]
 8004128:	e7b9      	b.n	800409e <_malloc_r+0x46>
 800412a:	230c      	movs	r3, #12
 800412c:	603b      	str	r3, [r7, #0]
 800412e:	4638      	mov	r0, r7
 8004130:	f000 f84c 	bl	80041cc <__malloc_unlock>
 8004134:	e7a1      	b.n	800407a <_malloc_r+0x22>
 8004136:	6025      	str	r5, [r4, #0]
 8004138:	e7de      	b.n	80040f8 <_malloc_r+0xa0>
 800413a:	bf00      	nop
 800413c:	2000085c 	.word	0x2000085c

08004140 <_realloc_r>:
 8004140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004144:	4680      	mov	r8, r0
 8004146:	4614      	mov	r4, r2
 8004148:	460e      	mov	r6, r1
 800414a:	b921      	cbnz	r1, 8004156 <_realloc_r+0x16>
 800414c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004150:	4611      	mov	r1, r2
 8004152:	f7ff bf81 	b.w	8004058 <_malloc_r>
 8004156:	b92a      	cbnz	r2, 8004164 <_realloc_r+0x24>
 8004158:	f7ff ff12 	bl	8003f80 <_free_r>
 800415c:	4625      	mov	r5, r4
 800415e:	4628      	mov	r0, r5
 8004160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004164:	f000 f838 	bl	80041d8 <_malloc_usable_size_r>
 8004168:	4284      	cmp	r4, r0
 800416a:	4607      	mov	r7, r0
 800416c:	d802      	bhi.n	8004174 <_realloc_r+0x34>
 800416e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004172:	d812      	bhi.n	800419a <_realloc_r+0x5a>
 8004174:	4621      	mov	r1, r4
 8004176:	4640      	mov	r0, r8
 8004178:	f7ff ff6e 	bl	8004058 <_malloc_r>
 800417c:	4605      	mov	r5, r0
 800417e:	2800      	cmp	r0, #0
 8004180:	d0ed      	beq.n	800415e <_realloc_r+0x1e>
 8004182:	42bc      	cmp	r4, r7
 8004184:	4622      	mov	r2, r4
 8004186:	4631      	mov	r1, r6
 8004188:	bf28      	it	cs
 800418a:	463a      	movcs	r2, r7
 800418c:	f7ff fed0 	bl	8003f30 <memcpy>
 8004190:	4631      	mov	r1, r6
 8004192:	4640      	mov	r0, r8
 8004194:	f7ff fef4 	bl	8003f80 <_free_r>
 8004198:	e7e1      	b.n	800415e <_realloc_r+0x1e>
 800419a:	4635      	mov	r5, r6
 800419c:	e7df      	b.n	800415e <_realloc_r+0x1e>
	...

080041a0 <_sbrk_r>:
 80041a0:	b538      	push	{r3, r4, r5, lr}
 80041a2:	4d06      	ldr	r5, [pc, #24]	; (80041bc <_sbrk_r+0x1c>)
 80041a4:	2300      	movs	r3, #0
 80041a6:	4604      	mov	r4, r0
 80041a8:	4608      	mov	r0, r1
 80041aa:	602b      	str	r3, [r5, #0]
 80041ac:	f7fc fe0c 	bl	8000dc8 <_sbrk>
 80041b0:	1c43      	adds	r3, r0, #1
 80041b2:	d102      	bne.n	80041ba <_sbrk_r+0x1a>
 80041b4:	682b      	ldr	r3, [r5, #0]
 80041b6:	b103      	cbz	r3, 80041ba <_sbrk_r+0x1a>
 80041b8:	6023      	str	r3, [r4, #0]
 80041ba:	bd38      	pop	{r3, r4, r5, pc}
 80041bc:	20000864 	.word	0x20000864

080041c0 <__malloc_lock>:
 80041c0:	4801      	ldr	r0, [pc, #4]	; (80041c8 <__malloc_lock+0x8>)
 80041c2:	f000 b811 	b.w	80041e8 <__retarget_lock_acquire_recursive>
 80041c6:	bf00      	nop
 80041c8:	20000868 	.word	0x20000868

080041cc <__malloc_unlock>:
 80041cc:	4801      	ldr	r0, [pc, #4]	; (80041d4 <__malloc_unlock+0x8>)
 80041ce:	f000 b80c 	b.w	80041ea <__retarget_lock_release_recursive>
 80041d2:	bf00      	nop
 80041d4:	20000868 	.word	0x20000868

080041d8 <_malloc_usable_size_r>:
 80041d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041dc:	1f18      	subs	r0, r3, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	bfbc      	itt	lt
 80041e2:	580b      	ldrlt	r3, [r1, r0]
 80041e4:	18c0      	addlt	r0, r0, r3
 80041e6:	4770      	bx	lr

080041e8 <__retarget_lock_acquire_recursive>:
 80041e8:	4770      	bx	lr

080041ea <__retarget_lock_release_recursive>:
 80041ea:	4770      	bx	lr

080041ec <_init>:
 80041ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ee:	bf00      	nop
 80041f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041f2:	bc08      	pop	{r3}
 80041f4:	469e      	mov	lr, r3
 80041f6:	4770      	bx	lr

080041f8 <_fini>:
 80041f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fa:	bf00      	nop
 80041fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fe:	bc08      	pop	{r3}
 8004200:	469e      	mov	lr, r3
 8004202:	4770      	bx	lr
