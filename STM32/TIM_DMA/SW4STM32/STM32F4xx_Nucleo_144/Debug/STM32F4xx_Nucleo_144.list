
STM32F4xx_Nucleo_144.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001908  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001ab4  08001ab4  00011ab4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001ae0  08001ae0  00011ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001ae8  08001ae8  00011ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001aec  08001aec  00011aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  20000000  08001af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
  8 .bss          000000f4  2000001c  2000001c  0002001c  2**2
                  ALLOC
  9 ._user_heap_stack 00000940  20000110  20000110  0002001c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000b868  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001d83  00000000  00000000  0002b8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0000639f  00000000  00000000  0002d637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  000339d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  00034110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229ea  00000000  00000000  00034b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c063  00000000  00000000  00057512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5781  00000000  00000000  00063575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138cf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000148c  00000000  00000000  00138d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001a9c 	.word	0x08001a9c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08001a9c 	.word	0x08001a9c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80004f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004f2:	4b19      	ldr	r3, [pc, #100]	; (8000558 <BSP_LED_Init+0x68>)
 80004f4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80004f6:	4604      	mov	r4, r0
 80004f8:	bb08      	cbnz	r0, 800053e <BSP_LED_Init+0x4e>
 80004fa:	9001      	str	r0, [sp, #4]
 80004fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004fe:	f042 0202 	orr.w	r2, r2, #2
 8000502:	631a      	str	r2, [r3, #48]	; 0x30
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0302 	and.w	r3, r3, #2
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800050e:	4b13      	ldr	r3, [pc, #76]	; (800055c <BSP_LED_Init+0x6c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000510:	4d13      	ldr	r5, [pc, #76]	; (8000560 <BSP_LED_Init+0x70>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000512:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000516:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800051a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2700      	movs	r7, #0
 800051e:	2301      	movs	r3, #1
 8000520:	e9cd 3704 	strd	r3, r7, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000524:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000526:	2302      	movs	r3, #2
 8000528:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800052a:	f000 fa93 	bl	8000a54 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800052e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000532:	463a      	mov	r2, r7
 8000534:	4631      	mov	r1, r6
 8000536:	f000 fb73 	bl	8000c20 <HAL_GPIO_WritePin>
}
 800053a:	b009      	add	sp, #36	; 0x24
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 800053e:	2200      	movs	r2, #0
 8000540:	9202      	str	r2, [sp, #8]
 8000542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000544:	f042 0202 	orr.w	r2, r2, #2
 8000548:	631a      	str	r2, [r3, #48]	; 0x30
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	f003 0302 	and.w	r3, r3, #2
 8000550:	9302      	str	r3, [sp, #8]
 8000552:	9b02      	ldr	r3, [sp, #8]
 8000554:	e7db      	b.n	800050e <BSP_LED_Init+0x1e>
 8000556:	bf00      	nop
 8000558:	40023800 	.word	0x40023800
 800055c:	08001ab4 	.word	0x08001ab4
 8000560:	20000000 	.word	0x20000000

08000564 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <BSP_LED_On+0x14>)
 8000566:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800056a:	4b04      	ldr	r3, [pc, #16]	; (800057c <BSP_LED_On+0x18>)
 800056c:	2201      	movs	r2, #1
 800056e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000572:	f000 bb55 	b.w	8000c20 <HAL_GPIO_WritePin>
 8000576:	bf00      	nop
 8000578:	08001ab4 	.word	0x08001ab4
 800057c:	20000000 	.word	0x20000000

08000580 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000580:	490f      	ldr	r1, [pc, #60]	; (80005c0 <SystemInit+0x40>)
 8000582:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000586:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800058a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800058e:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <SystemInit+0x44>)
 8000590:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000592:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000594:	f042 0201 	orr.w	r2, r2, #1
 8000598:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800059a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80005a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <SystemInit+0x48>)
 80005aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005b2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005b4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80005ba:	608b      	str	r3, [r1, #8]
#endif
}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e000ed00 	.word	0xe000ed00
 80005c4:	40023800 	.word	0x40023800
 80005c8:	24003010 	.word	0x24003010

080005cc <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005cc:	4770      	bx	lr
	...

080005d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <HAL_InitTick+0x3c>)
 80005d4:	4e0e      	ldr	r6, [pc, #56]	; (8000610 <HAL_InitTick+0x40>)
{
 80005d6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005dc:	7830      	ldrb	r0, [r6, #0]
 80005de:	fbb3 f3f0 	udiv	r3, r3, r0
 80005e2:	6810      	ldr	r0, [r2, #0]
 80005e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005e8:	f000 f892 	bl	8000710 <HAL_SYSTICK_Config>
 80005ec:	4604      	mov	r4, r0
 80005ee:	b950      	cbnz	r0, 8000606 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f0:	2d0f      	cmp	r5, #15
 80005f2:	d808      	bhi.n	8000606 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f4:	4602      	mov	r2, r0
 80005f6:	4629      	mov	r1, r5
 80005f8:	f04f 30ff 	mov.w	r0, #4294967295
 80005fc:	f000 f848 	bl	8000690 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000600:	6075      	str	r5, [r6, #4]
 8000602:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000604:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000606:	2001      	movs	r0, #1
 8000608:	e7fc      	b.n	8000604 <HAL_InitTick+0x34>
 800060a:	bf00      	nop
 800060c:	20000010 	.word	0x20000010
 8000610:	20000014 	.word	0x20000014

08000614 <HAL_Init>:
{
 8000614:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <HAL_Init+0x30>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800061e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000626:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800062e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000630:	2003      	movs	r0, #3
 8000632:	f000 f81b 	bl	800066c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000636:	200f      	movs	r0, #15
 8000638:	f7ff ffca 	bl	80005d0 <HAL_InitTick>
  HAL_MspInit();
 800063c:	f7ff ffc6 	bl	80005cc <HAL_MspInit>
}
 8000640:	2000      	movs	r0, #0
 8000642:	bd08      	pop	{r3, pc}
 8000644:	40023c00 	.word	0x40023c00

08000648 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000648:	4a03      	ldr	r2, [pc, #12]	; (8000658 <HAL_IncTick+0x10>)
 800064a:	4b04      	ldr	r3, [pc, #16]	; (800065c <HAL_IncTick+0x14>)
 800064c:	6811      	ldr	r1, [r2, #0]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	440b      	add	r3, r1
 8000652:	6013      	str	r3, [r2, #0]
}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000038 	.word	0x20000038
 800065c:	20000014 	.word	0x20000014

08000660 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000660:	4b01      	ldr	r3, [pc, #4]	; (8000668 <HAL_GetTick+0x8>)
 8000662:	6818      	ldr	r0, [r3, #0]
}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000038 	.word	0x20000038

0800066c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800066e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000670:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000674:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000676:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000678:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800067e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000688:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000692:	b530      	push	{r4, r5, lr}
 8000694:	68dc      	ldr	r4, [r3, #12]
 8000696:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800069a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a0:	2d04      	cmp	r5, #4
 80006a2:	bf28      	it	cs
 80006a4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ac:	bf8c      	ite	hi
 80006ae:	3c03      	subhi	r4, #3
 80006b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b2:	fa03 f505 	lsl.w	r5, r3, r5
 80006b6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ba:	40a3      	lsls	r3, r4
 80006bc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80006c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c8:	bfac      	ite	ge
 80006ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ce:	4a08      	ldrlt	r2, [pc, #32]	; (80006f0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d4:	bfb8      	it	lt
 80006d6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	bfaa      	itet	ge
 80006de:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	e000ed14 	.word	0xe000ed14

080006f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006f4:	2800      	cmp	r0, #0
 80006f6:	db08      	blt.n	800070a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f8:	0942      	lsrs	r2, r0, #5
 80006fa:	2301      	movs	r3, #1
 80006fc:	f000 001f 	and.w	r0, r0, #31
 8000700:	fa03 f000 	lsl.w	r0, r3, r0
 8000704:	4b01      	ldr	r3, [pc, #4]	; (800070c <HAL_NVIC_EnableIRQ+0x18>)
 8000706:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800070a:	4770      	bx	lr
 800070c:	e000e100 	.word	0xe000e100

08000710 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000710:	3801      	subs	r0, #1
 8000712:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000716:	d20b      	bcs.n	8000730 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000718:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	4a05      	ldr	r2, [pc, #20]	; (8000734 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000720:	21f0      	movs	r1, #240	; 0xf0
 8000722:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000726:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000728:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800072a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800072c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800072e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000730:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000732:	4770      	bx	lr
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000738:	6803      	ldr	r3, [r0, #0]
{
 800073a:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800073c:	4c08      	ldr	r4, [pc, #32]	; (8000760 <DMA_CalcBaseAndBitshift+0x28>)
{
 800073e:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000740:	b2d9      	uxtb	r1, r3
 8000742:	3910      	subs	r1, #16
 8000744:	2018      	movs	r0, #24
 8000746:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800074a:	5c20      	ldrb	r0, [r4, r0]
 800074c:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800074e:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8000752:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 8000756:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000758:	bf88      	it	hi
 800075a:	3004      	addhi	r0, #4
 800075c:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800075e:	bd10      	pop	{r4, pc}
 8000760:	08001ad6 	.word	0x08001ad6

08000764 <HAL_DMA_Init>:
{
 8000764:	b570      	push	{r4, r5, r6, lr}
 8000766:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000768:	f7ff ff7a 	bl	8000660 <HAL_GetTick>
 800076c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800076e:	2c00      	cmp	r4, #0
 8000770:	d073      	beq.n	800085a <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8000772:	2302      	movs	r3, #2
 8000774:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000778:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 800077a:	2300      	movs	r3, #0
 800077c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000780:	6813      	ldr	r3, [r2, #0]
 8000782:	f023 0301 	bic.w	r3, r3, #1
 8000786:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000788:	6821      	ldr	r1, [r4, #0]
 800078a:	680b      	ldr	r3, [r1, #0]
 800078c:	07d8      	lsls	r0, r3, #31
 800078e:	d42f      	bmi.n	80007f0 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8000790:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000792:	4d33      	ldr	r5, [pc, #204]	; (8000860 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000794:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000796:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000798:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800079c:	4313      	orrs	r3, r2
 800079e:	68e2      	ldr	r2, [r4, #12]
 80007a0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007a2:	6922      	ldr	r2, [r4, #16]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	6962      	ldr	r2, [r4, #20]
 80007a8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007aa:	69e2      	ldr	r2, [r4, #28]
 80007ac:	4303      	orrs	r3, r0
 80007ae:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80007b0:	6a22      	ldr	r2, [r4, #32]
 80007b2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007b6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007b8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80007bc:	bf02      	ittt	eq
 80007be:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80007c2:	4335      	orreq	r5, r6
 80007c4:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80007c6:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80007c8:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007ca:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80007cc:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007d4:	d133      	bne.n	800083e <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 80007d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80007d8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80007da:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80007dc:	b37d      	cbz	r5, 800083e <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80007de:	b990      	cbnz	r0, 8000806 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 80007e0:	2a01      	cmp	r2, #1
 80007e2:	d021      	beq.n	8000828 <HAL_DMA_Init+0xc4>
 80007e4:	f032 0202 	bics.w	r2, r2, #2
 80007e8:	d129      	bne.n	800083e <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80007ea:	01ea      	lsls	r2, r5, #7
 80007ec:	d527      	bpl.n	800083e <HAL_DMA_Init+0xda>
 80007ee:	e01e      	b.n	800082e <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80007f0:	f7ff ff36 	bl	8000660 <HAL_GetTick>
 80007f4:	1b40      	subs	r0, r0, r5
 80007f6:	2805      	cmp	r0, #5
 80007f8:	d9c6      	bls.n	8000788 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80007fa:	2320      	movs	r3, #32
 80007fc:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80007fe:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000800:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000804:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000806:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800080a:	d114      	bne.n	8000836 <HAL_DMA_Init+0xd2>
    switch (tmp)
 800080c:	2a03      	cmp	r2, #3
 800080e:	d816      	bhi.n	800083e <HAL_DMA_Init+0xda>
 8000810:	a001      	add	r0, pc, #4	; (adr r0, 8000818 <HAL_DMA_Init+0xb4>)
 8000812:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000816:	bf00      	nop
 8000818:	0800082f 	.word	0x0800082f
 800081c:	080007eb 	.word	0x080007eb
 8000820:	0800082f 	.word	0x0800082f
 8000824:	08000829 	.word	0x08000829
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000828:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800082c:	d107      	bne.n	800083e <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800082e:	2340      	movs	r3, #64	; 0x40
 8000830:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000832:	2001      	movs	r0, #1
 8000834:	e7e4      	b.n	8000800 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8000836:	2a02      	cmp	r2, #2
 8000838:	d9f9      	bls.n	800082e <HAL_DMA_Init+0xca>
 800083a:	2a03      	cmp	r2, #3
 800083c:	d0d5      	beq.n	80007ea <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800083e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000840:	4620      	mov	r0, r4
 8000842:	f7ff ff79 	bl	8000738 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000846:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000848:	233f      	movs	r3, #63	; 0x3f
 800084a:	4093      	lsls	r3, r2
 800084c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800084e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000850:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000852:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000854:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000858:	e7d4      	b.n	8000804 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 800085a:	2001      	movs	r0, #1
 800085c:	e7d2      	b.n	8000804 <HAL_DMA_Init+0xa0>
 800085e:	bf00      	nop
 8000860:	f010803f 	.word	0xf010803f

08000864 <HAL_DMA_Start_IT>:
{
 8000864:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000866:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800086a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800086c:	2c01      	cmp	r4, #1
 800086e:	d031      	beq.n	80008d4 <HAL_DMA_Start_IT+0x70>
 8000870:	2401      	movs	r4, #1
 8000872:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000876:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800087a:	2c01      	cmp	r4, #1
 800087c:	f04f 0500 	mov.w	r5, #0
 8000880:	f04f 0402 	mov.w	r4, #2
 8000884:	d124      	bne.n	80008d0 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000886:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800088a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800088c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800088e:	6825      	ldr	r5, [r4, #0]
 8000890:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000894:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000896:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000898:	6883      	ldr	r3, [r0, #8]
 800089a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 800089c:	bf0e      	itee	eq
 800089e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80008a0:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80008a2:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008a4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80008a6:	bf08      	it	eq
 80008a8:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008aa:	233f      	movs	r3, #63	; 0x3f
 80008ac:	4093      	lsls	r3, r2
 80008ae:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	f043 0316 	orr.w	r3, r3, #22
 80008b6:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80008b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80008ba:	b11b      	cbz	r3, 80008c4 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80008bc:	6823      	ldr	r3, [r4, #0]
 80008be:	f043 0308 	orr.w	r3, r3, #8
 80008c2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80008c4:	6823      	ldr	r3, [r4, #0]
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80008cc:	2000      	movs	r0, #0
}
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80008d0:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80008d4:	2002      	movs	r0, #2
 80008d6:	e7fa      	b.n	80008ce <HAL_DMA_Start_IT+0x6a>

080008d8 <HAL_DMA_IRQHandler>:
{
 80008d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80008da:	2300      	movs	r3, #0
 80008dc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80008de:	4b5c      	ldr	r3, [pc, #368]	; (8000a50 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80008e0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80008e2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80008e4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80008e6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80008e8:	2208      	movs	r2, #8
 80008ea:	409a      	lsls	r2, r3
 80008ec:	4232      	tst	r2, r6
{
 80008ee:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80008f0:	d00c      	beq.n	800090c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80008f2:	6801      	ldr	r1, [r0, #0]
 80008f4:	6808      	ldr	r0, [r1, #0]
 80008f6:	0740      	lsls	r0, r0, #29
 80008f8:	d508      	bpl.n	800090c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80008fa:	6808      	ldr	r0, [r1, #0]
 80008fc:	f020 0004 	bic.w	r0, r0, #4
 8000900:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000902:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000904:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000906:	f042 0201 	orr.w	r2, r2, #1
 800090a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800090c:	2201      	movs	r2, #1
 800090e:	409a      	lsls	r2, r3
 8000910:	4232      	tst	r2, r6
 8000912:	d008      	beq.n	8000926 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000914:	6821      	ldr	r1, [r4, #0]
 8000916:	6949      	ldr	r1, [r1, #20]
 8000918:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800091a:	bf41      	itttt	mi
 800091c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800091e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000920:	f042 0202 	orrmi.w	r2, r2, #2
 8000924:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000926:	2204      	movs	r2, #4
 8000928:	409a      	lsls	r2, r3
 800092a:	4232      	tst	r2, r6
 800092c:	d008      	beq.n	8000940 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800092e:	6821      	ldr	r1, [r4, #0]
 8000930:	6809      	ldr	r1, [r1, #0]
 8000932:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000934:	bf41      	itttt	mi
 8000936:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000938:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800093a:	f042 0204 	orrmi.w	r2, r2, #4
 800093e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000940:	2210      	movs	r2, #16
 8000942:	409a      	lsls	r2, r3
 8000944:	4232      	tst	r2, r6
 8000946:	d010      	beq.n	800096a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000948:	6823      	ldr	r3, [r4, #0]
 800094a:	6819      	ldr	r1, [r3, #0]
 800094c:	0709      	lsls	r1, r1, #28
 800094e:	d50c      	bpl.n	800096a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000950:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	0350      	lsls	r0, r2, #13
 8000956:	d537      	bpl.n	80009c8 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	0319      	lsls	r1, r3, #12
 800095c:	d401      	bmi.n	8000962 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800095e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000960:	e000      	b.n	8000964 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000962:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000964:	b10b      	cbz	r3, 800096a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000966:	4620      	mov	r0, r4
 8000968:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800096a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800096c:	2220      	movs	r2, #32
 800096e:	408a      	lsls	r2, r1
 8000970:	4232      	tst	r2, r6
 8000972:	d03a      	beq.n	80009ea <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000974:	6823      	ldr	r3, [r4, #0]
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	06c6      	lsls	r6, r0, #27
 800097a:	d536      	bpl.n	80009ea <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800097c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800097e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000982:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000984:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000986:	d127      	bne.n	80009d8 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000988:	f022 0216 	bic.w	r2, r2, #22
 800098c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800098e:	695a      	ldr	r2, [r3, #20]
 8000990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000994:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000996:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000998:	b90a      	cbnz	r2, 800099e <HAL_DMA_IRQHandler+0xc6>
 800099a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800099c:	b11a      	cbz	r2, 80009a6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	f022 0208 	bic.w	r2, r2, #8
 80009a4:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009a6:	233f      	movs	r3, #63	; 0x3f
 80009a8:	408b      	lsls	r3, r1
 80009aa:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80009ac:	2301      	movs	r3, #1
 80009ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80009b2:	2300      	movs	r3, #0
 80009b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80009b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d045      	beq.n	8000a4a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 80009be:	4620      	mov	r0, r4
}
 80009c0:	b003      	add	sp, #12
 80009c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80009c6:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009cc:	bf5e      	ittt	pl
 80009ce:	681a      	ldrpl	r2, [r3, #0]
 80009d0:	f022 0208 	bicpl.w	r2, r2, #8
 80009d4:	601a      	strpl	r2, [r3, #0]
 80009d6:	e7c2      	b.n	800095e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80009d8:	0350      	lsls	r0, r2, #13
 80009da:	d527      	bpl.n	8000a2c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	0319      	lsls	r1, r3, #12
 80009e0:	d431      	bmi.n	8000a46 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80009e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80009e4:	b10b      	cbz	r3, 80009ea <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80009e6:	4620      	mov	r0, r4
 80009e8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80009ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80009ec:	b36b      	cbz	r3, 8000a4a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80009ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80009f0:	07da      	lsls	r2, r3, #31
 80009f2:	d519      	bpl.n	8000a28 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 80009f4:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80009f6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80009fa:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 80009fe:	2305      	movs	r3, #5
 8000a00:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000a04:	6813      	ldr	r3, [r2, #0]
 8000a06:	f023 0301 	bic.w	r3, r3, #1
 8000a0a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000a0c:	9b01      	ldr	r3, [sp, #4]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	42bb      	cmp	r3, r7
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	d802      	bhi.n	8000a1c <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000a16:	6813      	ldr	r3, [r2, #0]
 8000a18:	07db      	lsls	r3, r3, #31
 8000a1a:	d4f7      	bmi.n	8000a0c <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8000a22:	2300      	movs	r3, #0
 8000a24:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8000a28:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a2a:	e7c6      	b.n	80009ba <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000a32:	d108      	bne.n	8000a46 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000a34:	6819      	ldr	r1, [r3, #0]
 8000a36:	f021 0110 	bic.w	r1, r1, #16
 8000a3a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8000a42:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8000a46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a48:	e7cc      	b.n	80009e4 <HAL_DMA_IRQHandler+0x10c>
}
 8000a4a:	b003      	add	sp, #12
 8000a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000010 	.word	0x20000010

08000a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a58:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8000c1c <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a5c:	4a6d      	ldr	r2, [pc, #436]	; (8000c14 <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a5e:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a60:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000a62:	2401      	movs	r4, #1
 8000a64:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a66:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8000a6a:	43ac      	bics	r4, r5
 8000a6c:	f040 80b9 	bne.w	8000be2 <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a70:	684d      	ldr	r5, [r1, #4]
 8000a72:	f005 0403 	and.w	r4, r5, #3
 8000a76:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a7a:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a7c:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a7e:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a82:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a84:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a88:	d834      	bhi.n	8000af4 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000a8a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a8c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a90:	68cf      	ldr	r7, [r1, #12]
 8000a92:	fa07 f708 	lsl.w	r7, r7, r8
 8000a96:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000a9a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a9c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a9e:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aa2:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000aa6:	409f      	lsls	r7, r3
 8000aa8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000aac:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000aae:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ab0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ab4:	688f      	ldr	r7, [r1, #8]
 8000ab6:	fa07 f708 	lsl.w	r7, r7, r8
 8000aba:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000abe:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000ac0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ac2:	d119      	bne.n	8000af8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000ac4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ac8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000acc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ad0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ad4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ad8:	f04f 0e0f 	mov.w	lr, #15
 8000adc:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000ae0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ae4:	690f      	ldr	r7, [r1, #16]
 8000ae6:	fa07 f70b 	lsl.w	r7, r7, fp
 8000aea:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000aee:	f8ca 7020 	str.w	r7, [sl, #32]
 8000af2:	e001      	b.n	8000af8 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000af4:	2c03      	cmp	r4, #3
 8000af6:	d1da      	bne.n	8000aae <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000af8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000afa:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000afe:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b00:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b02:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8000b06:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b08:	d06b      	beq.n	8000be2 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	f04f 0a00 	mov.w	sl, #0
 8000b0e:	f8cd a004 	str.w	sl, [sp, #4]
 8000b12:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b16:	4c40      	ldr	r4, [pc, #256]	; (8000c18 <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b18:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000b1c:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8000b20:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8000b24:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000b28:	9601      	str	r6, [sp, #4]
 8000b2a:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b2c:	f023 0603 	bic.w	r6, r3, #3
 8000b30:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000b34:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b38:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b3c:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b40:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000b44:	270f      	movs	r7, #15
 8000b46:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b4a:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b4c:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b50:	d04e      	beq.n	8000bf0 <HAL_GPIO_Init+0x19c>
 8000b52:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b56:	42a0      	cmp	r0, r4
 8000b58:	d04c      	beq.n	8000bf4 <HAL_GPIO_Init+0x1a0>
 8000b5a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b5e:	42a0      	cmp	r0, r4
 8000b60:	d04a      	beq.n	8000bf8 <HAL_GPIO_Init+0x1a4>
 8000b62:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b66:	42a0      	cmp	r0, r4
 8000b68:	d048      	beq.n	8000bfc <HAL_GPIO_Init+0x1a8>
 8000b6a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b6e:	42a0      	cmp	r0, r4
 8000b70:	d046      	beq.n	8000c00 <HAL_GPIO_Init+0x1ac>
 8000b72:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b76:	42a0      	cmp	r0, r4
 8000b78:	d044      	beq.n	8000c04 <HAL_GPIO_Init+0x1b0>
 8000b7a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b7e:	42a0      	cmp	r0, r4
 8000b80:	d042      	beq.n	8000c08 <HAL_GPIO_Init+0x1b4>
 8000b82:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b86:	42a0      	cmp	r0, r4
 8000b88:	d040      	beq.n	8000c0c <HAL_GPIO_Init+0x1b8>
 8000b8a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b8e:	42a0      	cmp	r0, r4
 8000b90:	d03e      	beq.n	8000c10 <HAL_GPIO_Init+0x1bc>
 8000b92:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b96:	42a0      	cmp	r0, r4
 8000b98:	bf0c      	ite	eq
 8000b9a:	2409      	moveq	r4, #9
 8000b9c:	240a      	movne	r4, #10
 8000b9e:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ba2:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ba4:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8000ba6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ba8:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bac:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8000bae:	bf54      	ite	pl
 8000bb0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000bb2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8000bb6:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000bb8:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bba:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8000bbc:	bf54      	ite	pl
 8000bbe:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000bc0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8000bc4:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8000bc6:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000bc8:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8000bca:	bf54      	ite	pl
 8000bcc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000bce:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8000bd2:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bd4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000bd6:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000bd8:	bf54      	ite	pl
 8000bda:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000bdc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8000be0:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000be2:	3301      	adds	r3, #1
 8000be4:	2b10      	cmp	r3, #16
 8000be6:	f47f af3b 	bne.w	8000a60 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000bea:	b003      	add	sp, #12
 8000bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bf0:	4654      	mov	r4, sl
 8000bf2:	e7d4      	b.n	8000b9e <HAL_GPIO_Init+0x14a>
 8000bf4:	2401      	movs	r4, #1
 8000bf6:	e7d2      	b.n	8000b9e <HAL_GPIO_Init+0x14a>
 8000bf8:	2402      	movs	r4, #2
 8000bfa:	e7d0      	b.n	8000b9e <HAL_GPIO_Init+0x14a>
 8000bfc:	2403      	movs	r4, #3
 8000bfe:	e7ce      	b.n	8000b9e <HAL_GPIO_Init+0x14a>
 8000c00:	2404      	movs	r4, #4
 8000c02:	e7cc      	b.n	8000b9e <HAL_GPIO_Init+0x14a>
 8000c04:	2405      	movs	r4, #5
 8000c06:	e7ca      	b.n	8000b9e <HAL_GPIO_Init+0x14a>
 8000c08:	2406      	movs	r4, #6
 8000c0a:	e7c8      	b.n	8000b9e <HAL_GPIO_Init+0x14a>
 8000c0c:	2407      	movs	r4, #7
 8000c0e:	e7c6      	b.n	8000b9e <HAL_GPIO_Init+0x14a>
 8000c10:	2408      	movs	r4, #8
 8000c12:	e7c4      	b.n	8000b9e <HAL_GPIO_Init+0x14a>
 8000c14:	40013c00 	.word	0x40013c00
 8000c18:	40020000 	.word	0x40020000
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c20:	b10a      	cbz	r2, 8000c26 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c22:	6181      	str	r1, [r0, #24]
  }
}
 8000c24:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c26:	0409      	lsls	r1, r1, #16
 8000c28:	e7fb      	b.n	8000c22 <HAL_GPIO_WritePin+0x2>
	...

08000c2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	9301      	str	r3, [sp, #4]
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c34:	4d18      	ldr	r5, [pc, #96]	; (8000c98 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c3c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_PWREx_EnableOverDrive+0x70>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 8000c4e:	f7ff fd07 	bl	8000660 <HAL_GetTick>
 8000c52:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c54:	686b      	ldr	r3, [r5, #4]
 8000c56:	03da      	lsls	r2, r3, #15
 8000c58:	d50b      	bpl.n	8000c72 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c5c:	4d0e      	ldr	r5, [pc, #56]	; (8000c98 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c5e:	2201      	movs	r2, #1
 8000c60:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8000c62:	f7ff fcfd 	bl	8000660 <HAL_GetTick>
 8000c66:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c68:	686b      	ldr	r3, [r5, #4]
 8000c6a:	039b      	lsls	r3, r3, #14
 8000c6c:	d50a      	bpl.n	8000c84 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000c6e:	2000      	movs	r0, #0
 8000c70:	e006      	b.n	8000c80 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c72:	f7ff fcf5 	bl	8000660 <HAL_GetTick>
 8000c76:	1b00      	subs	r0, r0, r4
 8000c78:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c7c:	d9ea      	bls.n	8000c54 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8000c7e:	2003      	movs	r0, #3
}
 8000c80:	b003      	add	sp, #12
 8000c82:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c84:	f7ff fcec 	bl	8000660 <HAL_GetTick>
 8000c88:	1b00      	subs	r0, r0, r4
 8000c8a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c8e:	d9eb      	bls.n	8000c68 <HAL_PWREx_EnableOverDrive+0x3c>
 8000c90:	e7f5      	b.n	8000c7e <HAL_PWREx_EnableOverDrive+0x52>
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40007000 	.word	0x40007000
 8000c9c:	420e0000 	.word	0x420e0000

08000ca0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ca0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	b340      	cbz	r0, 8000cfa <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca8:	6803      	ldr	r3, [r0, #0]
 8000caa:	07dd      	lsls	r5, r3, #31
 8000cac:	d410      	bmi.n	8000cd0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cae:	6823      	ldr	r3, [r4, #0]
 8000cb0:	0798      	lsls	r0, r3, #30
 8000cb2:	d45e      	bmi.n	8000d72 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cb4:	6823      	ldr	r3, [r4, #0]
 8000cb6:	071a      	lsls	r2, r3, #28
 8000cb8:	f100 80a0 	bmi.w	8000dfc <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cbc:	6823      	ldr	r3, [r4, #0]
 8000cbe:	075b      	lsls	r3, r3, #29
 8000cc0:	f100 80c0 	bmi.w	8000e44 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cc4:	69a0      	ldr	r0, [r4, #24]
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	f040 8128 	bne.w	8000f1c <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000ccc:	2000      	movs	r0, #0
 8000cce:	e02b      	b.n	8000d28 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cd0:	4b8f      	ldr	r3, [pc, #572]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	f002 020c 	and.w	r2, r2, #12
 8000cd8:	2a04      	cmp	r2, #4
 8000cda:	d007      	beq.n	8000cec <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ce2:	2a08      	cmp	r2, #8
 8000ce4:	d10b      	bne.n	8000cfe <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	0251      	lsls	r1, r2, #9
 8000cea:	d508      	bpl.n	8000cfe <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cec:	4b88      	ldr	r3, [pc, #544]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	039a      	lsls	r2, r3, #14
 8000cf2:	d5dc      	bpl.n	8000cae <HAL_RCC_OscConfig+0xe>
 8000cf4:	6863      	ldr	r3, [r4, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1d9      	bne.n	8000cae <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	e014      	b.n	8000d28 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cfe:	6862      	ldr	r2, [r4, #4]
 8000d00:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000d04:	d113      	bne.n	8000d2e <HAL_RCC_OscConfig+0x8e>
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d0c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fca7 	bl	8000660 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d12:	4e7f      	ldr	r6, [pc, #508]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000d14:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d16:	6833      	ldr	r3, [r6, #0]
 8000d18:	039b      	lsls	r3, r3, #14
 8000d1a:	d4c8      	bmi.n	8000cae <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d1c:	f7ff fca0 	bl	8000660 <HAL_GetTick>
 8000d20:	1b40      	subs	r0, r0, r5
 8000d22:	2864      	cmp	r0, #100	; 0x64
 8000d24:	d9f7      	bls.n	8000d16 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8000d26:	2003      	movs	r0, #3
}
 8000d28:	b002      	add	sp, #8
 8000d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2e:	4d78      	ldr	r5, [pc, #480]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
 8000d30:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000d34:	682b      	ldr	r3, [r5, #0]
 8000d36:	d107      	bne.n	8000d48 <HAL_RCC_OscConfig+0xa8>
 8000d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d3c:	602b      	str	r3, [r5, #0]
 8000d3e:	682b      	ldr	r3, [r5, #0]
 8000d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d44:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d46:	e7e2      	b.n	8000d0e <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d4c:	602b      	str	r3, [r5, #0]
 8000d4e:	682b      	ldr	r3, [r5, #0]
 8000d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d54:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d1d9      	bne.n	8000d0e <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8000d5a:	f7ff fc81 	bl	8000660 <HAL_GetTick>
 8000d5e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d60:	682b      	ldr	r3, [r5, #0]
 8000d62:	039f      	lsls	r7, r3, #14
 8000d64:	d5a3      	bpl.n	8000cae <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d66:	f7ff fc7b 	bl	8000660 <HAL_GetTick>
 8000d6a:	1b80      	subs	r0, r0, r6
 8000d6c:	2864      	cmp	r0, #100	; 0x64
 8000d6e:	d9f7      	bls.n	8000d60 <HAL_RCC_OscConfig+0xc0>
 8000d70:	e7d9      	b.n	8000d26 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d72:	4b67      	ldr	r3, [pc, #412]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	f012 0f0c 	tst.w	r2, #12
 8000d7a:	d007      	beq.n	8000d8c <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d82:	2a08      	cmp	r2, #8
 8000d84:	d111      	bne.n	8000daa <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	025e      	lsls	r6, r3, #9
 8000d8a:	d40e      	bmi.n	8000daa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8c:	4a60      	ldr	r2, [pc, #384]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
 8000d8e:	6813      	ldr	r3, [r2, #0]
 8000d90:	079d      	lsls	r5, r3, #30
 8000d92:	d502      	bpl.n	8000d9a <HAL_RCC_OscConfig+0xfa>
 8000d94:	68e3      	ldr	r3, [r4, #12]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d1af      	bne.n	8000cfa <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d9a:	6813      	ldr	r3, [r2, #0]
 8000d9c:	6921      	ldr	r1, [r4, #16]
 8000d9e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000da2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000da6:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da8:	e784      	b.n	8000cb4 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000daa:	68e2      	ldr	r2, [r4, #12]
 8000dac:	4b59      	ldr	r3, [pc, #356]	; (8000f14 <HAL_RCC_OscConfig+0x274>)
 8000dae:	b1b2      	cbz	r2, 8000dde <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8000db0:	2201      	movs	r2, #1
 8000db2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000db4:	f7ff fc54 	bl	8000660 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db8:	4d55      	ldr	r5, [pc, #340]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000dba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dbc:	682b      	ldr	r3, [r5, #0]
 8000dbe:	0798      	lsls	r0, r3, #30
 8000dc0:	d507      	bpl.n	8000dd2 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc2:	682b      	ldr	r3, [r5, #0]
 8000dc4:	6922      	ldr	r2, [r4, #16]
 8000dc6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000dca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000dce:	602b      	str	r3, [r5, #0]
 8000dd0:	e770      	b.n	8000cb4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dd2:	f7ff fc45 	bl	8000660 <HAL_GetTick>
 8000dd6:	1b80      	subs	r0, r0, r6
 8000dd8:	2802      	cmp	r0, #2
 8000dda:	d9ef      	bls.n	8000dbc <HAL_RCC_OscConfig+0x11c>
 8000ddc:	e7a3      	b.n	8000d26 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8000dde:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000de0:	f7ff fc3e 	bl	8000660 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de4:	4e4a      	ldr	r6, [pc, #296]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8000de6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de8:	6833      	ldr	r3, [r6, #0]
 8000dea:	0799      	lsls	r1, r3, #30
 8000dec:	f57f af62 	bpl.w	8000cb4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000df0:	f7ff fc36 	bl	8000660 <HAL_GetTick>
 8000df4:	1b40      	subs	r0, r0, r5
 8000df6:	2802      	cmp	r0, #2
 8000df8:	d9f6      	bls.n	8000de8 <HAL_RCC_OscConfig+0x148>
 8000dfa:	e794      	b.n	8000d26 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dfc:	6962      	ldr	r2, [r4, #20]
 8000dfe:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <HAL_RCC_OscConfig+0x274>)
 8000e00:	b182      	cbz	r2, 8000e24 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000e02:	2201      	movs	r2, #1
 8000e04:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000e08:	f7ff fc2a 	bl	8000660 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e0c:	4e40      	ldr	r6, [pc, #256]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000e0e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e10:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000e12:	079f      	lsls	r7, r3, #30
 8000e14:	f53f af52 	bmi.w	8000cbc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e18:	f7ff fc22 	bl	8000660 <HAL_GetTick>
 8000e1c:	1b40      	subs	r0, r0, r5
 8000e1e:	2802      	cmp	r0, #2
 8000e20:	d9f6      	bls.n	8000e10 <HAL_RCC_OscConfig+0x170>
 8000e22:	e780      	b.n	8000d26 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8000e24:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000e28:	f7ff fc1a 	bl	8000660 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e2c:	4e38      	ldr	r6, [pc, #224]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000e2e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e30:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000e32:	0798      	lsls	r0, r3, #30
 8000e34:	f57f af42 	bpl.w	8000cbc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e38:	f7ff fc12 	bl	8000660 <HAL_GetTick>
 8000e3c:	1b40      	subs	r0, r0, r5
 8000e3e:	2802      	cmp	r0, #2
 8000e40:	d9f6      	bls.n	8000e30 <HAL_RCC_OscConfig+0x190>
 8000e42:	e770      	b.n	8000d26 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e44:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
 8000e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e48:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000e4c:	d128      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	9201      	str	r2, [sp, #4]
 8000e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e56:	641a      	str	r2, [r3, #64]	; 0x40
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e62:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e64:	4d2c      	ldr	r5, [pc, #176]	; (8000f18 <HAL_RCC_OscConfig+0x278>)
 8000e66:	682b      	ldr	r3, [r5, #0]
 8000e68:	05d9      	lsls	r1, r3, #23
 8000e6a:	d51b      	bpl.n	8000ea4 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e6c:	68a3      	ldr	r3, [r4, #8]
 8000e6e:	4d28      	ldr	r5, [pc, #160]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d127      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x224>
 8000e74:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fbf0 	bl	8000660 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e80:	4e23      	ldr	r6, [pc, #140]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8000e82:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e84:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e88:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000e8a:	079b      	lsls	r3, r3, #30
 8000e8c:	d539      	bpl.n	8000f02 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000e8e:	2f00      	cmp	r7, #0
 8000e90:	f43f af18 	beq.w	8000cc4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e94:	4a1e      	ldr	r2, [pc, #120]	; (8000f10 <HAL_RCC_OscConfig+0x270>)
 8000e96:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9e:	e711      	b.n	8000cc4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000ea0:	2700      	movs	r7, #0
 8000ea2:	e7df      	b.n	8000e64 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ea4:	682b      	ldr	r3, [r5, #0]
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eaa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000eac:	f7ff fbd8 	bl	8000660 <HAL_GetTick>
 8000eb0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb2:	682b      	ldr	r3, [r5, #0]
 8000eb4:	05da      	lsls	r2, r3, #23
 8000eb6:	d4d9      	bmi.n	8000e6c <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eb8:	f7ff fbd2 	bl	8000660 <HAL_GetTick>
 8000ebc:	1b80      	subs	r0, r0, r6
 8000ebe:	2802      	cmp	r0, #2
 8000ec0:	d9f7      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x212>
 8000ec2:	e730      	b.n	8000d26 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	d104      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x232>
 8000ec8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	672b      	str	r3, [r5, #112]	; 0x70
 8000ed0:	e7d0      	b.n	8000e74 <HAL_RCC_OscConfig+0x1d4>
 8000ed2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ed4:	f022 0201 	bic.w	r2, r2, #1
 8000ed8:	672a      	str	r2, [r5, #112]	; 0x70
 8000eda:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000edc:	f022 0204 	bic.w	r2, r2, #4
 8000ee0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1ca      	bne.n	8000e7c <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8000ee6:	f7ff fbbb 	bl	8000660 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eea:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000eee:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ef2:	0798      	lsls	r0, r3, #30
 8000ef4:	d5cb      	bpl.n	8000e8e <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ef6:	f7ff fbb3 	bl	8000660 <HAL_GetTick>
 8000efa:	1b80      	subs	r0, r0, r6
 8000efc:	4540      	cmp	r0, r8
 8000efe:	d9f7      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x250>
 8000f00:	e711      	b.n	8000d26 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f02:	f7ff fbad 	bl	8000660 <HAL_GetTick>
 8000f06:	1b40      	subs	r0, r0, r5
 8000f08:	4540      	cmp	r0, r8
 8000f0a:	d9bd      	bls.n	8000e88 <HAL_RCC_OscConfig+0x1e8>
 8000f0c:	e70b      	b.n	8000d26 <HAL_RCC_OscConfig+0x86>
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	42470000 	.word	0x42470000
 8000f18:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f1c:	4d36      	ldr	r5, [pc, #216]	; (8000ff8 <HAL_RCC_OscConfig+0x358>)
 8000f1e:	68ab      	ldr	r3, [r5, #8]
 8000f20:	f003 030c 	and.w	r3, r3, #12
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d03d      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f28:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <HAL_RCC_OscConfig+0x35c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000f2e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f30:	d12b      	bne.n	8000f8a <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8000f32:	f7ff fb95 	bl	8000660 <HAL_GetTick>
 8000f36:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f38:	682b      	ldr	r3, [r5, #0]
 8000f3a:	0199      	lsls	r1, r3, #6
 8000f3c:	d41f      	bmi.n	8000f7e <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f3e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f46:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000f4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f52:	0852      	lsrs	r2, r2, #1
 8000f54:	3a01      	subs	r2, #1
 8000f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f5a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f5c:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f5e:	4d26      	ldr	r5, [pc, #152]	; (8000ff8 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8000f60:	2201      	movs	r2, #1
 8000f62:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000f64:	f7ff fb7c 	bl	8000660 <HAL_GetTick>
 8000f68:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f6a:	682b      	ldr	r3, [r5, #0]
 8000f6c:	019a      	lsls	r2, r3, #6
 8000f6e:	f53f aead 	bmi.w	8000ccc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f72:	f7ff fb75 	bl	8000660 <HAL_GetTick>
 8000f76:	1b00      	subs	r0, r0, r4
 8000f78:	2802      	cmp	r0, #2
 8000f7a:	d9f6      	bls.n	8000f6a <HAL_RCC_OscConfig+0x2ca>
 8000f7c:	e6d3      	b.n	8000d26 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f7e:	f7ff fb6f 	bl	8000660 <HAL_GetTick>
 8000f82:	1b80      	subs	r0, r0, r6
 8000f84:	2802      	cmp	r0, #2
 8000f86:	d9d7      	bls.n	8000f38 <HAL_RCC_OscConfig+0x298>
 8000f88:	e6cd      	b.n	8000d26 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fb69 	bl	8000660 <HAL_GetTick>
 8000f8e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f90:	682b      	ldr	r3, [r5, #0]
 8000f92:	019b      	lsls	r3, r3, #6
 8000f94:	f57f ae9a 	bpl.w	8000ccc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f98:	f7ff fb62 	bl	8000660 <HAL_GetTick>
 8000f9c:	1b00      	subs	r0, r0, r4
 8000f9e:	2802      	cmp	r0, #2
 8000fa0:	d9f6      	bls.n	8000f90 <HAL_RCC_OscConfig+0x2f0>
 8000fa2:	e6c0      	b.n	8000d26 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fa4:	2801      	cmp	r0, #1
 8000fa6:	f43f aebf 	beq.w	8000d28 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8000faa:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fac:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fae:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fb2:	4291      	cmp	r1, r2
 8000fb4:	f47f aea1 	bne.w	8000cfa <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fb8:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fbe:	428a      	cmp	r2, r1
 8000fc0:	f47f ae9b 	bne.w	8000cfa <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fc6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000fca:	401a      	ands	r2, r3
 8000fcc:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000fd0:	f47f ae93 	bne.w	8000cfa <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fd4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fd6:	0852      	lsrs	r2, r2, #1
 8000fd8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000fdc:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fde:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000fe2:	f47f ae8a 	bne.w	8000cfa <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000fe6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000fe8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fec:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000ff0:	f43f ae6c 	beq.w	8000ccc <HAL_RCC_OscConfig+0x2c>
 8000ff4:	e681      	b.n	8000cfa <HAL_RCC_OscConfig+0x5a>
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	42470000 	.word	0x42470000

08001000 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001000:	4913      	ldr	r1, [pc, #76]	; (8001050 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001002:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001004:	688b      	ldr	r3, [r1, #8]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b04      	cmp	r3, #4
 800100c:	d01c      	beq.n	8001048 <HAL_RCC_GetSysClockFreq+0x48>
 800100e:	2b08      	cmp	r3, #8
 8001010:	d11c      	bne.n	800104c <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001012:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001014:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001016:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001018:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800101c:	bf14      	ite	ne
 800101e:	480d      	ldrne	r0, [pc, #52]	; (8001054 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001020:	480d      	ldreq	r0, [pc, #52]	; (8001058 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001022:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001026:	bf18      	it	ne
 8001028:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800102a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800102e:	fba1 0100 	umull	r0, r1, r1, r0
 8001032:	f7ff f8db 	bl	80001ec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_RCC_GetSysClockFreq+0x50>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800103e:	3301      	adds	r3, #1
 8001040:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001042:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001046:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <HAL_RCC_GetSysClockFreq+0x54>)
 800104a:	e7fc      	b.n	8001046 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800104e:	e7fa      	b.n	8001046 <HAL_RCC_GetSysClockFreq+0x46>
 8001050:	40023800 	.word	0x40023800
 8001054:	007a1200 	.word	0x007a1200
 8001058:	00f42400 	.word	0x00f42400

0800105c <HAL_RCC_ClockConfig>:
{
 800105c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001060:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001062:	4604      	mov	r4, r0
 8001064:	b910      	cbnz	r0, 800106c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001066:	2001      	movs	r0, #1
}
 8001068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800106c:	4b44      	ldr	r3, [pc, #272]	; (8001180 <HAL_RCC_ClockConfig+0x124>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	f002 020f 	and.w	r2, r2, #15
 8001074:	428a      	cmp	r2, r1
 8001076:	d328      	bcc.n	80010ca <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001078:	6822      	ldr	r2, [r4, #0]
 800107a:	0797      	lsls	r7, r2, #30
 800107c:	d42d      	bmi.n	80010da <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800107e:	07d0      	lsls	r0, r2, #31
 8001080:	d441      	bmi.n	8001106 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001082:	4b3f      	ldr	r3, [pc, #252]	; (8001180 <HAL_RCC_ClockConfig+0x124>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	f002 020f 	and.w	r2, r2, #15
 800108a:	42aa      	cmp	r2, r5
 800108c:	d866      	bhi.n	800115c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800108e:	6822      	ldr	r2, [r4, #0]
 8001090:	0751      	lsls	r1, r2, #29
 8001092:	d46c      	bmi.n	800116e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001094:	0713      	lsls	r3, r2, #28
 8001096:	d507      	bpl.n	80010a8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001098:	4a3a      	ldr	r2, [pc, #232]	; (8001184 <HAL_RCC_ClockConfig+0x128>)
 800109a:	6921      	ldr	r1, [r4, #16]
 800109c:	6893      	ldr	r3, [r2, #8]
 800109e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010a6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010a8:	f7ff ffaa 	bl	8001000 <HAL_RCC_GetSysClockFreq>
 80010ac:	4b35      	ldr	r3, [pc, #212]	; (8001184 <HAL_RCC_ClockConfig+0x128>)
 80010ae:	4a36      	ldr	r2, [pc, #216]	; (8001188 <HAL_RCC_ClockConfig+0x12c>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010b6:	5cd3      	ldrb	r3, [r2, r3]
 80010b8:	40d8      	lsrs	r0, r3
 80010ba:	4b34      	ldr	r3, [pc, #208]	; (800118c <HAL_RCC_ClockConfig+0x130>)
 80010bc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80010be:	4b34      	ldr	r3, [pc, #208]	; (8001190 <HAL_RCC_ClockConfig+0x134>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f7ff fa85 	bl	80005d0 <HAL_InitTick>
  return HAL_OK;
 80010c6:	2000      	movs	r0, #0
 80010c8:	e7ce      	b.n	8001068 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ca:	b2ca      	uxtb	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 030f 	and.w	r3, r3, #15
 80010d4:	428b      	cmp	r3, r1
 80010d6:	d1c6      	bne.n	8001066 <HAL_RCC_ClockConfig+0xa>
 80010d8:	e7ce      	b.n	8001078 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <HAL_RCC_ClockConfig+0x128>)
 80010dc:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e0:	bf1e      	ittt	ne
 80010e2:	6899      	ldrne	r1, [r3, #8]
 80010e4:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80010e8:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ea:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010ec:	bf42      	ittt	mi
 80010ee:	6899      	ldrmi	r1, [r3, #8]
 80010f0:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80010f4:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010f6:	4923      	ldr	r1, [pc, #140]	; (8001184 <HAL_RCC_ClockConfig+0x128>)
 80010f8:	68a0      	ldr	r0, [r4, #8]
 80010fa:	688b      	ldr	r3, [r1, #8]
 80010fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001100:	4303      	orrs	r3, r0
 8001102:	608b      	str	r3, [r1, #8]
 8001104:	e7bb      	b.n	800107e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001106:	6862      	ldr	r2, [r4, #4]
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <HAL_RCC_ClockConfig+0x128>)
 800110a:	2a01      	cmp	r2, #1
 800110c:	d11c      	bne.n	8001148 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001114:	d0a7      	beq.n	8001066 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001116:	4e1b      	ldr	r6, [pc, #108]	; (8001184 <HAL_RCC_ClockConfig+0x128>)
 8001118:	68b3      	ldr	r3, [r6, #8]
 800111a:	f023 0303 	bic.w	r3, r3, #3
 800111e:	4313      	orrs	r3, r2
 8001120:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001122:	f7ff fa9d 	bl	8000660 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001126:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800112a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800112c:	68b3      	ldr	r3, [r6, #8]
 800112e:	6862      	ldr	r2, [r4, #4]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001138:	d0a3      	beq.n	8001082 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800113a:	f7ff fa91 	bl	8000660 <HAL_GetTick>
 800113e:	1bc0      	subs	r0, r0, r7
 8001140:	4540      	cmp	r0, r8
 8001142:	d9f3      	bls.n	800112c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001144:	2003      	movs	r0, #3
 8001146:	e78f      	b.n	8001068 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001148:	1e91      	subs	r1, r2, #2
 800114a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800114c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800114e:	d802      	bhi.n	8001156 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001150:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001154:	e7de      	b.n	8001114 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	f013 0f02 	tst.w	r3, #2
 800115a:	e7db      	b.n	8001114 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115c:	b2ea      	uxtb	r2, r5
 800115e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	42ab      	cmp	r3, r5
 8001168:	f47f af7d 	bne.w	8001066 <HAL_RCC_ClockConfig+0xa>
 800116c:	e78f      	b.n	800108e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800116e:	4905      	ldr	r1, [pc, #20]	; (8001184 <HAL_RCC_ClockConfig+0x128>)
 8001170:	68e0      	ldr	r0, [r4, #12]
 8001172:	688b      	ldr	r3, [r1, #8]
 8001174:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001178:	4303      	orrs	r3, r0
 800117a:	608b      	str	r3, [r1, #8]
 800117c:	e78a      	b.n	8001094 <HAL_RCC_ClockConfig+0x38>
 800117e:	bf00      	nop
 8001180:	40023c00 	.word	0x40023c00
 8001184:	40023800 	.word	0x40023800
 8001188:	08001abe 	.word	0x08001abe
 800118c:	20000010 	.word	0x20000010
 8001190:	20000018 	.word	0x20000018

08001194 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001194:	6a03      	ldr	r3, [r0, #32]
 8001196:	f023 0301 	bic.w	r3, r3, #1
 800119a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800119c:	6a03      	ldr	r3, [r0, #32]
{
 800119e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80011a0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80011a2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80011a4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80011a6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80011aa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80011ac:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80011ae:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80011b2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80011b4:	4d0e      	ldr	r5, [pc, #56]	; (80011f0 <TIM_OC1_SetConfig+0x5c>)
 80011b6:	42a8      	cmp	r0, r5
 80011b8:	d002      	beq.n	80011c0 <TIM_OC1_SetConfig+0x2c>
 80011ba:	4e0e      	ldr	r6, [pc, #56]	; (80011f4 <TIM_OC1_SetConfig+0x60>)
 80011bc:	42b0      	cmp	r0, r6
 80011be:	d110      	bne.n	80011e2 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80011c0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80011c2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80011c6:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80011c8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80011ca:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80011ce:	d002      	beq.n	80011d6 <TIM_OC1_SetConfig+0x42>
 80011d0:	4d08      	ldr	r5, [pc, #32]	; (80011f4 <TIM_OC1_SetConfig+0x60>)
 80011d2:	42a8      	cmp	r0, r5
 80011d4:	d105      	bne.n	80011e2 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80011d6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80011da:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80011de:	4335      	orrs	r5, r6
 80011e0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011e2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80011e4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80011e6:	684a      	ldr	r2, [r1, #4]
 80011e8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011ea:	6203      	str	r3, [r0, #32]
}
 80011ec:	bd70      	pop	{r4, r5, r6, pc}
 80011ee:	bf00      	nop
 80011f0:	40010000 	.word	0x40010000
 80011f4:	40010400 	.word	0x40010400

080011f8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80011f8:	6a03      	ldr	r3, [r0, #32]
 80011fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011fe:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001200:	6a03      	ldr	r3, [r0, #32]
{
 8001202:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001204:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001206:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001208:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800120a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800120e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001210:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001212:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001216:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800121a:	4d11      	ldr	r5, [pc, #68]	; (8001260 <TIM_OC3_SetConfig+0x68>)
 800121c:	42a8      	cmp	r0, r5
 800121e:	d003      	beq.n	8001228 <TIM_OC3_SetConfig+0x30>
 8001220:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001224:	42a8      	cmp	r0, r5
 8001226:	d114      	bne.n	8001252 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001228:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800122a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800122e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001232:	4d0b      	ldr	r5, [pc, #44]	; (8001260 <TIM_OC3_SetConfig+0x68>)
 8001234:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001236:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800123a:	d003      	beq.n	8001244 <TIM_OC3_SetConfig+0x4c>
 800123c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001240:	42a8      	cmp	r0, r5
 8001242:	d106      	bne.n	8001252 <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001244:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001248:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800124c:	4335      	orrs	r5, r6
 800124e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001252:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001254:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001256:	684a      	ldr	r2, [r1, #4]
 8001258:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800125a:	6203      	str	r3, [r0, #32]
}
 800125c:	bd70      	pop	{r4, r5, r6, pc}
 800125e:	bf00      	nop
 8001260:	40010000 	.word	0x40010000

08001264 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001264:	6a03      	ldr	r3, [r0, #32]
 8001266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800126a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800126c:	6a03      	ldr	r3, [r0, #32]
{
 800126e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001270:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001272:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001274:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001276:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800127a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800127e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001280:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001284:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001288:	4d08      	ldr	r5, [pc, #32]	; (80012ac <TIM_OC4_SetConfig+0x48>)
 800128a:	42a8      	cmp	r0, r5
 800128c:	d003      	beq.n	8001296 <TIM_OC4_SetConfig+0x32>
 800128e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001292:	42a8      	cmp	r0, r5
 8001294:	d104      	bne.n	80012a0 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001296:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001298:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800129c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80012a0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80012a2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80012a4:	684a      	ldr	r2, [r1, #4]
 80012a6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80012a8:	6203      	str	r3, [r0, #32]
}
 80012aa:	bd30      	pop	{r4, r5, pc}
 80012ac:	40010000 	.word	0x40010000

080012b0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80012b0:	4770      	bx	lr

080012b2 <TIM_DMADelayPulseCplt>:
{
 80012b2:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012b4:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80012b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012b8:	4282      	cmp	r2, r0
 80012ba:	d10b      	bne.n	80012d4 <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012bc:	2301      	movs	r3, #1
 80012be:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80012c0:	69d2      	ldr	r2, [r2, #28]
 80012c2:	b90a      	cbnz	r2, 80012c8 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80012c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012c8:	4620      	mov	r0, r4
 80012ca:	f7ff fff1 	bl	80012b0 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ce:	2300      	movs	r3, #0
 80012d0:	7723      	strb	r3, [r4, #28]
}
 80012d2:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80012d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012d6:	4283      	cmp	r3, r0
 80012d8:	d108      	bne.n	80012ec <TIM_DMADelayPulseCplt+0x3a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012da:	2202      	movs	r2, #2
 80012dc:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80012de:	69db      	ldr	r3, [r3, #28]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f1      	bne.n	80012c8 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80012e4:	2301      	movs	r3, #1
 80012e6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80012ea:	e7ed      	b.n	80012c8 <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80012ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012ee:	4283      	cmp	r3, r0
 80012f0:	d108      	bne.n	8001304 <TIM_DMADelayPulseCplt+0x52>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012f2:	2204      	movs	r2, #4
 80012f4:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1e5      	bne.n	80012c8 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80012fc:	2301      	movs	r3, #1
 80012fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001302:	e7e1      	b.n	80012c8 <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8001304:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001306:	4283      	cmp	r3, r0
 8001308:	d1de      	bne.n	80012c8 <TIM_DMADelayPulseCplt+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800130a:	2208      	movs	r2, #8
 800130c:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1d9      	bne.n	80012c8 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001314:	2301      	movs	r3, #1
 8001316:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800131a:	e7d5      	b.n	80012c8 <TIM_DMADelayPulseCplt+0x16>

0800131c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 800131c:	4770      	bx	lr

0800131e <TIM_DMADelayPulseHalfCplt>:
{
 800131e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001320:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8001322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001324:	4283      	cmp	r3, r0
 8001326:	d107      	bne.n	8001338 <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001328:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800132a:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800132c:	4620      	mov	r0, r4
 800132e:	f7ff fff5 	bl	800131c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001332:	2300      	movs	r3, #0
 8001334:	7723      	strb	r3, [r4, #28]
}
 8001336:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8001338:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800133a:	4283      	cmp	r3, r0
 800133c:	d101      	bne.n	8001342 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800133e:	2302      	movs	r3, #2
 8001340:	e7f3      	b.n	800132a <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8001342:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001344:	4283      	cmp	r3, r0
 8001346:	d101      	bne.n	800134c <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001348:	2304      	movs	r3, #4
 800134a:	e7ee      	b.n	800132a <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800134c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800134e:	4283      	cmp	r3, r0
 8001350:	d1ec      	bne.n	800132c <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001352:	2308      	movs	r3, #8
 8001354:	e7e9      	b.n	800132a <TIM_DMADelayPulseHalfCplt+0xc>

08001356 <HAL_TIM_ErrorCallback>:
 8001356:	4770      	bx	lr

08001358 <TIM_DMAError>:
{
 8001358:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800135a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800135c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800135e:	4283      	cmp	r3, r0
 8001360:	d109      	bne.n	8001376 <TIM_DMAError+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001362:	2301      	movs	r3, #1
 8001364:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001366:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 800136a:	4620      	mov	r0, r4
 800136c:	f7ff fff3 	bl	8001356 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001370:	2300      	movs	r3, #0
 8001372:	7723      	strb	r3, [r4, #28]
}
 8001374:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8001376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001378:	4283      	cmp	r3, r0
 800137a:	d105      	bne.n	8001388 <TIM_DMAError+0x30>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800137c:	2302      	movs	r3, #2
 800137e:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001380:	2301      	movs	r3, #1
 8001382:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001386:	e7f0      	b.n	800136a <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8001388:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800138a:	4283      	cmp	r3, r0
 800138c:	f04f 0301 	mov.w	r3, #1
 8001390:	d104      	bne.n	800139c <TIM_DMAError+0x44>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001392:	2204      	movs	r2, #4
 8001394:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001396:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800139a:	e7e6      	b.n	800136a <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800139c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800139e:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013a0:	bf03      	ittte	eq
 80013a2:	2208      	moveq	r2, #8
 80013a4:	7722      	strbeq	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80013a6:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
    htim->State = HAL_TIM_STATE_READY;
 80013aa:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 80013ae:	e7dc      	b.n	800136a <TIM_DMAError+0x12>

080013b0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013b0:	4a30      	ldr	r2, [pc, #192]	; (8001474 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80013b2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013b4:	4290      	cmp	r0, r2
 80013b6:	d012      	beq.n	80013de <TIM_Base_SetConfig+0x2e>
 80013b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80013bc:	d00f      	beq.n	80013de <TIM_Base_SetConfig+0x2e>
 80013be:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80013c2:	4290      	cmp	r0, r2
 80013c4:	d00b      	beq.n	80013de <TIM_Base_SetConfig+0x2e>
 80013c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013ca:	4290      	cmp	r0, r2
 80013cc:	d007      	beq.n	80013de <TIM_Base_SetConfig+0x2e>
 80013ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013d2:	4290      	cmp	r0, r2
 80013d4:	d003      	beq.n	80013de <TIM_Base_SetConfig+0x2e>
 80013d6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80013da:	4290      	cmp	r0, r2
 80013dc:	d119      	bne.n	8001412 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80013de:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80013e4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013e6:	4a23      	ldr	r2, [pc, #140]	; (8001474 <TIM_Base_SetConfig+0xc4>)
 80013e8:	4290      	cmp	r0, r2
 80013ea:	d029      	beq.n	8001440 <TIM_Base_SetConfig+0x90>
 80013ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80013f0:	d026      	beq.n	8001440 <TIM_Base_SetConfig+0x90>
 80013f2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80013f6:	4290      	cmp	r0, r2
 80013f8:	d022      	beq.n	8001440 <TIM_Base_SetConfig+0x90>
 80013fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013fe:	4290      	cmp	r0, r2
 8001400:	d01e      	beq.n	8001440 <TIM_Base_SetConfig+0x90>
 8001402:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001406:	4290      	cmp	r0, r2
 8001408:	d01a      	beq.n	8001440 <TIM_Base_SetConfig+0x90>
 800140a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800140e:	4290      	cmp	r0, r2
 8001410:	d016      	beq.n	8001440 <TIM_Base_SetConfig+0x90>
 8001412:	4a19      	ldr	r2, [pc, #100]	; (8001478 <TIM_Base_SetConfig+0xc8>)
 8001414:	4290      	cmp	r0, r2
 8001416:	d013      	beq.n	8001440 <TIM_Base_SetConfig+0x90>
 8001418:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800141c:	4290      	cmp	r0, r2
 800141e:	d00f      	beq.n	8001440 <TIM_Base_SetConfig+0x90>
 8001420:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001424:	4290      	cmp	r0, r2
 8001426:	d00b      	beq.n	8001440 <TIM_Base_SetConfig+0x90>
 8001428:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800142c:	4290      	cmp	r0, r2
 800142e:	d007      	beq.n	8001440 <TIM_Base_SetConfig+0x90>
 8001430:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001434:	4290      	cmp	r0, r2
 8001436:	d003      	beq.n	8001440 <TIM_Base_SetConfig+0x90>
 8001438:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800143c:	4290      	cmp	r0, r2
 800143e:	d103      	bne.n	8001448 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001440:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001446:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001448:	694a      	ldr	r2, [r1, #20]
 800144a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800144e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001450:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001452:	688b      	ldr	r3, [r1, #8]
 8001454:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001456:	680b      	ldr	r3, [r1, #0]
 8001458:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <TIM_Base_SetConfig+0xc4>)
 800145c:	4298      	cmp	r0, r3
 800145e:	d003      	beq.n	8001468 <TIM_Base_SetConfig+0xb8>
 8001460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001464:	4298      	cmp	r0, r3
 8001466:	d101      	bne.n	800146c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8001468:	690b      	ldr	r3, [r1, #16]
 800146a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800146c:	2301      	movs	r3, #1
 800146e:	6143      	str	r3, [r0, #20]
}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40010000 	.word	0x40010000
 8001478:	40014000 	.word	0x40014000

0800147c <HAL_TIM_PWM_Init>:
{
 800147c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800147e:	4604      	mov	r4, r0
 8001480:	b330      	cbz	r0, 80014d0 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001482:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001486:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800148a:	b91b      	cbnz	r3, 8001494 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800148c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001490:	f000 fa6e 	bl	8001970 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001494:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001496:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001498:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800149c:	1d21      	adds	r1, r4, #4
 800149e:	f7ff ff87 	bl	80013b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014a2:	2301      	movs	r3, #1
 80014a4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 80014a8:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80014ae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80014b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80014b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80014be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80014c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80014ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80014ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014d0:	2001      	movs	r0, #1
 80014d2:	e7fc      	b.n	80014ce <HAL_TIM_PWM_Init+0x52>

080014d4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014d4:	6a03      	ldr	r3, [r0, #32]
 80014d6:	f023 0310 	bic.w	r3, r3, #16
 80014da:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80014dc:	6a03      	ldr	r3, [r0, #32]
{
 80014de:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 80014e0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80014e2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80014e4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80014e6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80014ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80014ee:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80014f0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80014f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80014f8:	4d10      	ldr	r5, [pc, #64]	; (800153c <TIM_OC2_SetConfig+0x68>)
 80014fa:	42a8      	cmp	r0, r5
 80014fc:	d003      	beq.n	8001506 <TIM_OC2_SetConfig+0x32>
 80014fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001502:	42a8      	cmp	r0, r5
 8001504:	d114      	bne.n	8001530 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001506:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800150c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001510:	4d0a      	ldr	r5, [pc, #40]	; (800153c <TIM_OC2_SetConfig+0x68>)
 8001512:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001518:	d003      	beq.n	8001522 <TIM_OC2_SetConfig+0x4e>
 800151a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800151e:	42a8      	cmp	r0, r5
 8001520:	d106      	bne.n	8001530 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001522:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001526:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800152a:	4335      	orrs	r5, r6
 800152c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001530:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001532:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001534:	684a      	ldr	r2, [r1, #4]
 8001536:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001538:	6203      	str	r3, [r0, #32]
}
 800153a:	bd70      	pop	{r4, r5, r6, pc}
 800153c:	40010000 	.word	0x40010000

08001540 <HAL_TIM_PWM_ConfigChannel>:
{
 8001540:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001542:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001546:	2b01      	cmp	r3, #1
{
 8001548:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 800154a:	d053      	beq.n	80015f4 <HAL_TIM_PWM_ConfigChannel+0xb4>
 800154c:	2001      	movs	r0, #1
  switch (Channel)
 800154e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8001550:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 8001554:	d03d      	beq.n	80015d2 <HAL_TIM_PWM_ConfigChannel+0x92>
 8001556:	d806      	bhi.n	8001566 <HAL_TIM_PWM_ConfigChannel+0x26>
 8001558:	b1c2      	cbz	r2, 800158c <HAL_TIM_PWM_ConfigChannel+0x4c>
 800155a:	2a04      	cmp	r2, #4
 800155c:	d028      	beq.n	80015b0 <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_UNLOCK(htim);
 800155e:	2300      	movs	r3, #0
 8001560:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8001564:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8001566:	2a0c      	cmp	r2, #12
 8001568:	d1f9      	bne.n	800155e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800156a:	6828      	ldr	r0, [r5, #0]
 800156c:	f7ff fe7a 	bl	8001264 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001570:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001572:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001574:	69da      	ldr	r2, [r3, #28]
 8001576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800157a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800157c:	69da      	ldr	r2, [r3, #28]
 800157e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001582:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001584:	69da      	ldr	r2, [r3, #28]
 8001586:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800158a:	e031      	b.n	80015f0 <HAL_TIM_PWM_ConfigChannel+0xb0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800158c:	6828      	ldr	r0, [r5, #0]
 800158e:	f7ff fe01 	bl	8001194 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001592:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001594:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001596:	699a      	ldr	r2, [r3, #24]
 8001598:	f042 0208 	orr.w	r2, r2, #8
 800159c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800159e:	699a      	ldr	r2, [r3, #24]
 80015a0:	f022 0204 	bic.w	r2, r2, #4
 80015a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80015a6:	699a      	ldr	r2, [r3, #24]
 80015a8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80015aa:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80015ac:	2000      	movs	r0, #0
      break;
 80015ae:	e7d6      	b.n	800155e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80015b0:	6828      	ldr	r0, [r5, #0]
 80015b2:	f7ff ff8f 	bl	80014d4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80015b6:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80015b8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80015ba:	699a      	ldr	r2, [r3, #24]
 80015bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015c0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80015c2:	699a      	ldr	r2, [r3, #24]
 80015c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80015ca:	699a      	ldr	r2, [r3, #24]
 80015cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80015d0:	e7eb      	b.n	80015aa <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80015d2:	6828      	ldr	r0, [r5, #0]
 80015d4:	f7ff fe10 	bl	80011f8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80015d8:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80015da:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80015dc:	69da      	ldr	r2, [r3, #28]
 80015de:	f042 0208 	orr.w	r2, r2, #8
 80015e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80015e4:	69da      	ldr	r2, [r3, #28]
 80015e6:	f022 0204 	bic.w	r2, r2, #4
 80015ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80015ec:	69da      	ldr	r2, [r3, #28]
 80015ee:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80015f0:	61da      	str	r2, [r3, #28]
 80015f2:	e7db      	b.n	80015ac <HAL_TIM_PWM_ConfigChannel+0x6c>
  __HAL_LOCK(htim);
 80015f4:	2002      	movs	r0, #2
 80015f6:	e7b5      	b.n	8001564 <HAL_TIM_PWM_ConfigChannel+0x24>

080015f8 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80015f8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80015fa:	f001 011f 	and.w	r1, r1, #31
{
 80015fe:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001600:	2401      	movs	r4, #1
 8001602:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001604:	ea23 0304 	bic.w	r3, r3, r4
 8001608:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800160a:	6a03      	ldr	r3, [r0, #32]
 800160c:	408a      	lsls	r2, r1
 800160e:	431a      	orrs	r2, r3
 8001610:	6202      	str	r2, [r0, #32]
}
 8001612:	bd10      	pop	{r4, pc}

08001614 <HAL_TIM_OC_Start_DMA>:
{
 8001614:	b538      	push	{r3, r4, r5, lr}
 8001616:	460d      	mov	r5, r1
 8001618:	4604      	mov	r4, r0
 800161a:	4611      	mov	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800161c:	b955      	cbnz	r5, 8001634 <HAL_TIM_OC_Start_DMA+0x20>
 800161e:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8001622:	f1a0 0c02 	sub.w	ip, r0, #2
 8001626:	f1dc 0000 	rsbs	r0, ip, #0
 800162a:	eb40 000c 	adc.w	r0, r0, ip
 800162e:	b170      	cbz	r0, 800164e <HAL_TIM_OC_Start_DMA+0x3a>
    return HAL_BUSY;
 8001630:	2002      	movs	r0, #2
 8001632:	e04f      	b.n	80016d4 <HAL_TIM_OC_Start_DMA+0xc0>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8001634:	2d04      	cmp	r5, #4
 8001636:	d102      	bne.n	800163e <HAL_TIM_OC_Start_DMA+0x2a>
 8001638:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 800163c:	e7f1      	b.n	8001622 <HAL_TIM_OC_Start_DMA+0xe>
 800163e:	2d08      	cmp	r5, #8
 8001640:	d102      	bne.n	8001648 <HAL_TIM_OC_Start_DMA+0x34>
 8001642:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8001646:	e7ec      	b.n	8001622 <HAL_TIM_OC_Start_DMA+0xe>
 8001648:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 800164c:	e7e9      	b.n	8001622 <HAL_TIM_OC_Start_DMA+0xe>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800164e:	b93d      	cbnz	r5, 8001660 <HAL_TIM_OC_Start_DMA+0x4c>
 8001650:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001654:	1e50      	subs	r0, r2, #1
 8001656:	4242      	negs	r2, r0
 8001658:	4142      	adcs	r2, r0
 800165a:	b962      	cbnz	r2, 8001676 <HAL_TIM_OC_Start_DMA+0x62>
  switch (Channel)
 800165c:	2001      	movs	r0, #1
 800165e:	e039      	b.n	80016d4 <HAL_TIM_OC_Start_DMA+0xc0>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8001660:	2d04      	cmp	r5, #4
 8001662:	d102      	bne.n	800166a <HAL_TIM_OC_Start_DMA+0x56>
 8001664:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 8001668:	e7f4      	b.n	8001654 <HAL_TIM_OC_Start_DMA+0x40>
 800166a:	2d08      	cmp	r5, #8
 800166c:	d133      	bne.n	80016d6 <HAL_TIM_OC_Start_DMA+0xc2>
 800166e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8001672:	2a01      	cmp	r2, #1
 8001674:	d1f2      	bne.n	800165c <HAL_TIM_OC_Start_DMA+0x48>
    if ((pData == NULL) && (Length > 0U))
 8001676:	b909      	cbnz	r1, 800167c <HAL_TIM_OC_Start_DMA+0x68>
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1ef      	bne.n	800165c <HAL_TIM_OC_Start_DMA+0x48>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800167c:	2202      	movs	r2, #2
 800167e:	2d00      	cmp	r5, #0
 8001680:	d13e      	bne.n	8001700 <HAL_TIM_OC_Start_DMA+0xec>
 8001682:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001686:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001688:	4a4e      	ldr	r2, [pc, #312]	; (80017c4 <HAL_TIM_OC_Start_DMA+0x1b0>)
 800168a:	63c2      	str	r2, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800168c:	4a4e      	ldr	r2, [pc, #312]	; (80017c8 <HAL_TIM_OC_Start_DMA+0x1b4>)
 800168e:	6402      	str	r2, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8001690:	4a4e      	ldr	r2, [pc, #312]	; (80017cc <HAL_TIM_OC_Start_DMA+0x1b8>)
 8001692:	64c2      	str	r2, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8001694:	6822      	ldr	r2, [r4, #0]
 8001696:	3234      	adds	r2, #52	; 0x34
 8001698:	f7ff f8e4 	bl	8000864 <HAL_DMA_Start_IT>
 800169c:	2800      	cmp	r0, #0
 800169e:	d1dd      	bne.n	800165c <HAL_TIM_OC_Start_DMA+0x48>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80016a0:	6822      	ldr	r2, [r4, #0]
 80016a2:	68d3      	ldr	r3, [r2, #12]
 80016a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80016a8:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80016aa:	4629      	mov	r1, r5
 80016ac:	6820      	ldr	r0, [r4, #0]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f7ff ffa2 	bl	80015f8 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80016b4:	6823      	ldr	r3, [r4, #0]
 80016b6:	4946      	ldr	r1, [pc, #280]	; (80017d0 <HAL_TIM_OC_Start_DMA+0x1bc>)
 80016b8:	428b      	cmp	r3, r1
 80016ba:	d060      	beq.n	800177e <HAL_TIM_OC_Start_DMA+0x16a>
 80016bc:	4a45      	ldr	r2, [pc, #276]	; (80017d4 <HAL_TIM_OC_Start_DMA+0x1c0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d05d      	beq.n	800177e <HAL_TIM_OC_Start_DMA+0x16a>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c6:	d161      	bne.n	800178c <HAL_TIM_OC_Start_DMA+0x178>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ce:	2a06      	cmp	r2, #6
 80016d0:	d173      	bne.n	80017ba <HAL_TIM_OC_Start_DMA+0x1a6>
      __HAL_TIM_ENABLE(htim);
 80016d2:	2000      	movs	r0, #0
}
 80016d4:	bd38      	pop	{r3, r4, r5, pc}
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80016d6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80016da:	2a01      	cmp	r2, #1
 80016dc:	d1be      	bne.n	800165c <HAL_TIM_OC_Start_DMA+0x48>
    if ((pData == NULL) && (Length > 0U))
 80016de:	b909      	cbnz	r1, 80016e4 <HAL_TIM_OC_Start_DMA+0xd0>
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1bb      	bne.n	800165c <HAL_TIM_OC_Start_DMA+0x48>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80016e4:	2202      	movs	r2, #2
  switch (Channel)
 80016e6:	2d0c      	cmp	r5, #12
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80016e8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  switch (Channel)
 80016ec:	d034      	beq.n	8001758 <HAL_TIM_OC_Start_DMA+0x144>
 80016ee:	d8b5      	bhi.n	800165c <HAL_TIM_OC_Start_DMA+0x48>
 80016f0:	2d08      	cmp	r5, #8
 80016f2:	d01f      	beq.n	8001734 <HAL_TIM_OC_Start_DMA+0x120>
 80016f4:	d8b2      	bhi.n	800165c <HAL_TIM_OC_Start_DMA+0x48>
 80016f6:	2d00      	cmp	r5, #0
 80016f8:	d0c5      	beq.n	8001686 <HAL_TIM_OC_Start_DMA+0x72>
 80016fa:	2d04      	cmp	r5, #4
 80016fc:	d1ae      	bne.n	800165c <HAL_TIM_OC_Start_DMA+0x48>
 80016fe:	e003      	b.n	8001708 <HAL_TIM_OC_Start_DMA+0xf4>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001700:	2d04      	cmp	r5, #4
 8001702:	d113      	bne.n	800172c <HAL_TIM_OC_Start_DMA+0x118>
 8001704:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001708:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800170a:	4a2e      	ldr	r2, [pc, #184]	; (80017c4 <HAL_TIM_OC_Start_DMA+0x1b0>)
 800170c:	63c2      	str	r2, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800170e:	4a2e      	ldr	r2, [pc, #184]	; (80017c8 <HAL_TIM_OC_Start_DMA+0x1b4>)
 8001710:	6402      	str	r2, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001712:	4a2e      	ldr	r2, [pc, #184]	; (80017cc <HAL_TIM_OC_Start_DMA+0x1b8>)
 8001714:	64c2      	str	r2, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8001716:	6822      	ldr	r2, [r4, #0]
 8001718:	3238      	adds	r2, #56	; 0x38
 800171a:	f7ff f8a3 	bl	8000864 <HAL_DMA_Start_IT>
 800171e:	2800      	cmp	r0, #0
 8001720:	d19c      	bne.n	800165c <HAL_TIM_OC_Start_DMA+0x48>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001722:	6822      	ldr	r2, [r4, #0]
 8001724:	68d3      	ldr	r3, [r2, #12]
 8001726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800172a:	e7bd      	b.n	80016a8 <HAL_TIM_OC_Start_DMA+0x94>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800172c:	2d08      	cmp	r5, #8
 800172e:	d1d9      	bne.n	80016e4 <HAL_TIM_OC_Start_DMA+0xd0>
 8001730:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001734:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001736:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <HAL_TIM_OC_Start_DMA+0x1b0>)
 8001738:	63c2      	str	r2, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800173a:	4a23      	ldr	r2, [pc, #140]	; (80017c8 <HAL_TIM_OC_Start_DMA+0x1b4>)
 800173c:	6402      	str	r2, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800173e:	4a23      	ldr	r2, [pc, #140]	; (80017cc <HAL_TIM_OC_Start_DMA+0x1b8>)
 8001740:	64c2      	str	r2, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8001742:	6822      	ldr	r2, [r4, #0]
 8001744:	323c      	adds	r2, #60	; 0x3c
 8001746:	f7ff f88d 	bl	8000864 <HAL_DMA_Start_IT>
 800174a:	2800      	cmp	r0, #0
 800174c:	d186      	bne.n	800165c <HAL_TIM_OC_Start_DMA+0x48>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800174e:	6822      	ldr	r2, [r4, #0]
 8001750:	68d3      	ldr	r3, [r2, #12]
 8001752:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001756:	e7a7      	b.n	80016a8 <HAL_TIM_OC_Start_DMA+0x94>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8001758:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800175a:	4a1a      	ldr	r2, [pc, #104]	; (80017c4 <HAL_TIM_OC_Start_DMA+0x1b0>)
 800175c:	63c2      	str	r2, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800175e:	4a1a      	ldr	r2, [pc, #104]	; (80017c8 <HAL_TIM_OC_Start_DMA+0x1b4>)
 8001760:	6402      	str	r2, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8001762:	4a1a      	ldr	r2, [pc, #104]	; (80017cc <HAL_TIM_OC_Start_DMA+0x1b8>)
 8001764:	64c2      	str	r2, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8001766:	6822      	ldr	r2, [r4, #0]
 8001768:	3240      	adds	r2, #64	; 0x40
 800176a:	f7ff f87b 	bl	8000864 <HAL_DMA_Start_IT>
 800176e:	2800      	cmp	r0, #0
 8001770:	f47f af74 	bne.w	800165c <HAL_TIM_OC_Start_DMA+0x48>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001774:	6822      	ldr	r2, [r4, #0]
 8001776:	68d3      	ldr	r3, [r2, #12]
 8001778:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800177c:	e794      	b.n	80016a8 <HAL_TIM_OC_Start_DMA+0x94>
      __HAL_TIM_MOE_ENABLE(htim);
 800177e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001780:	428b      	cmp	r3, r1
      __HAL_TIM_MOE_ENABLE(htim);
 8001782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001786:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001788:	d09e      	beq.n	80016c8 <HAL_TIM_OC_Start_DMA+0xb4>
 800178a:	e79a      	b.n	80016c2 <HAL_TIM_OC_Start_DMA+0xae>
 800178c:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <HAL_TIM_OC_Start_DMA+0x1c4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d09a      	beq.n	80016c8 <HAL_TIM_OC_Start_DMA+0xb4>
 8001792:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001796:	4293      	cmp	r3, r2
 8001798:	d096      	beq.n	80016c8 <HAL_TIM_OC_Start_DMA+0xb4>
 800179a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800179e:	4293      	cmp	r3, r2
 80017a0:	d092      	beq.n	80016c8 <HAL_TIM_OC_Start_DMA+0xb4>
 80017a2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d08e      	beq.n	80016c8 <HAL_TIM_OC_Start_DMA+0xb4>
 80017aa:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d08a      	beq.n	80016c8 <HAL_TIM_OC_Start_DMA+0xb4>
 80017b2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d086      	beq.n	80016c8 <HAL_TIM_OC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE(htim);
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	f042 0201 	orr.w	r2, r2, #1
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e786      	b.n	80016d2 <HAL_TIM_OC_Start_DMA+0xbe>
 80017c4:	080012b3 	.word	0x080012b3
 80017c8:	0800131f 	.word	0x0800131f
 80017cc:	08001359 	.word	0x08001359
 80017d0:	40010000 	.word	0x40010000
 80017d4:	40010400 	.word	0x40010400
 80017d8:	40000400 	.word	0x40000400

080017dc <HAL_TIM_PWM_Start_DMA>:
 80017dc:	f7ff bf1a 	b.w	8001614 <HAL_TIM_OC_Start_DMA>

080017e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001818 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017e6:	e003      	b.n	80017f0 <LoopCopyDataInit>

080017e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017ee:	3104      	adds	r1, #4

080017f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017f0:	480b      	ldr	r0, [pc, #44]	; (8001820 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017f8:	d3f6      	bcc.n	80017e8 <CopyDataInit>
  ldr  r2, =_sbss
 80017fa:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017fc:	e002      	b.n	8001804 <LoopFillZerobss>

080017fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001800:	f842 3b04 	str.w	r3, [r2], #4

08001804 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001806:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001808:	d3f9      	bcc.n	80017fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800180a:	f7fe feb9 	bl	8000580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180e:	f000 f921 	bl	8001a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001812:	f000 f80f 	bl	8001834 <main>
  bx  lr    
 8001816:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001818:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800181c:	08001af0 	.word	0x08001af0
  ldr  r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001824:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8001828:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 800182c:	20000110 	.word	0x20000110

08001830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC_IRQHandler>
	...

08001834 <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b094      	sub	sp, #80	; 0x50
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8001838:	f7fe feec 	bl	8000614 <HAL_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800183c:	2600      	movs	r6, #0
 800183e:	4b47      	ldr	r3, [pc, #284]	; (800195c <main+0x128>)
 8001840:	9601      	str	r6, [sp, #4]
 8001842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimerPeriod = (uint32_t)(((SystemCoreClock/2) / 17570) - 1);
 8001844:	4c46      	ldr	r4, [pc, #280]	; (8001960 <main+0x12c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800184a:	641a      	str	r2, [r3, #64]	; 0x40
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	9b01      	ldr	r3, [sp, #4]

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001856:	4b43      	ldr	r3, [pc, #268]	; (8001964 <main+0x130>)
 8001858:	9602      	str	r6, [sp, #8]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001868:	9302      	str	r3, [sp, #8]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800186a:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800186c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800186e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001872:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001876:	2502      	movs	r5, #2
 8001878:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800187c:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001880:	2708      	movs	r7, #8
 8001882:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001886:	e9cd 7310 	strd	r7, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800188a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800188c:	2307      	movs	r3, #7
 800188e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001890:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001892:	f7ff fa05 	bl	8000ca0 <HAL_RCC_OscConfig>

  /* Activate the Over-Drive mode */
  HAL_PWREx_EnableOverDrive();
 8001896:	f7ff f9c9 	bl	8000c2c <HAL_PWREx_EnableOverDrive>
    
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800189a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800189c:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80018a0:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80018a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a8:	e9cd 1306 	strd	r1, r3, [sp, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80018ac:	a803      	add	r0, sp, #12
 80018ae:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b0:	9605      	str	r6, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80018b2:	f7ff fbd3 	bl	800105c <HAL_RCC_ClockConfig>
  BSP_LED_Init(LED3);
 80018b6:	4628      	mov	r0, r5
 80018b8:	f7fe fe1a 	bl	80004f0 <BSP_LED_Init>
  uwTimerPeriod = (uint32_t)(((SystemCoreClock/2) / 17570) - 1);
 80018bc:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <main+0x134>)
  TimHandle.Init.Prescaler         = 0;
 80018be:	6166      	str	r6, [r4, #20]
  uwTimerPeriod = (uint32_t)(((SystemCoreClock/2) / 17570) - 1);
 80018c0:	f648 1244 	movw	r2, #35140	; 0x8944
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	fbb3 f3f2 	udiv	r3, r3, r2
  aCCValue_Buffer[0] = (uint32_t)(((uint32_t) 75 * (uwTimerPeriod - 1)) / 100);
 80018ca:	214b      	movs	r1, #75	; 0x4b
  uwTimerPeriod = (uint32_t)(((SystemCoreClock/2) / 17570) - 1);
 80018cc:	3b01      	subs	r3, #1
  aCCValue_Buffer[0] = (uint32_t)(((uint32_t) 75 * (uwTimerPeriod - 1)) / 100);
 80018ce:	4359      	muls	r1, r3
 80018d0:	2064      	movs	r0, #100	; 0x64
 80018d2:	394b      	subs	r1, #75	; 0x4b
  aCCValue_Buffer[2] = (uint32_t)(((uint32_t) 25 * (uwTimerPeriod - 1)) / 100);
 80018d4:	2219      	movs	r2, #25
  aCCValue_Buffer[0] = (uint32_t)(((uint32_t) 75 * (uwTimerPeriod - 1)) / 100);
 80018d6:	fbb1 f1f0 	udiv	r1, r1, r0
  TimHandle.Init.RepetitionCounter = 3;
 80018da:	f04f 0803 	mov.w	r8, #3
  aCCValue_Buffer[0] = (uint32_t)(((uint32_t) 75 * (uwTimerPeriod - 1)) / 100);
 80018de:	6061      	str	r1, [r4, #4]
  aCCValue_Buffer[1] = (uint32_t)(((uint32_t) 50 * (uwTimerPeriod - 1)) / 100);
 80018e0:	2132      	movs	r1, #50	; 0x32
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e2:	e9c4 8609 	strd	r8, r6, [r4, #36]	; 0x24
  aCCValue_Buffer[1] = (uint32_t)(((uint32_t) 50 * (uwTimerPeriod - 1)) / 100);
 80018e6:	4359      	muls	r1, r3
  aCCValue_Buffer[2] = (uint32_t)(((uint32_t) 25 * (uwTimerPeriod - 1)) / 100);
 80018e8:	435a      	muls	r2, r3
  TimHandle.Init.ClockDivision     = 0;
 80018ea:	6226      	str	r6, [r4, #32]
  TimHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80018ec:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_PWM_Init(&TimHandle) != HAL_OK)
 80018ee:	f104 0610 	add.w	r6, r4, #16
  aCCValue_Buffer[1] = (uint32_t)(((uint32_t) 50 * (uwTimerPeriod - 1)) / 100);
 80018f2:	3932      	subs	r1, #50	; 0x32
  aCCValue_Buffer[2] = (uint32_t)(((uint32_t) 25 * (uwTimerPeriod - 1)) / 100);
 80018f4:	3a19      	subs	r2, #25
  aCCValue_Buffer[1] = (uint32_t)(((uint32_t) 50 * (uwTimerPeriod - 1)) / 100);
 80018f6:	fbb1 f1f0 	udiv	r1, r1, r0
  aCCValue_Buffer[2] = (uint32_t)(((uint32_t) 25 * (uwTimerPeriod - 1)) / 100);
 80018fa:	fbb2 f2f0 	udiv	r2, r2, r0
  if (HAL_TIM_PWM_Init(&TimHandle) != HAL_OK)
 80018fe:	4630      	mov	r0, r6
  aCCValue_Buffer[2] = (uint32_t)(((uint32_t) 25 * (uwTimerPeriod - 1)) / 100);
 8001900:	60e2      	str	r2, [r4, #12]
  TimHandle.Instance = TIMx;
 8001902:	4a1a      	ldr	r2, [pc, #104]	; (800196c <main+0x138>)
  uwTimerPeriod = (uint32_t)(((SystemCoreClock/2) / 17570) - 1);
 8001904:	6023      	str	r3, [r4, #0]
  aCCValue_Buffer[1] = (uint32_t)(((uint32_t) 50 * (uwTimerPeriod - 1)) / 100);
 8001906:	60a1      	str	r1, [r4, #8]
  TimHandle.Instance = TIMx;
 8001908:	6122      	str	r2, [r4, #16]
  TimHandle.Init.Period            = uwTimerPeriod;
 800190a:	61e3      	str	r3, [r4, #28]
  if (HAL_TIM_PWM_Init(&TimHandle) != HAL_OK)
 800190c:	f7ff fdb6 	bl	800147c <HAL_TIM_PWM_Init>
 8001910:	b118      	cbz	r0, 800191a <main+0xe6>
  BSP_LED_On(LED3);
 8001912:	4628      	mov	r0, r5
 8001914:	f7fe fe26 	bl	8000564 <BSP_LED_On>
  while (1)
 8001918:	e7fe      	b.n	8001918 <main+0xe4>
  sConfig.OCMode       = TIM_OCMODE_PWM1;
 800191a:	2360      	movs	r3, #96	; 0x60
  sConfig.OCFastMode   = TIM_OCFAST_DISABLE;
 800191c:	e9c4 0019 	strd	r0, r0, [r4, #100]	; 0x64
  sConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001920:	e9c4 001b 	strd	r0, r0, [r4, #108]	; 0x6c
  sConfig.OCMode       = TIM_OCMODE_PWM1;
 8001924:	65a3      	str	r3, [r4, #88]	; 0x58
  sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8001926:	6620      	str	r0, [r4, #96]	; 0x60
  sConfig.Pulse        = aCCValue_Buffer[0];
 8001928:	6863      	ldr	r3, [r4, #4]
 800192a:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfig, TIM_CHANNEL_3) != HAL_OK)
 800192c:	463a      	mov	r2, r7
 800192e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8001932:	4630      	mov	r0, r6
 8001934:	f7ff fe04 	bl	8001540 <HAL_TIM_PWM_ConfigChannel>
 8001938:	b118      	cbz	r0, 8001942 <main+0x10e>
  BSP_LED_On(LED3);
 800193a:	4628      	mov	r0, r5
 800193c:	f7fe fe12 	bl	8000564 <BSP_LED_On>
  while (1)
 8001940:	e7fe      	b.n	8001940 <main+0x10c>
  if (HAL_TIM_PWM_Start_DMA(&TimHandle, TIM_CHANNEL_3, aCCValue_Buffer, 3) != HAL_OK)
 8001942:	4643      	mov	r3, r8
 8001944:	1d22      	adds	r2, r4, #4
 8001946:	4639      	mov	r1, r7
 8001948:	4630      	mov	r0, r6
 800194a:	f7ff ff47 	bl	80017dc <HAL_TIM_PWM_Start_DMA>
 800194e:	b118      	cbz	r0, 8001958 <main+0x124>
  BSP_LED_On(LED3);
 8001950:	4628      	mov	r0, r5
 8001952:	f7fe fe07 	bl	8000564 <BSP_LED_On>
  while (1)
 8001956:	e7fe      	b.n	8001956 <main+0x122>
  while (1)
 8001958:	e7fe      	b.n	8001958 <main+0x124>
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	2000003c 	.word	0x2000003c
 8001964:	40007000 	.word	0x40007000
 8001968:	20000010 	.word	0x20000010
 800196c:	40000400 	.word	0x40000400

08001970 <HAL_TIM_PWM_MspInit>:
  *           - DMA configuration for transmission request by peripheral
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001970:	b570      	push	{r4, r5, r6, lr}
 8001972:	b088      	sub	sp, #32
  GPIO_InitTypeDef   GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_tim;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx clock enable */
  TIMx_CLK_ENABLE();
 8001974:	2400      	movs	r4, #0
 8001976:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_TIM_PWM_MspInit+0xb4>)
 8001978:	9400      	str	r4, [sp, #0]
 800197a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800197c:	f042 0202 	orr.w	r2, r2, #2
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
 8001982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001984:	f002 0202 	and.w	r2, r2, #2
 8001988:	9200      	str	r2, [sp, #0]
 800198a:	9a00      	ldr	r2, [sp, #0]

  /* Enable GPIO Channel3/3N Clocks */
  TIMx_CHANNEL3_GPIO_CLK_ENABLE();
 800198c:	9401      	str	r4, [sp, #4]
 800198e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001990:	f042 0202 	orr.w	r2, r2, #2
 8001994:	631a      	str	r2, [r3, #48]	; 0x30
 8001996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001998:	f002 0202 	and.w	r2, r2, #2
 800199c:	9201      	str	r2, [sp, #4]
 800199e:	9a01      	ldr	r2, [sp, #4]

  /* Enable DMA clock */
  DMAx_CLK_ENABLE();
 80019a0:	9402      	str	r4, [sp, #8]
 80019a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019a4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80019a8:	631a      	str	r2, [r3, #48]	; 0x30
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b0:	9302      	str	r3, [sp, #8]
{
 80019b2:	4605      	mov	r5, r0


  /* Configure TIM3_Channel3 in output, push-pull & alternate function mode */
  GPIO_InitStruct.Pin = GPIO_PIN_CHANNEL3;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2201      	movs	r2, #1
  DMAx_CLK_ENABLE();
 80019b6:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF_TIMx;
  HAL_GPIO_Init(TIMx_GPIO_CHANNEL3_PORT, &GPIO_InitStruct);
 80019b8:	481b      	ldr	r0, [pc, #108]	; (8001a28 <HAL_TIM_PWM_MspInit+0xb8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ba:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2603      	movs	r6, #3
  HAL_GPIO_Init(TIMx_GPIO_CHANNEL3_PORT, &GPIO_InitStruct);
 80019c0:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF_TIMx;
 80019c6:	e9cd 6306 	strd	r6, r3, [sp, #24]
  HAL_GPIO_Init(TIMx_GPIO_CHANNEL3_PORT, &GPIO_InitStruct);
 80019ca:	f7ff f843 	bl	8000a54 <HAL_GPIO_Init>


  /* Set the parameters to be configured */
  hdma_tim.Init.Channel = DMA_CHANNEL_5;
 80019ce:	4817      	ldr	r0, [pc, #92]	; (8001a2c <HAL_TIM_PWM_MspInit+0xbc>)
  hdma_tim.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019d0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80019d4:	2340      	movs	r3, #64	; 0x40
 80019d6:	e9c0 2301 	strd	r2, r3, [r0, #4]
  hdma_tim.Init.PeriphInc = DMA_PINC_DISABLE;
  hdma_tim.Init.MemInc = DMA_MINC_ENABLE;
  hdma_tim.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD ;
 80019da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hdma_tim.Init.MemDataAlignment = DMA_MDATAALIGN_WORD ;
  hdma_tim.Init.Mode = DMA_CIRCULAR;
 80019e2:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  hdma_tim.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD ;
 80019e6:	e9c0 1304 	strd	r1, r3, [r0, #16]
  hdma_tim.Init.Mode = DMA_CIRCULAR;
 80019ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ee:	e9c0 c306 	strd	ip, r3, [r0, #24]
  hdma_tim.Init.Priority = DMA_PRIORITY_HIGH;
 80019f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  hdma_tim.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019f6:	e9c0 3408 	strd	r3, r4, [r0, #32]
  hdma_tim.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
  hdma_tim.Init.MemBurst = DMA_MBURST_SINGLE;
 80019fa:	e9c0 640a 	strd	r6, r4, [r0, #40]	; 0x28
  hdma_tim.Init.PeriphBurst = DMA_PBURST_SINGLE;

  /* Set hdma_tim instance */
  hdma_tim.Instance = TIMx_CC3_DMA_INST;
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <HAL_TIM_PWM_MspInit+0xc0>)
  hdma_tim.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a00:	6304      	str	r4, [r0, #48]	; 0x30

  /* Link hdma_tim to hdma[TIM_DMA_ID_CC3] (channel3) */
  __HAL_LINKDMA(htim, hdma[TIM_DMA_ID_CC3], hdma_tim);
 8001a02:	62e8      	str	r0, [r5, #44]	; 0x2c
  hdma_tim.Instance = TIMx_CC3_DMA_INST;
 8001a04:	6003      	str	r3, [r0, #0]
  hdma_tim.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a06:	60c4      	str	r4, [r0, #12]
  __HAL_LINKDMA(htim, hdma[TIM_DMA_ID_CC3], hdma_tim);
 8001a08:	6385      	str	r5, [r0, #56]	; 0x38

  /* Initialize TIMx DMA handle */
  HAL_DMA_Init(htim->hdma[TIM_DMA_ID_CC3]);
 8001a0a:	f7fe feab 	bl	8000764 <HAL_DMA_Init>

  /*##-2- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(TIMx_DMA_IRQn, 0, 0);
 8001a0e:	4622      	mov	r2, r4
 8001a10:	4621      	mov	r1, r4
 8001a12:	202f      	movs	r0, #47	; 0x2f
 8001a14:	f7fe fe3c 	bl	8000690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIMx_DMA_IRQn);
 8001a18:	202f      	movs	r0, #47	; 0x2f
 8001a1a:	f7fe fe6b 	bl	80006f4 <HAL_NVIC_EnableIRQ>
}
 8001a1e:	b008      	add	sp, #32
 8001a20:	bd70      	pop	{r4, r5, r6, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	200000b0 	.word	0x200000b0
 8001a30:	400260b8 	.word	0x400260b8

08001a34 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8001a34:	4770      	bx	lr

08001a36 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <HardFault_Handler>

08001a38 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <MemManage_Handler>

08001a3a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <BusFault_Handler>

08001a3c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <UsageFault_Handler>

08001a3e <SVC_Handler>:
 8001a3e:	4770      	bx	lr

08001a40 <DebugMon_Handler>:
 8001a40:	4770      	bx	lr

08001a42 <PendSV_Handler>:
 8001a42:	4770      	bx	lr

08001a44 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8001a44:	f7fe be00 	b.w	8000648 <HAL_IncTick>

08001a48 <DMA1_Stream7_IRQHandler>:
* @param  None
* @retval None
*/
void TIMx_DMA_IRQHandler(void)
{
  HAL_DMA_IRQHandler(TimHandle.hdma[TIM_DMA_ID_CC3]);
 8001a48:	4b01      	ldr	r3, [pc, #4]	; (8001a50 <DMA1_Stream7_IRQHandler+0x8>)
 8001a4a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001a4c:	f7fe bf44 	b.w	80008d8 <HAL_DMA_IRQHandler>
 8001a50:	2000004c 	.word	0x2000004c

08001a54 <__libc_init_array>:
 8001a54:	b570      	push	{r4, r5, r6, lr}
 8001a56:	4d0d      	ldr	r5, [pc, #52]	; (8001a8c <__libc_init_array+0x38>)
 8001a58:	4c0d      	ldr	r4, [pc, #52]	; (8001a90 <__libc_init_array+0x3c>)
 8001a5a:	1b64      	subs	r4, r4, r5
 8001a5c:	10a4      	asrs	r4, r4, #2
 8001a5e:	2600      	movs	r6, #0
 8001a60:	42a6      	cmp	r6, r4
 8001a62:	d109      	bne.n	8001a78 <__libc_init_array+0x24>
 8001a64:	4d0b      	ldr	r5, [pc, #44]	; (8001a94 <__libc_init_array+0x40>)
 8001a66:	4c0c      	ldr	r4, [pc, #48]	; (8001a98 <__libc_init_array+0x44>)
 8001a68:	f000 f818 	bl	8001a9c <_init>
 8001a6c:	1b64      	subs	r4, r4, r5
 8001a6e:	10a4      	asrs	r4, r4, #2
 8001a70:	2600      	movs	r6, #0
 8001a72:	42a6      	cmp	r6, r4
 8001a74:	d105      	bne.n	8001a82 <__libc_init_array+0x2e>
 8001a76:	bd70      	pop	{r4, r5, r6, pc}
 8001a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a7c:	4798      	blx	r3
 8001a7e:	3601      	adds	r6, #1
 8001a80:	e7ee      	b.n	8001a60 <__libc_init_array+0xc>
 8001a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a86:	4798      	blx	r3
 8001a88:	3601      	adds	r6, #1
 8001a8a:	e7f2      	b.n	8001a72 <__libc_init_array+0x1e>
 8001a8c:	08001ae8 	.word	0x08001ae8
 8001a90:	08001ae8 	.word	0x08001ae8
 8001a94:	08001ae8 	.word	0x08001ae8
 8001a98:	08001aec 	.word	0x08001aec

08001a9c <_init>:
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9e:	bf00      	nop
 8001aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aa2:	bc08      	pop	{r3}
 8001aa4:	469e      	mov	lr, r3
 8001aa6:	4770      	bx	lr

08001aa8 <_fini>:
 8001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aaa:	bf00      	nop
 8001aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aae:	bc08      	pop	{r3}
 8001ab0:	469e      	mov	lr, r3
 8001ab2:	4770      	bx	lr
