
PWM_230524.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e4c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08006ffc  08006ffc  00016ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007128  08007128  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007128  08007128  00017128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007130  08007130  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007130  08007130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007134  08007134  00017134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000008e0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000954  20000954  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019b3e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c06  00000000  00000000  00039be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001580  00000000  00000000  0003c7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001480  00000000  00000000  0003dd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d04  00000000  00000000  0003f1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e8a  00000000  00000000  00066eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f343f  00000000  00000000  0007fd76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001731b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006604  00000000  00000000  00173208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006fe4 	.word	0x08006fe4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08006fe4 	.word	0x08006fe4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b098      	sub	sp, #96	; 0x60
 80005a8:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005aa:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <I2C_Scan+0xc0>)
 80005ac:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005b0:	461d      	mov	r5, r3
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005ba:	6020      	str	r0, [r4, #0]
 80005bc:	3404      	adds	r4, #4
 80005be:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fe13 	bl	80001f0 <strlen>
 80005ca:	4603      	mov	r3, r0
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	4824      	ldr	r0, [pc, #144]	; (8000668 <I2C_Scan+0xc4>)
 80005d8:	f004 fe71 	bl	80052be <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005dc:	2300      	movs	r3, #0
 80005de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005e2:	e02f      	b.n	8000644 <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	b299      	uxth	r1, r3
 80005ec:	230a      	movs	r3, #10
 80005ee:	2201      	movs	r2, #1
 80005f0:	481e      	ldr	r0, [pc, #120]	; (800066c <I2C_Scan+0xc8>)
 80005f2:	f002 fe29 	bl	8003248 <HAL_I2C_IsDeviceReady>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005fc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000600:	2b00      	cmp	r3, #0
 8000602:	d113      	bne.n	800062c <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 8000604:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000608:	1d38      	adds	r0, r7, #4
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <I2C_Scan+0xcc>)
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	f005 fdc5 	bl	800619c <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fdeb 	bl	80001f0 <strlen>
 800061a:	4603      	mov	r3, r0
 800061c:	b29a      	uxth	r2, r3
 800061e:	1d39      	adds	r1, r7, #4
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	4810      	ldr	r0, [pc, #64]	; (8000668 <I2C_Scan+0xc4>)
 8000626:	f004 fe4a 	bl	80052be <HAL_UART_Transmit>
 800062a:	e006      	b.n	800063a <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	2201      	movs	r2, #1
 8000632:	4910      	ldr	r1, [pc, #64]	; (8000674 <I2C_Scan+0xd0>)
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <I2C_Scan+0xc4>)
 8000636:	f004 fe42 	bl	80052be <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 800063a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800063e:	3301      	adds	r3, #1
 8000640:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000644:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000648:	2b7f      	cmp	r3, #127	; 0x7f
 800064a:	d9cb      	bls.n	80005e4 <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	2202      	movs	r2, #2
 8000652:	4909      	ldr	r1, [pc, #36]	; (8000678 <I2C_Scan+0xd4>)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <I2C_Scan+0xc4>)
 8000656:	f004 fe32 	bl	80052be <HAL_UART_Transmit>
}
 800065a:	bf00      	nop
 800065c:	3760      	adds	r7, #96	; 0x60
 800065e:	46bd      	mov	sp, r7
 8000660:	bdb0      	pop	{r4, r5, r7, pc}
 8000662:	bf00      	nop
 8000664:	0800700c 	.word	0x0800700c
 8000668:	200003e4 	.word	0x200003e4
 800066c:	20000300 	.word	0x20000300
 8000670:	08006ffc 	.word	0x08006ffc
 8000674:	08007004 	.word	0x08007004
 8000678:	08007008 	.word	0x08007008

0800067c <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af02      	add	r7, sp, #8
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	460b      	mov	r3, r1
 8000688:	71bb      	strb	r3, [r7, #6]
 800068a:	4613      	mov	r3, r2
 800068c:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	b299      	uxth	r1, r3
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	2201      	movs	r2, #1
 8000698:	4822      	ldr	r0, [pc, #136]	; (8000724 <LCD_SendInternal+0xa8>)
 800069a:	f002 fdd5 	bl	8003248 <HAL_I2C_IsDeviceReady>
 800069e:	4603      	mov	r3, r0
 80006a0:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d000      	beq.n	80006aa <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a8:	e7f1      	b.n	800068e <LCD_SendInternal+0x12>
            break;
 80006aa:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	f023 030f 	bic.w	r3, r3, #15
 80006b2:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	011b      	lsls	r3, r3, #4
 80006b8:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006ba:	7bba      	ldrb	r2, [r7, #14]
 80006bc:	797b      	ldrb	r3, [r7, #5]
 80006be:	4313      	orrs	r3, r2
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f043 030c 	orr.w	r3, r3, #12
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006ca:	7bba      	ldrb	r2, [r7, #14]
 80006cc:	797b      	ldrb	r3, [r7, #5]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006da:	7b7a      	ldrb	r2, [r7, #13]
 80006dc:	797b      	ldrb	r3, [r7, #5]
 80006de:	4313      	orrs	r3, r2
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	f043 030c 	orr.w	r3, r3, #12
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006ea:	7b7a      	ldrb	r2, [r7, #13]
 80006ec:	797b      	ldrb	r3, [r7, #5]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	b299      	uxth	r1, r3
 80006fe:	f107 0208 	add.w	r2, r7, #8
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2304      	movs	r3, #4
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <LCD_SendInternal+0xa8>)
 800070c:	f002 fc9e 	bl	800304c <HAL_I2C_Master_Transmit>
 8000710:	4603      	mov	r3, r0
 8000712:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 8000714:	2005      	movs	r0, #5
 8000716:	f001 f909 	bl	800192c <HAL_Delay>
    return res;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000300 	.word	0x20000300

08000728 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	460a      	mov	r2, r1
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	4613      	mov	r3, r2
 8000736:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000738:	79b9      	ldrb	r1, [r7, #6]
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2200      	movs	r2, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff9c 	bl	800067c <LCD_SendInternal>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 800075c:	79b9      	ldrb	r1, [r7, #6]
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2201      	movs	r2, #1
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff8a 	bl	800067c <LCD_SendInternal>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2130      	movs	r1, #48	; 0x30
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ffd2 	bl	8000728 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2102      	movs	r1, #2
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ffcd 	bl	8000728 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	210c      	movs	r1, #12
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ffc8 	bl	8000728 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2101      	movs	r1, #1
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ffc3 	bl	8000728 <LCD_SendCommand>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	6039      	str	r1, [r7, #0]
 80007b4:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007b6:	e009      	b.n	80007cc <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ffc3 	bl	800074c <LCD_SendData>
        str++;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f1      	bne.n	80007b8 <LCD_SendString+0xe>
    }
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b090      	sub	sp, #64	; 0x40
 80007e4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007e6:	f001 f82f 	bl	8001848 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007ea:	f000 f8dd 	bl	80009a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007ee:	f000 fb75 	bl	8000edc <MX_GPIO_Init>
	MX_ETH_Init();
 80007f2:	f000 f9a1 	bl	8000b38 <MX_ETH_Init>
	MX_USART3_UART_Init();
 80007f6:	f000 fb19 	bl	8000e2c <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80007fa:	f000 fb41 	bl	8000e80 <MX_USB_OTG_FS_PCD_Init>
	MX_TIM3_Init();
 80007fe:	f000 fa9f 	bl	8000d40 <MX_TIM3_Init>
	MX_ADC1_Init();
 8000802:	f000 f947 	bl	8000a94 <MX_ADC1_Init>
	MX_TIM2_Init();
 8000806:	f000 fa25 	bl	8000c54 <MX_TIM2_Init>
	MX_I2C1_Init();
 800080a:	f000 f9e3 	bl	8000bd4 <MX_I2C1_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 800080e:	f000 f935 	bl	8000a7c <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000812:	2104      	movs	r1, #4
 8000814:	4858      	ldr	r0, [pc, #352]	; (8000978 <main+0x198>)
 8000816:	f003 ff27 	bl	8004668 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800081a:	2108      	movs	r1, #8
 800081c:	4857      	ldr	r0, [pc, #348]	; (800097c <main+0x19c>)
 800081e:	f003 ff23 	bl	8004668 <HAL_TIM_PWM_Start>

	setvbuf(stdin, NULL, _IONBF, 0);
 8000822:	4b57      	ldr	r3, [pc, #348]	; (8000980 <main+0x1a0>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6858      	ldr	r0, [r3, #4]
 8000828:	2300      	movs	r3, #0
 800082a:	2202      	movs	r2, #2
 800082c:	2100      	movs	r1, #0
 800082e:	f005 fbef 	bl	8006010 <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 8000832:	4b53      	ldr	r3, [pc, #332]	; (8000980 <main+0x1a0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	6898      	ldr	r0, [r3, #8]
 8000838:	2300      	movs	r3, #0
 800083a:	2202      	movs	r2, #2
 800083c:	2100      	movs	r1, #0
 800083e:	f005 fbe7 	bl	8006010 <setvbuf>
	I2C_Scan();
 8000842:	f7ff feaf 	bl	80005a4 <I2C_Scan>
	LCD_Init(LCD_ADDR);
 8000846:	204e      	movs	r0, #78	; 0x4e
 8000848:	f7ff ff92 	bl	8000770 <LCD_Init>

	int adc_value;
	char uart_buf[30];
	int ledtest = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_ADC_Start(&hadc1);
 8000850:	484c      	ldr	r0, [pc, #304]	; (8000984 <main+0x1a4>)
 8000852:	f001 f8d3 	bl	80019fc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 8000856:	210a      	movs	r1, #10
 8000858:	484a      	ldr	r0, [pc, #296]	; (8000984 <main+0x1a4>)
 800085a:	f001 f9d4 	bl	8001c06 <HAL_ADC_PollForConversion>
		adc_value = HAL_ADC_GetValue(&hadc1);
 800085e:	4849      	ldr	r0, [pc, #292]	; (8000984 <main+0x1a4>)
 8000860:	f001 fa5c 	bl	8001d1c <HAL_ADC_GetValue>
 8000864:	4603      	mov	r3, r0
 8000866:	63bb      	str	r3, [r7, #56]	; 0x38
		HAL_ADC_Stop(&hadc1);
 8000868:	4846      	ldr	r0, [pc, #280]	; (8000984 <main+0x1a4>)
 800086a:	f001 f999 	bl	8001ba0 <HAL_ADC_Stop>
		memset(uart_buf, 0, sizeof(uart_buf));
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	221e      	movs	r2, #30
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f005 fbc2 	bl	8006000 <memset>
		sprintf(uart_buf, "ADC Value : %d \r\n", adc_value);
 800087c:	f107 0318 	add.w	r3, r7, #24
 8000880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000882:	4941      	ldr	r1, [pc, #260]	; (8000988 <main+0x1a8>)
 8000884:	4618      	mov	r0, r3
 8000886:	f005 fcbd 	bl	8006204 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) uart_buf, sizeof(uart_buf), 1000);
 800088a:	f107 0118 	add.w	r1, r7, #24
 800088e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000892:	221e      	movs	r2, #30
 8000894:	483d      	ldr	r0, [pc, #244]	; (800098c <main+0x1ac>)
 8000896:	f004 fd12 	bl	80052be <HAL_UART_Transmit>

		TIM3->CCR3 = (adc_value * 100) / 4095;
 800089a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800089c:	2264      	movs	r2, #100	; 0x64
 800089e:	fb02 f303 	mul.w	r3, r2, r3
 80008a2:	4a3b      	ldr	r2, [pc, #236]	; (8000990 <main+0x1b0>)
 80008a4:	fb82 1203 	smull	r1, r2, r2, r3
 80008a8:	441a      	add	r2, r3
 80008aa:	12d2      	asrs	r2, r2, #11
 80008ac:	17db      	asrs	r3, r3, #31
 80008ae:	1ad2      	subs	r2, r2, r3
 80008b0:	4b38      	ldr	r3, [pc, #224]	; (8000994 <main+0x1b4>)
 80008b2:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR2 = motor;
 80008b4:	4b38      	ldr	r3, [pc, #224]	; (8000998 <main+0x1b8>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008bc:	639a      	str	r2, [r3, #56]	; 0x38

		sprintf(ccr2_value, "CCR2 : %03d", TIM2->CCR2);
 80008be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4934      	ldr	r1, [pc, #208]	; (800099c <main+0x1bc>)
 80008ca:	4618      	mov	r0, r3
 80008cc:	f005 fc9a 	bl	8006204 <siprintf>
		sprintf(ccr3_value, "CCR3 : %03d", TIM3->CCR3);
 80008d0:	4b30      	ldr	r3, [pc, #192]	; (8000994 <main+0x1b4>)
 80008d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008d4:	463b      	mov	r3, r7
 80008d6:	4932      	ldr	r1, [pc, #200]	; (80009a0 <main+0x1c0>)
 80008d8:	4618      	mov	r0, r3
 80008da:	f005 fc93 	bl	8006204 <siprintf>

		// Send CCR2 value via UART
		memset(uart_buf, 0, sizeof(uart_buf));
 80008de:	f107 0318 	add.w	r3, r7, #24
 80008e2:	221e      	movs	r2, #30
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f005 fb8a 	bl	8006000 <memset>
		sprintf(uart_buf, "%s \r\n", ccr2_value);
 80008ec:	f107 020c 	add.w	r2, r7, #12
 80008f0:	f107 0318 	add.w	r3, r7, #24
 80008f4:	492b      	ldr	r1, [pc, #172]	; (80009a4 <main+0x1c4>)
 80008f6:	4618      	mov	r0, r3
 80008f8:	f005 fc84 	bl	8006204 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) uart_buf, strlen(uart_buf), 1000);
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fc75 	bl	80001f0 <strlen>
 8000906:	4603      	mov	r3, r0
 8000908:	b29a      	uxth	r2, r3
 800090a:	f107 0118 	add.w	r1, r7, #24
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	481e      	ldr	r0, [pc, #120]	; (800098c <main+0x1ac>)
 8000914:	f004 fcd3 	bl	80052be <HAL_UART_Transmit>

		// Send CCR3 value via UART
		memset(uart_buf, 0, sizeof(uart_buf));
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	221e      	movs	r2, #30
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f005 fb6d 	bl	8006000 <memset>
		sprintf(uart_buf, "%s \r\n", ccr3_value);
 8000926:	463a      	mov	r2, r7
 8000928:	f107 0318 	add.w	r3, r7, #24
 800092c:	491d      	ldr	r1, [pc, #116]	; (80009a4 <main+0x1c4>)
 800092e:	4618      	mov	r0, r3
 8000930:	f005 fc68 	bl	8006204 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) uart_buf, strlen(uart_buf), 1000);
 8000934:	f107 0318 	add.w	r3, r7, #24
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fc59 	bl	80001f0 <strlen>
 800093e:	4603      	mov	r3, r0
 8000940:	b29a      	uxth	r2, r3
 8000942:	f107 0118 	add.w	r1, r7, #24
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	4810      	ldr	r0, [pc, #64]	; (800098c <main+0x1ac>)
 800094c:	f004 fcb7 	bl	80052be <HAL_UART_Transmit>

		// set address to 0x00
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000950:	2180      	movs	r1, #128	; 0x80
 8000952:	204e      	movs	r0, #78	; 0x4e
 8000954:	f7ff fee8 	bl	8000728 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, ccr2_value);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	204e      	movs	r0, #78	; 0x4e
 8000960:	f7ff ff23 	bl	80007aa <LCD_SendString>
//		LCD_SendCommand(LCD_ADDR, 0b10000000 | 0x05);
//		LCD_SendString(LCD_ADDR, ccr2_value);

// set address to 0x40
		LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000964:	21c0      	movs	r1, #192	; 0xc0
 8000966:	204e      	movs	r0, #78	; 0x4e
 8000968:	f7ff fede 	bl	8000728 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, ccr3_value);
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	204e      	movs	r0, #78	; 0x4e
 8000972:	f7ff ff1a 	bl	80007aa <LCD_SendString>
	while (1) {
 8000976:	e76b      	b.n	8000850 <main+0x70>
 8000978:	20000354 	.word	0x20000354
 800097c:	2000039c 	.word	0x2000039c
 8000980:	20000010 	.word	0x20000010
 8000984:	20000208 	.word	0x20000208
 8000988:	08007044 	.word	0x08007044
 800098c:	200003e4 	.word	0x200003e4
 8000990:	80080081 	.word	0x80080081
 8000994:	40000400 	.word	0x40000400
 8000998:	20000000 	.word	0x20000000
 800099c:	08007058 	.word	0x08007058
 80009a0:	08007064 	.word	0x08007064
 80009a4:	08007070 	.word	0x08007070

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b094      	sub	sp, #80	; 0x50
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 0320 	add.w	r3, r7, #32
 80009b2:	2230      	movs	r2, #48	; 0x30
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f005 fb22 	bl	8006000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <SystemClock_Config+0xcc>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	4a27      	ldr	r2, [pc, #156]	; (8000a74 <SystemClock_Config+0xcc>)
 80009d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
 80009dc:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <SystemClock_Config+0xcc>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <SystemClock_Config+0xd0>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <SystemClock_Config+0xd0>)
 80009f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <SystemClock_Config+0xd0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a08:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a1c:	23a8      	movs	r3, #168	; 0xa8
 8000a1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a24:	2307      	movs	r3, #7
 8000a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a28:	f107 0320 	add.w	r3, r7, #32
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f003 f8db 	bl	8003be8 <HAL_RCC_OscConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a38:	f000 fb44 	bl	80010c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a40:	2302      	movs	r3, #2
 8000a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2105      	movs	r1, #5
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f003 fb3c 	bl	80040d8 <HAL_RCC_ClockConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a66:	f000 fb2d 	bl	80010c4 <Error_Handler>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3750      	adds	r7, #80	; 0x50
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40007000 	.word	0x40007000

08000a7c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	2028      	movs	r0, #40	; 0x28
 8000a86:	f001 fc60 	bl	800234a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a8a:	2028      	movs	r0, #40	; 0x28
 8000a8c:	f001 fc79 	bl	8002382 <HAL_NVIC_EnableIRQ>
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000aa8:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <MX_ADC1_Init+0x9c>)
 8000aaa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000aae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ab2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000ad6:	4a17      	ldr	r2, [pc, #92]	; (8000b34 <MX_ADC1_Init+0xa0>)
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000af6:	f000 ff3d 	bl	8001974 <HAL_ADC_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b00:	f000 fae0 	bl	80010c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b04:	2303      	movs	r3, #3
 8000b06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b10:	463b      	mov	r3, r7
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_ADC1_Init+0x98>)
 8000b16:	f001 f90f 	bl	8001d38 <HAL_ADC_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b20:	f000 fad0 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000208 	.word	0x20000208
 8000b30:	40012000 	.word	0x40012000
 8000b34:	0f000001 	.word	0x0f000001

08000b38 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <MX_ETH_Init+0x84>)
 8000b3e:	4a20      	ldr	r2, [pc, #128]	; (8000bc0 <MX_ETH_Init+0x88>)
 8000b40:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <MX_ETH_Init+0x8c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_ETH_Init+0x8c>)
 8000b4a:	2280      	movs	r2, #128	; 0x80
 8000b4c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_ETH_Init+0x8c>)
 8000b50:	22e1      	movs	r2, #225	; 0xe1
 8000b52:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_ETH_Init+0x8c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_ETH_Init+0x8c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_ETH_Init+0x8c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_ETH_Init+0x84>)
 8000b68:	4a16      	ldr	r2, [pc, #88]	; (8000bc4 <MX_ETH_Init+0x8c>)
 8000b6a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_ETH_Init+0x84>)
 8000b6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b72:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_ETH_Init+0x84>)
 8000b76:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <MX_ETH_Init+0x90>)
 8000b78:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <MX_ETH_Init+0x84>)
 8000b7c:	4a13      	ldr	r2, [pc, #76]	; (8000bcc <MX_ETH_Init+0x94>)
 8000b7e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_ETH_Init+0x84>)
 8000b82:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b86:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <MX_ETH_Init+0x84>)
 8000b8a:	f001 fc15 	bl	80023b8 <HAL_ETH_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000b94:	f000 fa96 	bl	80010c4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b98:	2238      	movs	r2, #56	; 0x38
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <MX_ETH_Init+0x98>)
 8000b9e:	f005 fa2f 	bl	8006000 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_ETH_Init+0x98>)
 8000ba4:	2221      	movs	r2, #33	; 0x21
 8000ba6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_ETH_Init+0x98>)
 8000baa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000bae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <MX_ETH_Init+0x98>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000250 	.word	0x20000250
 8000bc0:	40028000 	.word	0x40028000
 8000bc4:	20000934 	.word	0x20000934
 8000bc8:	20000168 	.word	0x20000168
 8000bcc:	200000c8 	.word	0x200000c8
 8000bd0:	20000090 	.word	0x20000090

08000bd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <MX_I2C1_Init+0x78>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000be0:	4a1b      	ldr	r2, [pc, #108]	; (8000c50 <MX_I2C1_Init+0x7c>)
 8000be2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c10:	480d      	ldr	r0, [pc, #52]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000c12:	f002 f8d7 	bl	8002dc4 <HAL_I2C_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c1c:	f000 fa52 	bl	80010c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c20:	2100      	movs	r1, #0
 8000c22:	4809      	ldr	r0, [pc, #36]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000c24:	f002 fe47 	bl	80038b6 <HAL_I2CEx_ConfigAnalogFilter>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000c2e:	f000 fa49 	bl	80010c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_I2C1_Init+0x74>)
 8000c36:	f002 fe7a 	bl	800392e <HAL_I2CEx_ConfigDigitalFilter>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000c40:	f000 fa40 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000300 	.word	0x20000300
 8000c4c:	40005400 	.word	0x40005400
 8000c50:	000186a0 	.word	0x000186a0

08000c54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08e      	sub	sp, #56	; 0x38
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c68:	f107 0320 	add.w	r3, r7, #32
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	615a      	str	r2, [r3, #20]
 8000c82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c84:	4b2d      	ldr	r3, [pc, #180]	; (8000d3c <MX_TIM2_Init+0xe8>)
 8000c86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000c8c:	4b2b      	ldr	r3, [pc, #172]	; (8000d3c <MX_TIM2_Init+0xe8>)
 8000c8e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000c92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <MX_TIM2_Init+0xe8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 8000c9a:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <MX_TIM2_Init+0xe8>)
 8000c9c:	22c7      	movs	r2, #199	; 0xc7
 8000c9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <MX_TIM2_Init+0xe8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca6:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <MX_TIM2_Init+0xe8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cac:	4823      	ldr	r0, [pc, #140]	; (8000d3c <MX_TIM2_Init+0xe8>)
 8000cae:	f003 fc33 	bl	8004518 <HAL_TIM_Base_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000cb8:	f000 fa04 	bl	80010c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	481c      	ldr	r0, [pc, #112]	; (8000d3c <MX_TIM2_Init+0xe8>)
 8000cca:	f003 fe57 	bl	800497c <HAL_TIM_ConfigClockSource>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000cd4:	f000 f9f6 	bl	80010c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cd8:	4818      	ldr	r0, [pc, #96]	; (8000d3c <MX_TIM2_Init+0xe8>)
 8000cda:	f003 fc6c 	bl	80045b6 <HAL_TIM_PWM_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ce4:	f000 f9ee 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cf0:	f107 0320 	add.w	r3, r7, #32
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4811      	ldr	r0, [pc, #68]	; (8000d3c <MX_TIM2_Init+0xe8>)
 8000cf8:	f004 fa18 	bl	800512c <HAL_TIMEx_MasterConfigSynchronization>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d02:	f000 f9df 	bl	80010c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d06:	2360      	movs	r3, #96	; 0x60
 8000d08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100-1;
 8000d0a:	2363      	movs	r3, #99	; 0x63
 8000d0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2204      	movs	r2, #4
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4807      	ldr	r0, [pc, #28]	; (8000d3c <MX_TIM2_Init+0xe8>)
 8000d1e:	f003 fd6b 	bl	80047f8 <HAL_TIM_PWM_ConfigChannel>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d28:	f000 f9cc 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d2c:	4803      	ldr	r0, [pc, #12]	; (8000d3c <MX_TIM2_Init+0xe8>)
 8000d2e:	f000 fb7f 	bl	8001430 <HAL_TIM_MspPostInit>

}
 8000d32:	bf00      	nop
 8000d34:	3738      	adds	r7, #56	; 0x38
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000354 	.word	0x20000354

08000d40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08e      	sub	sp, #56	; 0x38
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d54:	f107 0320 	add.w	r3, r7, #32
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	615a      	str	r2, [r3, #20]
 8000d6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d70:	4b2c      	ldr	r3, [pc, #176]	; (8000e24 <MX_TIM3_Init+0xe4>)
 8000d72:	4a2d      	ldr	r2, [pc, #180]	; (8000e28 <MX_TIM3_Init+0xe8>)
 8000d74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <MX_TIM3_Init+0xe4>)
 8000d78:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000d7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <MX_TIM3_Init+0xe4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <MX_TIM3_Init+0xe4>)
 8000d86:	2263      	movs	r2, #99	; 0x63
 8000d88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <MX_TIM3_Init+0xe4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d90:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <MX_TIM3_Init+0xe4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d96:	4823      	ldr	r0, [pc, #140]	; (8000e24 <MX_TIM3_Init+0xe4>)
 8000d98:	f003 fbbe 	bl	8004518 <HAL_TIM_Base_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000da2:	f000 f98f 	bl	80010c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db0:	4619      	mov	r1, r3
 8000db2:	481c      	ldr	r0, [pc, #112]	; (8000e24 <MX_TIM3_Init+0xe4>)
 8000db4:	f003 fde2 	bl	800497c <HAL_TIM_ConfigClockSource>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000dbe:	f000 f981 	bl	80010c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dc2:	4818      	ldr	r0, [pc, #96]	; (8000e24 <MX_TIM3_Init+0xe4>)
 8000dc4:	f003 fbf7 	bl	80045b6 <HAL_TIM_PWM_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000dce:	f000 f979 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dda:	f107 0320 	add.w	r3, r7, #32
 8000dde:	4619      	mov	r1, r3
 8000de0:	4810      	ldr	r0, [pc, #64]	; (8000e24 <MX_TIM3_Init+0xe4>)
 8000de2:	f004 f9a3 	bl	800512c <HAL_TIMEx_MasterConfigSynchronization>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000dec:	f000 f96a 	bl	80010c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df0:	2360      	movs	r3, #96	; 0x60
 8000df2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 8000df4:	2331      	movs	r3, #49	; 0x31
 8000df6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2208      	movs	r2, #8
 8000e04:	4619      	mov	r1, r3
 8000e06:	4807      	ldr	r0, [pc, #28]	; (8000e24 <MX_TIM3_Init+0xe4>)
 8000e08:	f003 fcf6 	bl	80047f8 <HAL_TIM_PWM_ConfigChannel>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e12:	f000 f957 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e16:	4803      	ldr	r0, [pc, #12]	; (8000e24 <MX_TIM3_Init+0xe4>)
 8000e18:	f000 fb0a 	bl	8001430 <HAL_TIM_MspPostInit>

}
 8000e1c:	bf00      	nop
 8000e1e:	3738      	adds	r7, #56	; 0x38
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	2000039c 	.word	0x2000039c
 8000e28:	40000400 	.word	0x40000400

08000e2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_USART3_UART_Init+0x4c>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <MX_USART3_UART_Init+0x50>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <MX_USART3_UART_Init+0x4c>)
 8000e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_USART3_UART_Init+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_USART3_UART_Init+0x4c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <MX_USART3_UART_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_USART3_UART_Init+0x4c>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <MX_USART3_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_USART3_UART_Init+0x4c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_USART3_UART_Init+0x4c>)
 8000e64:	f004 f9de 	bl	8005224 <HAL_UART_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e6e:	f000 f929 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200003e4 	.word	0x200003e4
 8000e7c:	40004800 	.word	0x40004800

08000e80 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e8e:	2204      	movs	r2, #4
 8000e90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e94:	2202      	movs	r2, #2
 8000e96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec4:	f002 fd72 	bl	80039ac <HAL_PCD_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ece:	f000 f8f9 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000428 	.word	0x20000428

08000edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
 8000ef6:	4b5a      	ldr	r3, [pc, #360]	; (8001060 <MX_GPIO_Init+0x184>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a59      	ldr	r2, [pc, #356]	; (8001060 <MX_GPIO_Init+0x184>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b57      	ldr	r3, [pc, #348]	; (8001060 <MX_GPIO_Init+0x184>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	61bb      	str	r3, [r7, #24]
 8000f0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	4b53      	ldr	r3, [pc, #332]	; (8001060 <MX_GPIO_Init+0x184>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a52      	ldr	r2, [pc, #328]	; (8001060 <MX_GPIO_Init+0x184>)
 8000f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b50      	ldr	r3, [pc, #320]	; (8001060 <MX_GPIO_Init+0x184>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b4c      	ldr	r3, [pc, #304]	; (8001060 <MX_GPIO_Init+0x184>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a4b      	ldr	r2, [pc, #300]	; (8001060 <MX_GPIO_Init+0x184>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b49      	ldr	r3, [pc, #292]	; (8001060 <MX_GPIO_Init+0x184>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b45      	ldr	r3, [pc, #276]	; (8001060 <MX_GPIO_Init+0x184>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a44      	ldr	r2, [pc, #272]	; (8001060 <MX_GPIO_Init+0x184>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b42      	ldr	r3, [pc, #264]	; (8001060 <MX_GPIO_Init+0x184>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <MX_GPIO_Init+0x184>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a3d      	ldr	r2, [pc, #244]	; (8001060 <MX_GPIO_Init+0x184>)
 8000f6c:	f043 0310 	orr.w	r3, r3, #16
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <MX_GPIO_Init+0x184>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0310 	and.w	r3, r3, #16
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <MX_GPIO_Init+0x184>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a36      	ldr	r2, [pc, #216]	; (8001060 <MX_GPIO_Init+0x184>)
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b34      	ldr	r3, [pc, #208]	; (8001060 <MX_GPIO_Init+0x184>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4b30      	ldr	r3, [pc, #192]	; (8001060 <MX_GPIO_Init+0x184>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a2f      	ldr	r2, [pc, #188]	; (8001060 <MX_GPIO_Init+0x184>)
 8000fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <MX_GPIO_Init+0x184>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fbc:	4829      	ldr	r0, [pc, #164]	; (8001064 <MX_GPIO_Init+0x188>)
 8000fbe:	f001 fecf 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2140      	movs	r1, #64	; 0x40
 8000fc6:	4828      	ldr	r0, [pc, #160]	; (8001068 <MX_GPIO_Init+0x18c>)
 8000fc8:	f001 feca 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4822      	ldr	r0, [pc, #136]	; (800106c <MX_GPIO_Init+0x190>)
 8000fe4:	f001 fd10 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000fe8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4818      	ldr	r0, [pc, #96]	; (8001064 <MX_GPIO_Init+0x188>)
 8001002:	f001 fd01 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001006:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001012:	2301      	movs	r3, #1
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	4619      	mov	r1, r3
 800101c:	4814      	ldr	r0, [pc, #80]	; (8001070 <MX_GPIO_Init+0x194>)
 800101e:	f001 fcf3 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001022:	2340      	movs	r3, #64	; 0x40
 8001024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	480b      	ldr	r0, [pc, #44]	; (8001068 <MX_GPIO_Init+0x18c>)
 800103a:	f001 fce5 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_GPIO_Init+0x18c>)
 8001052:	f001 fcd9 	bl	8002a08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001056:	bf00      	nop
 8001058:	3730      	adds	r7, #48	; 0x30
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40020400 	.word	0x40020400
 8001068:	40021800 	.word	0x40021800
 800106c:	40020800 	.word	0x40020800
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13){
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001084:	d108      	bne.n	8001098 <HAL_GPIO_EXTI_Callback+0x24>
	  if(motor>5) --motor;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b05      	cmp	r3, #5
 800108c:	dd04      	ble.n	8001098 <HAL_GPIO_EXTI_Callback+0x24>
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3b01      	subs	r3, #1
 8001094:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001096:	6013      	str	r3, [r2, #0]
  }
  if(GPIO_Pin == GPIO_PIN_11){
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800109e:	d108      	bne.n	80010b2 <HAL_GPIO_EXTI_Callback+0x3e>
	  if(motor<25) ++motor;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b18      	cmp	r3, #24
 80010a6:	dc04      	bgt.n	80010b2 <HAL_GPIO_EXTI_Callback+0x3e>
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80010b0:	6013      	str	r3, [r2, #0]
  }
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000000 	.word	0x20000000

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010cc:	e7fe      	b.n	80010cc <Error_Handler+0x8>
	...

080010d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <HAL_MspInit+0x4c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <HAL_MspInit+0x4c>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <HAL_MspInit+0x4c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_MspInit+0x4c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <HAL_MspInit+0x4c>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_MspInit+0x4c>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800

08001120 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <HAL_ADC_MspInit+0x7c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d127      	bne.n	8001192 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <HAL_ADC_MspInit+0x80>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <HAL_ADC_MspInit+0x80>)
 800114c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_ADC_MspInit+0x80>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_ADC_MspInit+0x80>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_ADC_MspInit+0x80>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_ADC_MspInit+0x80>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800117a:	2308      	movs	r3, #8
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_ADC_MspInit+0x84>)
 800118e:	f001 fc3b 	bl	8002a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40012000 	.word	0x40012000
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000

080011a8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08e      	sub	sp, #56	; 0x38
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a55      	ldr	r2, [pc, #340]	; (800131c <HAL_ETH_MspInit+0x174>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	f040 80a4 	bne.w	8001314 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
 80011d0:	4b53      	ldr	r3, [pc, #332]	; (8001320 <HAL_ETH_MspInit+0x178>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	4a52      	ldr	r2, [pc, #328]	; (8001320 <HAL_ETH_MspInit+0x178>)
 80011d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011da:	6313      	str	r3, [r2, #48]	; 0x30
 80011dc:	4b50      	ldr	r3, [pc, #320]	; (8001320 <HAL_ETH_MspInit+0x178>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e4:	623b      	str	r3, [r7, #32]
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <HAL_ETH_MspInit+0x178>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	4a4b      	ldr	r2, [pc, #300]	; (8001320 <HAL_ETH_MspInit+0x178>)
 80011f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011f6:	6313      	str	r3, [r2, #48]	; 0x30
 80011f8:	4b49      	ldr	r3, [pc, #292]	; (8001320 <HAL_ETH_MspInit+0x178>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001200:	61fb      	str	r3, [r7, #28]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	4b45      	ldr	r3, [pc, #276]	; (8001320 <HAL_ETH_MspInit+0x178>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	4a44      	ldr	r2, [pc, #272]	; (8001320 <HAL_ETH_MspInit+0x178>)
 800120e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001212:	6313      	str	r3, [r2, #48]	; 0x30
 8001214:	4b42      	ldr	r3, [pc, #264]	; (8001320 <HAL_ETH_MspInit+0x178>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800121c:	61bb      	str	r3, [r7, #24]
 800121e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	4b3e      	ldr	r3, [pc, #248]	; (8001320 <HAL_ETH_MspInit+0x178>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	4a3d      	ldr	r2, [pc, #244]	; (8001320 <HAL_ETH_MspInit+0x178>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6313      	str	r3, [r2, #48]	; 0x30
 8001230:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <HAL_ETH_MspInit+0x178>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	4b37      	ldr	r3, [pc, #220]	; (8001320 <HAL_ETH_MspInit+0x178>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	4a36      	ldr	r2, [pc, #216]	; (8001320 <HAL_ETH_MspInit+0x178>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6313      	str	r3, [r2, #48]	; 0x30
 800124c:	4b34      	ldr	r3, [pc, #208]	; (8001320 <HAL_ETH_MspInit+0x178>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	4b30      	ldr	r3, [pc, #192]	; (8001320 <HAL_ETH_MspInit+0x178>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	4a2f      	ldr	r2, [pc, #188]	; (8001320 <HAL_ETH_MspInit+0x178>)
 8001262:	f043 0302 	orr.w	r3, r3, #2
 8001266:	6313      	str	r3, [r2, #48]	; 0x30
 8001268:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <HAL_ETH_MspInit+0x178>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	4b29      	ldr	r3, [pc, #164]	; (8001320 <HAL_ETH_MspInit+0x178>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	4a28      	ldr	r2, [pc, #160]	; (8001320 <HAL_ETH_MspInit+0x178>)
 800127e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001282:	6313      	str	r3, [r2, #48]	; 0x30
 8001284:	4b26      	ldr	r3, [pc, #152]	; (8001320 <HAL_ETH_MspInit+0x178>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001290:	2332      	movs	r3, #50	; 0x32
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a0:	230b      	movs	r3, #11
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	481e      	ldr	r0, [pc, #120]	; (8001324 <HAL_ETH_MspInit+0x17c>)
 80012ac:	f001 fbac 	bl	8002a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012b0:	2386      	movs	r3, #134	; 0x86
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c0:	230b      	movs	r3, #11
 80012c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	4619      	mov	r1, r3
 80012ca:	4817      	ldr	r0, [pc, #92]	; (8001328 <HAL_ETH_MspInit+0x180>)
 80012cc:	f001 fb9c 	bl	8002a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e2:	230b      	movs	r3, #11
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	480f      	ldr	r0, [pc, #60]	; (800132c <HAL_ETH_MspInit+0x184>)
 80012ee:	f001 fb8b 	bl	8002a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001304:	230b      	movs	r3, #11
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	4808      	ldr	r0, [pc, #32]	; (8001330 <HAL_ETH_MspInit+0x188>)
 8001310:	f001 fb7a 	bl	8002a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001314:	bf00      	nop
 8001316:	3738      	adds	r7, #56	; 0x38
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40028000 	.word	0x40028000
 8001320:	40023800 	.word	0x40023800
 8001324:	40020800 	.word	0x40020800
 8001328:	40020000 	.word	0x40020000
 800132c:	40020400 	.word	0x40020400
 8001330:	40021800 	.word	0x40021800

08001334 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a19      	ldr	r2, [pc, #100]	; (80013b8 <HAL_I2C_MspInit+0x84>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d12c      	bne.n	80013b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_I2C_MspInit+0x88>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a17      	ldr	r2, [pc, #92]	; (80013bc <HAL_I2C_MspInit+0x88>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_I2C_MspInit+0x88>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001372:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001378:	2312      	movs	r3, #18
 800137a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001384:	2304      	movs	r3, #4
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	480c      	ldr	r0, [pc, #48]	; (80013c0 <HAL_I2C_MspInit+0x8c>)
 8001390:	f001 fb3a 	bl	8002a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_I2C_MspInit+0x88>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_I2C_MspInit+0x88>)
 800139e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a2:	6413      	str	r3, [r2, #64]	; 0x40
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_I2C_MspInit+0x88>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40005400 	.word	0x40005400
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020400 	.word	0x40020400

080013c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d4:	d10e      	bne.n	80013f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <HAL_TIM_Base_MspInit+0x64>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <HAL_TIM_Base_MspInit+0x64>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6413      	str	r3, [r2, #64]	; 0x40
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <HAL_TIM_Base_MspInit+0x64>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013f2:	e012      	b.n	800141a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0c      	ldr	r2, [pc, #48]	; (800142c <HAL_TIM_Base_MspInit+0x68>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d10d      	bne.n	800141a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_TIM_Base_MspInit+0x64>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <HAL_TIM_Base_MspInit+0x64>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_TIM_Base_MspInit+0x64>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40000400 	.word	0x40000400

08001430 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001450:	d11e      	bne.n	8001490 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_TIM_MspPostInit+0xb0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <HAL_TIM_MspPostInit+0xb0>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <HAL_TIM_MspPostInit+0xb0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800146e:	2308      	movs	r3, #8
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800147e:	2301      	movs	r3, #1
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4816      	ldr	r0, [pc, #88]	; (80014e4 <HAL_TIM_MspPostInit+0xb4>)
 800148a:	f001 fabd 	bl	8002a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800148e:	e023      	b.n	80014d8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <HAL_TIM_MspPostInit+0xb8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d11e      	bne.n	80014d8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_TIM_MspPostInit+0xb0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <HAL_TIM_MspPostInit+0xb0>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HAL_TIM_MspPostInit+0xb0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014c8:	2302      	movs	r3, #2
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	4806      	ldr	r0, [pc, #24]	; (80014ec <HAL_TIM_MspPostInit+0xbc>)
 80014d4:	f001 fa98 	bl	8002a08 <HAL_GPIO_Init>
}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020400 	.word	0x40020400
 80014e8:	40000400 	.word	0x40000400
 80014ec:	40020800 	.word	0x40020800

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a19      	ldr	r2, [pc, #100]	; (8001574 <HAL_UART_MspInit+0x84>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d12c      	bne.n	800156c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_UART_MspInit+0x88>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_UART_MspInit+0x88>)
 800151c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_UART_MspInit+0x88>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_UART_MspInit+0x88>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a10      	ldr	r2, [pc, #64]	; (8001578 <HAL_UART_MspInit+0x88>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_UART_MspInit+0x88>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800154a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800154e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800155c:	2307      	movs	r3, #7
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <HAL_UART_MspInit+0x8c>)
 8001568:	f001 fa4e 	bl	8002a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800156c:	bf00      	nop
 800156e:	3728      	adds	r7, #40	; 0x28
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40004800 	.word	0x40004800
 8001578:	40023800 	.word	0x40023800
 800157c:	40020c00 	.word	0x40020c00

08001580 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015a0:	d13f      	bne.n	8001622 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	4b21      	ldr	r3, [pc, #132]	; (800162c <HAL_PCD_MspInit+0xac>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a20      	ldr	r2, [pc, #128]	; (800162c <HAL_PCD_MspInit+0xac>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b1e      	ldr	r3, [pc, #120]	; (800162c <HAL_PCD_MspInit+0xac>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015be:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015d0:	230a      	movs	r3, #10
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4815      	ldr	r0, [pc, #84]	; (8001630 <HAL_PCD_MspInit+0xb0>)
 80015dc:	f001 fa14 	bl	8002a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	480e      	ldr	r0, [pc, #56]	; (8001630 <HAL_PCD_MspInit+0xb0>)
 80015f6:	f001 fa07 	bl	8002a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_PCD_MspInit+0xac>)
 80015fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <HAL_PCD_MspInit+0xac>)
 8001600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001604:	6353      	str	r3, [r2, #52]	; 0x34
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_PCD_MspInit+0xac>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_PCD_MspInit+0xac>)
 8001610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001614:	6453      	str	r3, [r2, #68]	; 0x44
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_PCD_MspInit+0xac>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <NMI_Handler+0x4>

0800163a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <MemManage_Handler+0x4>

08001646 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <UsageFault_Handler+0x4>

08001652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001680:	f000 f934 	bl	80018ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800168c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001690:	f001 fb80 	bl	8002d94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001694:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001698:	f001 fb7c 	bl	8002d94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	e00a      	b.n	80016c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016b2:	f3af 8000 	nop.w
 80016b6:	4601      	mov	r1, r0
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	60ba      	str	r2, [r7, #8]
 80016be:	b2ca      	uxtb	r2, r1
 80016c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3301      	adds	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	dbf0      	blt.n	80016b2 <_read+0x12>
  }

  return len;
 80016d0:	687b      	ldr	r3, [r7, #4]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e009      	b.n	8001700 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	60ba      	str	r2, [r7, #8]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	dbf1      	blt.n	80016ec <_write+0x12>
  }
  return len;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <_close>:

int _close(int file)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800173a:	605a      	str	r2, [r3, #4]
  return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <_lseek>:
  (void)file;
  return 1;
}

int _lseek(int file, int ptr, int dir)
{
 800174a:	b480      	push	{r7}
 800174c:	b085      	sub	sp, #20
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800176c:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <_sbrk+0x5c>)
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <_sbrk+0x60>)
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <_sbrk+0x64>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <_sbrk+0x68>)
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	429a      	cmp	r2, r3
 8001792:	d207      	bcs.n	80017a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001794:	f004 fc0a 	bl	8005fac <__errno>
 8001798:	4603      	mov	r3, r0
 800179a:	220c      	movs	r2, #12
 800179c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	e009      	b.n	80017b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <_sbrk+0x64>)
 80017b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20030000 	.word	0x20030000
 80017c4:	00000400 	.word	0x00000400
 80017c8:	2000093c 	.word	0x2000093c
 80017cc:	20000958 	.word	0x20000958

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <SystemInit+0x20>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <SystemInit+0x20>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800182c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f8:	480d      	ldr	r0, [pc, #52]	; (8001830 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017fa:	490e      	ldr	r1, [pc, #56]	; (8001834 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017fc:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001810:	4c0b      	ldr	r4, [pc, #44]	; (8001840 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800181e:	f7ff ffd7 	bl	80017d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001822:	f004 fbc9 	bl	8005fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001826:	f7fe ffdb 	bl	80007e0 <main>
  bx  lr    
 800182a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800182c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001838:	08007138 	.word	0x08007138
  ldr r2, =_sbss
 800183c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001840:	20000954 	.word	0x20000954

08001844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC_IRQHandler>
	...

08001848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <HAL_Init+0x40>)
 8001852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_Init+0x40>)
 800185e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_Init+0x40>)
 800186a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001870:	2003      	movs	r0, #3
 8001872:	f000 fd5f 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001876:	2000      	movs	r0, #0
 8001878:	f000 f808 	bl	800188c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800187c:	f7ff fc28 	bl	80010d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023c00 	.word	0x40023c00

0800188c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x54>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_InitTick+0x58>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4619      	mov	r1, r3
 800189e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 fd77 	bl	800239e <HAL_SYSTICK_Config>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00e      	b.n	80018d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b0f      	cmp	r3, #15
 80018be:	d80a      	bhi.n	80018d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c0:	2200      	movs	r2, #0
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f000 fd3f 	bl	800234a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018cc:	4a06      	ldr	r2, [pc, #24]	; (80018e8 <HAL_InitTick+0x5c>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e000      	b.n	80018d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000004 	.word	0x20000004
 80018e4:	2000000c 	.word	0x2000000c
 80018e8:	20000008 	.word	0x20000008

080018ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_IncTick+0x20>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x24>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	4a04      	ldr	r2, [pc, #16]	; (8001910 <HAL_IncTick+0x24>)
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	2000000c 	.word	0x2000000c
 8001910:	20000940 	.word	0x20000940

08001914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return uwTick;
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <HAL_GetTick+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000940 	.word	0x20000940

0800192c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff ffee 	bl	8001914 <HAL_GetTick>
 8001938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001944:	d005      	beq.n	8001952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_Delay+0x44>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001952:	bf00      	nop
 8001954:	f7ff ffde 	bl	8001914 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	429a      	cmp	r2, r3
 8001962:	d8f7      	bhi.n	8001954 <HAL_Delay+0x28>
  {
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000000c 	.word	0x2000000c

08001974 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e033      	b.n	80019f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff fbc4 	bl	8001120 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d118      	bne.n	80019e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019ba:	f023 0302 	bic.w	r3, r3, #2
 80019be:	f043 0202 	orr.w	r2, r3, #2
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fae8 	bl	8001f9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f023 0303 	bic.w	r3, r3, #3
 80019da:	f043 0201 	orr.w	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40
 80019e2:	e001      	b.n	80019e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_ADC_Start+0x1a>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e0b2      	b.n	8001b7c <HAL_ADC_Start+0x180>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d018      	beq.n	8001a5e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a3c:	4b52      	ldr	r3, [pc, #328]	; (8001b88 <HAL_ADC_Start+0x18c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a52      	ldr	r2, [pc, #328]	; (8001b8c <HAL_ADC_Start+0x190>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	0c9a      	lsrs	r2, r3, #18
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a50:	e002      	b.n	8001a58 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f9      	bne.n	8001a52 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d17a      	bne.n	8001b62 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aaa:	d106      	bne.n	8001aba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	f023 0206 	bic.w	r2, r3, #6
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ab8:	e002      	b.n	8001ac0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ac8:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <HAL_ADC_Start+0x194>)
 8001aca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ad4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d12a      	bne.n	8001b38 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a2b      	ldr	r2, [pc, #172]	; (8001b94 <HAL_ADC_Start+0x198>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d015      	beq.n	8001b18 <HAL_ADC_Start+0x11c>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a29      	ldr	r2, [pc, #164]	; (8001b98 <HAL_ADC_Start+0x19c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d105      	bne.n	8001b02 <HAL_ADC_Start+0x106>
 8001af6:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <HAL_ADC_Start+0x194>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00a      	beq.n	8001b18 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a25      	ldr	r2, [pc, #148]	; (8001b9c <HAL_ADC_Start+0x1a0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d136      	bne.n	8001b7a <HAL_ADC_Start+0x17e>
 8001b0c:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_ADC_Start+0x194>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d130      	bne.n	8001b7a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d129      	bne.n	8001b7a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	e020      	b.n	8001b7a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <HAL_ADC_Start+0x198>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d11b      	bne.n	8001b7a <HAL_ADC_Start+0x17e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d114      	bne.n	8001b7a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	e00b      	b.n	8001b7a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f043 0210 	orr.w	r2, r3, #16
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f043 0201 	orr.w	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	20000004 	.word	0x20000004
 8001b8c:	431bde83 	.word	0x431bde83
 8001b90:	40012300 	.word	0x40012300
 8001b94:	40012000 	.word	0x40012000
 8001b98:	40012100 	.word	0x40012100
 8001b9c:	40012200 	.word	0x40012200

08001ba0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ADC_Stop+0x16>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e021      	b.n	8001bfa <HAL_ADC_Stop+0x5a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	f043 0201 	orr.w	r2, r3, #1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c22:	d113      	bne.n	8001c4c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c32:	d10b      	bne.n	8001c4c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f043 0220 	orr.w	r2, r3, #32
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e063      	b.n	8001d14 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c4c:	f7ff fe62 	bl	8001914 <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c52:	e021      	b.n	8001c98 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5a:	d01d      	beq.n	8001c98 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <HAL_ADC_PollForConversion+0x6c>
 8001c62:	f7ff fe57 	bl	8001914 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d212      	bcs.n	8001c98 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d00b      	beq.n	8001c98 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f043 0204 	orr.w	r2, r3, #4
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e03d      	b.n	8001d14 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d1d6      	bne.n	8001c54 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f06f 0212 	mvn.w	r2, #18
 8001cae:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d123      	bne.n	8001d12 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d11f      	bne.n	8001d12 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d006      	beq.n	8001cee <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d111      	bne.n	8001d12 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d105      	bne.n	8001d12 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f043 0201 	orr.w	r2, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x1c>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e113      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x244>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b09      	cmp	r3, #9
 8001d62:	d925      	bls.n	8001db0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68d9      	ldr	r1, [r3, #12]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	3b1e      	subs	r3, #30
 8001d7a:	2207      	movs	r2, #7
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43da      	mvns	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	400a      	ands	r2, r1
 8001d88:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68d9      	ldr	r1, [r3, #12]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4403      	add	r3, r0
 8001da2:	3b1e      	subs	r3, #30
 8001da4:	409a      	lsls	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	e022      	b.n	8001df6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6919      	ldr	r1, [r3, #16]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6919      	ldr	r1, [r3, #16]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	4618      	mov	r0, r3
 8001de6:	4603      	mov	r3, r0
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4403      	add	r3, r0
 8001dec:	409a      	lsls	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d824      	bhi.n	8001e48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3b05      	subs	r3, #5
 8001e10:	221f      	movs	r2, #31
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	3b05      	subs	r3, #5
 8001e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	635a      	str	r2, [r3, #52]	; 0x34
 8001e46:	e04c      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b0c      	cmp	r3, #12
 8001e4e:	d824      	bhi.n	8001e9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	3b23      	subs	r3, #35	; 0x23
 8001e62:	221f      	movs	r2, #31
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43da      	mvns	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	400a      	ands	r2, r1
 8001e70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b23      	subs	r3, #35	; 0x23
 8001e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	631a      	str	r2, [r3, #48]	; 0x30
 8001e98:	e023      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3b41      	subs	r3, #65	; 0x41
 8001eac:	221f      	movs	r2, #31
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	400a      	ands	r2, r1
 8001eba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	4618      	mov	r0, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3b41      	subs	r3, #65	; 0x41
 8001ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ee2:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <HAL_ADC_ConfigChannel+0x250>)
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a28      	ldr	r2, [pc, #160]	; (8001f8c <HAL_ADC_ConfigChannel+0x254>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d10f      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x1d8>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b12      	cmp	r3, #18
 8001ef6:	d10b      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <HAL_ADC_ConfigChannel+0x254>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d12b      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x23a>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <HAL_ADC_ConfigChannel+0x258>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d003      	beq.n	8001f2c <HAL_ADC_ConfigChannel+0x1f4>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b11      	cmp	r3, #17
 8001f2a:	d122      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a11      	ldr	r2, [pc, #68]	; (8001f90 <HAL_ADC_ConfigChannel+0x258>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d111      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_ADC_ConfigChannel+0x25c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <HAL_ADC_ConfigChannel+0x260>)
 8001f54:	fba2 2303 	umull	r2, r3, r2, r3
 8001f58:	0c9a      	lsrs	r2, r3, #18
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f64:	e002      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f9      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40012300 	.word	0x40012300
 8001f8c:	40012000 	.word	0x40012000
 8001f90:	10000012 	.word	0x10000012
 8001f94:	20000004 	.word	0x20000004
 8001f98:	431bde83 	.word	0x431bde83

08001f9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fa4:	4b79      	ldr	r3, [pc, #484]	; (800218c <ADC_Init+0x1f0>)
 8001fa6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6859      	ldr	r1, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	021a      	lsls	r2, r3, #8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ff4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002016:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6899      	ldr	r1, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	4a58      	ldr	r2, [pc, #352]	; (8002190 <ADC_Init+0x1f4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d022      	beq.n	800207a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002042:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6899      	ldr	r1, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002064:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6899      	ldr	r1, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	e00f      	b.n	800209a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002088:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002098:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0202 	bic.w	r2, r2, #2
 80020a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6899      	ldr	r1, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	7e1b      	ldrb	r3, [r3, #24]
 80020b4:	005a      	lsls	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01b      	beq.n	8002100 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6859      	ldr	r1, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	3b01      	subs	r3, #1
 80020f4:	035a      	lsls	r2, r3, #13
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	e007      	b.n	8002110 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	3b01      	subs	r3, #1
 800212c:	051a      	lsls	r2, r3, #20
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002144:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6899      	ldr	r1, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002152:	025a      	lsls	r2, r3, #9
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800216a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6899      	ldr	r1, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	029a      	lsls	r2, r3, #10
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	609a      	str	r2, [r3, #8]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40012300 	.word	0x40012300
 8002190:	0f000001 	.word	0x0f000001

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c6:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	60d3      	str	r3, [r2, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db0b      	blt.n	8002222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	4907      	ldr	r1, [pc, #28]	; (8002230 <__NVIC_EnableIRQ+0x38>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	2001      	movs	r0, #1
 800221a:	fa00 f202 	lsl.w	r2, r0, r2
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000e100 	.word	0xe000e100

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	; (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	; (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	; 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff8e 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff29 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800235c:	f7ff ff3e 	bl	80021dc <__NVIC_GetPriorityGrouping>
 8002360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff8e 	bl	8002288 <NVIC_EncodePriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff5d 	bl	8002234 <__NVIC_SetPriority>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff31 	bl	80021f8 <__NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffa2 	bl	80022f0 <SysTick_Config>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e06c      	b.n	80024a4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d106      	bne.n	80023e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2223      	movs	r2, #35	; 0x23
 80023d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7fe fee3 	bl	80011a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	4b31      	ldr	r3, [pc, #196]	; (80024ac <HAL_ETH_Init+0xf4>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	4a30      	ldr	r2, [pc, #192]	; (80024ac <HAL_ETH_Init+0xf4>)
 80023ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f0:	6453      	str	r3, [r2, #68]	; 0x44
 80023f2:	4b2e      	ldr	r3, [pc, #184]	; (80024ac <HAL_ETH_Init+0xf4>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <HAL_ETH_Init+0xf8>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4a2b      	ldr	r2, [pc, #172]	; (80024b0 <HAL_ETH_Init+0xf8>)
 8002404:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002408:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800240a:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <HAL_ETH_Init+0xf8>)
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4927      	ldr	r1, [pc, #156]	; (80024b0 <HAL_ETH_Init+0xf8>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002418:	4b25      	ldr	r3, [pc, #148]	; (80024b0 <HAL_ETH_Init+0xf8>)
 800241a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002432:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002434:	f7ff fa6e 	bl	8001914 <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800243a:	e011      	b.n	8002460 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800243c:	f7ff fa6a 	bl	8001914 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800244a:	d909      	bls.n	8002460 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2204      	movs	r2, #4
 8002450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	22e0      	movs	r2, #224	; 0xe0
 8002458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e021      	b.n	80024a4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1e4      	bne.n	800243c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f958 	bl	8002728 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f9ff 	bl	800287c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fa55 	bl	800292e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	461a      	mov	r2, r3
 800248a:	2100      	movs	r1, #0
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f9bd 	bl	800280c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2210      	movs	r2, #16
 800249e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40013800 	.word	0x40013800

080024b4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4b51      	ldr	r3, [pc, #324]	; (8002610 <ETH_SetMACConfig+0x15c>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	7c1b      	ldrb	r3, [r3, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d102      	bne.n	80024dc <ETH_SetMACConfig+0x28>
 80024d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80024da:	e000      	b.n	80024de <ETH_SetMACConfig+0x2a>
 80024dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	7c5b      	ldrb	r3, [r3, #17]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d102      	bne.n	80024ec <ETH_SetMACConfig+0x38>
 80024e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024ea:	e000      	b.n	80024ee <ETH_SetMACConfig+0x3a>
 80024ec:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024ee:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80024f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	7fdb      	ldrb	r3, [r3, #31]
 80024fa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80024fc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002502:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	7f92      	ldrb	r2, [r2, #30]
 8002508:	2a00      	cmp	r2, #0
 800250a:	d102      	bne.n	8002512 <ETH_SetMACConfig+0x5e>
 800250c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002510:	e000      	b.n	8002514 <ETH_SetMACConfig+0x60>
 8002512:	2200      	movs	r2, #0
                        macconf->Speed |
 8002514:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	7f1b      	ldrb	r3, [r3, #28]
 800251a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800251c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002522:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	791b      	ldrb	r3, [r3, #4]
 8002528:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800252a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002532:	2a00      	cmp	r2, #0
 8002534:	d102      	bne.n	800253c <ETH_SetMACConfig+0x88>
 8002536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800253a:	e000      	b.n	800253e <ETH_SetMACConfig+0x8a>
 800253c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800253e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	7bdb      	ldrb	r3, [r3, #15]
 8002544:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002546:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800254c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002554:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002556:	4313      	orrs	r3, r2
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800256e:	2001      	movs	r0, #1
 8002570:	f7ff f9dc 	bl	800192c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	f64f 7341 	movw	r3, #65345	; 0xff41
 800258a:	4013      	ands	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002592:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800259a:	2a00      	cmp	r2, #0
 800259c:	d101      	bne.n	80025a2 <ETH_SetMACConfig+0xee>
 800259e:	2280      	movs	r2, #128	; 0x80
 80025a0:	e000      	b.n	80025a4 <ETH_SetMACConfig+0xf0>
 80025a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025a4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80025aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80025b2:	2a01      	cmp	r2, #1
 80025b4:	d101      	bne.n	80025ba <ETH_SetMACConfig+0x106>
 80025b6:	2208      	movs	r2, #8
 80025b8:	e000      	b.n	80025bc <ETH_SetMACConfig+0x108>
 80025ba:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80025bc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80025c4:	2a01      	cmp	r2, #1
 80025c6:	d101      	bne.n	80025cc <ETH_SetMACConfig+0x118>
 80025c8:	2204      	movs	r2, #4
 80025ca:	e000      	b.n	80025ce <ETH_SetMACConfig+0x11a>
 80025cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80025ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80025d6:	2a01      	cmp	r2, #1
 80025d8:	d101      	bne.n	80025de <ETH_SetMACConfig+0x12a>
 80025da:	2202      	movs	r2, #2
 80025dc:	e000      	b.n	80025e0 <ETH_SetMACConfig+0x12c>
 80025de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025e0:	4313      	orrs	r3, r2
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025f8:	2001      	movs	r0, #1
 80025fa:	f7ff f997 	bl	800192c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	619a      	str	r2, [r3, #24]
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	ff20810f 	.word	0xff20810f

08002614 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <ETH_SetDMAConfig+0x110>)
 800262e:	4013      	ands	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	7b1b      	ldrb	r3, [r3, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d102      	bne.n	8002640 <ETH_SetDMAConfig+0x2c>
 800263a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800263e:	e000      	b.n	8002642 <ETH_SetDMAConfig+0x2e>
 8002640:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	7b5b      	ldrb	r3, [r3, #13]
 8002646:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002648:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	7f52      	ldrb	r2, [r2, #29]
 800264e:	2a00      	cmp	r2, #0
 8002650:	d102      	bne.n	8002658 <ETH_SetDMAConfig+0x44>
 8002652:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002656:	e000      	b.n	800265a <ETH_SetDMAConfig+0x46>
 8002658:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800265a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	7b9b      	ldrb	r3, [r3, #14]
 8002660:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002662:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002668:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	7f1b      	ldrb	r3, [r3, #28]
 800266e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002670:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	7f9b      	ldrb	r3, [r3, #30]
 8002676:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002678:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800267e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002686:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002688:	4313      	orrs	r3, r2
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002698:	461a      	mov	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026aa:	2001      	movs	r0, #1
 80026ac:	f7ff f93e 	bl	800192c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b8:	461a      	mov	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	791b      	ldrb	r3, [r3, #4]
 80026c2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026c8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80026ce:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80026d4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026dc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80026de:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80026e6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80026ec:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026fa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002708:	2001      	movs	r0, #1
 800270a:	f7ff f90f 	bl	800192c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002716:	461a      	mov	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6013      	str	r3, [r2, #0]
}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	f8de3f23 	.word	0xf8de3f23

08002728 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b0a6      	sub	sp, #152	; 0x98
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002730:	2301      	movs	r3, #1
 8002732:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800273c:	2300      	movs	r3, #0
 800273e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002740:	2300      	movs	r3, #0
 8002742:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002746:	2301      	movs	r3, #1
 8002748:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002752:	2301      	movs	r3, #1
 8002754:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002758:	2300      	movs	r3, #0
 800275a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002764:	2300      	movs	r3, #0
 8002766:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002768:	2300      	movs	r3, #0
 800276a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800276e:	2300      	movs	r3, #0
 8002770:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002772:	2300      	movs	r3, #0
 8002774:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800277e:	2300      	movs	r3, #0
 8002780:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002784:	2300      	movs	r3, #0
 8002786:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800278a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800278e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002790:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002794:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002796:	2300      	movs	r3, #0
 8002798:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800279c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027a0:	4619      	mov	r1, r3
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff fe86 	bl	80024b4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80027a8:	2301      	movs	r3, #1
 80027aa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80027ac:	2301      	movs	r3, #1
 80027ae:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80027b6:	2301      	movs	r3, #1
 80027b8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80027be:	2300      	movs	r3, #0
 80027c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80027ca:	2300      	movs	r3, #0
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80027d4:	2301      	movs	r3, #1
 80027d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80027d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027dc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80027de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027e2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80027e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027e8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80027f8:	f107 0308 	add.w	r3, r7, #8
 80027fc:	4619      	mov	r1, r3
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ff08 	bl	8002614 <ETH_SetDMAConfig>
}
 8002804:	bf00      	nop
 8002806:	3798      	adds	r7, #152	; 0x98
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3305      	adds	r3, #5
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	3204      	adds	r2, #4
 8002824:	7812      	ldrb	r2, [r2, #0]
 8002826:	4313      	orrs	r3, r2
 8002828:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	4b11      	ldr	r3, [pc, #68]	; (8002874 <ETH_MACAddressConfig+0x68>)
 800282e:	4413      	add	r3, r2
 8002830:	461a      	mov	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3303      	adds	r3, #3
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	061a      	lsls	r2, r3, #24
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3302      	adds	r3, #2
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	041b      	lsls	r3, r3, #16
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3301      	adds	r3, #1
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	4313      	orrs	r3, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	7812      	ldrb	r2, [r2, #0]
 8002856:	4313      	orrs	r3, r2
 8002858:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <ETH_MACAddressConfig+0x6c>)
 800285e:	4413      	add	r3, r2
 8002860:	461a      	mov	r2, r3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	6013      	str	r3, [r2, #0]
}
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40028040 	.word	0x40028040
 8002878:	40028044 	.word	0x40028044

0800287c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	e03e      	b.n	8002908 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68d9      	ldr	r1, [r3, #12]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	440b      	add	r3, r1
 800289a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2200      	movs	r2, #0
 80028a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2200      	movs	r2, #0
 80028b2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	3206      	adds	r2, #6
 80028bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d80c      	bhi.n	80028ec <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68d9      	ldr	r1, [r3, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	461a      	mov	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	e004      	b.n	80028f6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	461a      	mov	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3301      	adds	r3, #1
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d9bd      	bls.n	800288a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002920:	611a      	str	r2, [r3, #16]
}
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800292e:	b480      	push	{r7}
 8002930:	b085      	sub	sp, #20
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	e046      	b.n	80029ca <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6919      	ldr	r1, [r3, #16]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	440b      	add	r3, r1
 800294c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2200      	movs	r2, #0
 8002958:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2200      	movs	r2, #0
 8002964:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2200      	movs	r2, #0
 800296a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2200      	movs	r2, #0
 8002970:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002978:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002980:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	3212      	adds	r2, #18
 8002996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d80c      	bhi.n	80029ba <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6919      	ldr	r1, [r3, #16]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	461a      	mov	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	60da      	str	r2, [r3, #12]
 80029b8:	e004      	b.n	80029c4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3301      	adds	r3, #1
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d9b5      	bls.n	800293c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029fa:	60da      	str	r2, [r3, #12]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	; 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	e177      	b.n	8002d14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a24:	2201      	movs	r2, #1
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	f040 8166 	bne.w	8002d0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d005      	beq.n	8002a5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d130      	bne.n	8002abc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	2203      	movs	r2, #3
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a90:	2201      	movs	r2, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 0201 	and.w	r2, r3, #1
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d017      	beq.n	8002af8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d123      	bne.n	8002b4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	08da      	lsrs	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3208      	adds	r2, #8
 8002b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	220f      	movs	r2, #15
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	08da      	lsrs	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3208      	adds	r2, #8
 8002b46:	69b9      	ldr	r1, [r7, #24]
 8002b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	2203      	movs	r2, #3
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0203 	and.w	r2, r3, #3
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80c0 	beq.w	8002d0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b66      	ldr	r3, [pc, #408]	; (8002d2c <HAL_GPIO_Init+0x324>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	4a65      	ldr	r2, [pc, #404]	; (8002d2c <HAL_GPIO_Init+0x324>)
 8002b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b9e:	4b63      	ldr	r3, [pc, #396]	; (8002d2c <HAL_GPIO_Init+0x324>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002baa:	4a61      	ldr	r2, [pc, #388]	; (8002d30 <HAL_GPIO_Init+0x328>)
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	089b      	lsrs	r3, r3, #2
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	220f      	movs	r2, #15
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a58      	ldr	r2, [pc, #352]	; (8002d34 <HAL_GPIO_Init+0x32c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d037      	beq.n	8002c46 <HAL_GPIO_Init+0x23e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a57      	ldr	r2, [pc, #348]	; (8002d38 <HAL_GPIO_Init+0x330>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d031      	beq.n	8002c42 <HAL_GPIO_Init+0x23a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a56      	ldr	r2, [pc, #344]	; (8002d3c <HAL_GPIO_Init+0x334>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d02b      	beq.n	8002c3e <HAL_GPIO_Init+0x236>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a55      	ldr	r2, [pc, #340]	; (8002d40 <HAL_GPIO_Init+0x338>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d025      	beq.n	8002c3a <HAL_GPIO_Init+0x232>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a54      	ldr	r2, [pc, #336]	; (8002d44 <HAL_GPIO_Init+0x33c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01f      	beq.n	8002c36 <HAL_GPIO_Init+0x22e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a53      	ldr	r2, [pc, #332]	; (8002d48 <HAL_GPIO_Init+0x340>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d019      	beq.n	8002c32 <HAL_GPIO_Init+0x22a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a52      	ldr	r2, [pc, #328]	; (8002d4c <HAL_GPIO_Init+0x344>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <HAL_GPIO_Init+0x226>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a51      	ldr	r2, [pc, #324]	; (8002d50 <HAL_GPIO_Init+0x348>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00d      	beq.n	8002c2a <HAL_GPIO_Init+0x222>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a50      	ldr	r2, [pc, #320]	; (8002d54 <HAL_GPIO_Init+0x34c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d007      	beq.n	8002c26 <HAL_GPIO_Init+0x21e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4f      	ldr	r2, [pc, #316]	; (8002d58 <HAL_GPIO_Init+0x350>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <HAL_GPIO_Init+0x21a>
 8002c1e:	2309      	movs	r3, #9
 8002c20:	e012      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c22:	230a      	movs	r3, #10
 8002c24:	e010      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c26:	2308      	movs	r3, #8
 8002c28:	e00e      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c2a:	2307      	movs	r3, #7
 8002c2c:	e00c      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c2e:	2306      	movs	r3, #6
 8002c30:	e00a      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c32:	2305      	movs	r3, #5
 8002c34:	e008      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c36:	2304      	movs	r3, #4
 8002c38:	e006      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e004      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e002      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_GPIO_Init+0x240>
 8002c46:	2300      	movs	r3, #0
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	f002 0203 	and.w	r2, r2, #3
 8002c4e:	0092      	lsls	r2, r2, #2
 8002c50:	4093      	lsls	r3, r2
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c58:	4935      	ldr	r1, [pc, #212]	; (8002d30 <HAL_GPIO_Init+0x328>)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	3302      	adds	r3, #2
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c66:	4b3d      	ldr	r3, [pc, #244]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c8a:	4a34      	ldr	r2, [pc, #208]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c90:	4b32      	ldr	r3, [pc, #200]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cb4:	4a29      	ldr	r2, [pc, #164]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cba:	4b28      	ldr	r3, [pc, #160]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cde:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d08:	4a14      	ldr	r2, [pc, #80]	; (8002d5c <HAL_GPIO_Init+0x354>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3301      	adds	r3, #1
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b0f      	cmp	r3, #15
 8002d18:	f67f ae84 	bls.w	8002a24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	3724      	adds	r7, #36	; 0x24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40013800 	.word	0x40013800
 8002d34:	40020000 	.word	0x40020000
 8002d38:	40020400 	.word	0x40020400
 8002d3c:	40020800 	.word	0x40020800
 8002d40:	40020c00 	.word	0x40020c00
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40021400 	.word	0x40021400
 8002d4c:	40021800 	.word	0x40021800
 8002d50:	40021c00 	.word	0x40021c00
 8002d54:	40022000 	.word	0x40022000
 8002d58:	40022400 	.word	0x40022400
 8002d5c:	40013c00 	.word	0x40013c00

08002d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d70:	787b      	ldrb	r3, [r7, #1]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d7c:	e003      	b.n	8002d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d7e:	887b      	ldrh	r3, [r7, #2]
 8002d80:	041a      	lsls	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	619a      	str	r2, [r3, #24]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d006      	beq.n	8002db8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002daa:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe f95e 	bl	8001074 <HAL_GPIO_EXTI_Callback>
  }
}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40013c00 	.word	0x40013c00

08002dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e12b      	b.n	800302e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fe faa2 	bl	8001334 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2224      	movs	r2, #36	; 0x24
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0201 	bic.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e28:	f001 fb4e 	bl	80044c8 <HAL_RCC_GetPCLK1Freq>
 8002e2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4a81      	ldr	r2, [pc, #516]	; (8003038 <HAL_I2C_Init+0x274>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d807      	bhi.n	8002e48 <HAL_I2C_Init+0x84>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a80      	ldr	r2, [pc, #512]	; (800303c <HAL_I2C_Init+0x278>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bf94      	ite	ls
 8002e40:	2301      	movls	r3, #1
 8002e42:	2300      	movhi	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	e006      	b.n	8002e56 <HAL_I2C_Init+0x92>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4a7d      	ldr	r2, [pc, #500]	; (8003040 <HAL_I2C_Init+0x27c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	bf94      	ite	ls
 8002e50:	2301      	movls	r3, #1
 8002e52:	2300      	movhi	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0e7      	b.n	800302e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4a78      	ldr	r2, [pc, #480]	; (8003044 <HAL_I2C_Init+0x280>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	0c9b      	lsrs	r3, r3, #18
 8002e68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	4a6a      	ldr	r2, [pc, #424]	; (8003038 <HAL_I2C_Init+0x274>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d802      	bhi.n	8002e98 <HAL_I2C_Init+0xd4>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	3301      	adds	r3, #1
 8002e96:	e009      	b.n	8002eac <HAL_I2C_Init+0xe8>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ea2:	4a69      	ldr	r2, [pc, #420]	; (8003048 <HAL_I2C_Init+0x284>)
 8002ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea8:	099b      	lsrs	r3, r3, #6
 8002eaa:	3301      	adds	r3, #1
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ebe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	495c      	ldr	r1, [pc, #368]	; (8003038 <HAL_I2C_Init+0x274>)
 8002ec8:	428b      	cmp	r3, r1
 8002eca:	d819      	bhi.n	8002f00 <HAL_I2C_Init+0x13c>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1e59      	subs	r1, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eda:	1c59      	adds	r1, r3, #1
 8002edc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ee0:	400b      	ands	r3, r1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <HAL_I2C_Init+0x138>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1e59      	subs	r1, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efa:	e051      	b.n	8002fa0 <HAL_I2C_Init+0x1dc>
 8002efc:	2304      	movs	r3, #4
 8002efe:	e04f      	b.n	8002fa0 <HAL_I2C_Init+0x1dc>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d111      	bne.n	8002f2c <HAL_I2C_Init+0x168>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1e58      	subs	r0, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	440b      	add	r3, r1
 8002f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	e012      	b.n	8002f52 <HAL_I2C_Init+0x18e>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1e58      	subs	r0, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6859      	ldr	r1, [r3, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	0099      	lsls	r1, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f42:	3301      	adds	r3, #1
 8002f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bf0c      	ite	eq
 8002f4c:	2301      	moveq	r3, #1
 8002f4e:	2300      	movne	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_I2C_Init+0x196>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e022      	b.n	8002fa0 <HAL_I2C_Init+0x1dc>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10e      	bne.n	8002f80 <HAL_I2C_Init+0x1bc>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1e58      	subs	r0, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6859      	ldr	r1, [r3, #4]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	440b      	add	r3, r1
 8002f70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f7e:	e00f      	b.n	8002fa0 <HAL_I2C_Init+0x1dc>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1e58      	subs	r0, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	0099      	lsls	r1, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	6809      	ldr	r1, [r1, #0]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69da      	ldr	r2, [r3, #28]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6911      	ldr	r1, [r2, #16]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68d2      	ldr	r2, [r2, #12]
 8002fda:	4311      	orrs	r1, r2
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	000186a0 	.word	0x000186a0
 800303c:	001e847f 	.word	0x001e847f
 8003040:	003d08ff 	.word	0x003d08ff
 8003044:	431bde83 	.word	0x431bde83
 8003048:	10624dd3 	.word	0x10624dd3

0800304c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	607a      	str	r2, [r7, #4]
 8003056:	461a      	mov	r2, r3
 8003058:	460b      	mov	r3, r1
 800305a:	817b      	strh	r3, [r7, #10]
 800305c:	4613      	mov	r3, r2
 800305e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003060:	f7fe fc58 	bl	8001914 <HAL_GetTick>
 8003064:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b20      	cmp	r3, #32
 8003070:	f040 80e0 	bne.w	8003234 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2319      	movs	r3, #25
 800307a:	2201      	movs	r2, #1
 800307c:	4970      	ldr	r1, [pc, #448]	; (8003240 <HAL_I2C_Master_Transmit+0x1f4>)
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fa92 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800308a:	2302      	movs	r3, #2
 800308c:	e0d3      	b.n	8003236 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_I2C_Master_Transmit+0x50>
 8003098:	2302      	movs	r3, #2
 800309a:	e0cc      	b.n	8003236 <HAL_I2C_Master_Transmit+0x1ea>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d007      	beq.n	80030c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f042 0201 	orr.w	r2, r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2221      	movs	r2, #33	; 0x21
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2210      	movs	r2, #16
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	893a      	ldrh	r2, [r7, #8]
 80030f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4a50      	ldr	r2, [pc, #320]	; (8003244 <HAL_I2C_Master_Transmit+0x1f8>)
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003104:	8979      	ldrh	r1, [r7, #10]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	6a3a      	ldr	r2, [r7, #32]
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f9ca 	bl	80034a4 <I2C_MasterRequestWrite>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e08d      	b.n	8003236 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800311a:	2300      	movs	r3, #0
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003130:	e066      	b.n	8003200 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	6a39      	ldr	r1, [r7, #32]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fb0c 	bl	8003754 <I2C_WaitOnTXEFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00d      	beq.n	800315e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	2b04      	cmp	r3, #4
 8003148:	d107      	bne.n	800315a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003158:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e06b      	b.n	8003236 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	781a      	ldrb	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b04      	cmp	r3, #4
 800319a:	d11b      	bne.n	80031d4 <HAL_I2C_Master_Transmit+0x188>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d017      	beq.n	80031d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	781a      	ldrb	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	6a39      	ldr	r1, [r7, #32]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fafc 	bl	80037d6 <I2C_WaitOnBTFFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00d      	beq.n	8003200 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d107      	bne.n	80031fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e01a      	b.n	8003236 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003204:	2b00      	cmp	r3, #0
 8003206:	d194      	bne.n	8003132 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	e000      	b.n	8003236 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	00100002 	.word	0x00100002
 8003244:	ffff0000 	.word	0xffff0000

08003248 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08a      	sub	sp, #40	; 0x28
 800324c:	af02      	add	r7, sp, #8
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	460b      	mov	r3, r1
 8003256:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003258:	f7fe fb5c 	bl	8001914 <HAL_GetTick>
 800325c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b20      	cmp	r3, #32
 800326c:	f040 8111 	bne.w	8003492 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2319      	movs	r3, #25
 8003276:	2201      	movs	r2, #1
 8003278:	4988      	ldr	r1, [pc, #544]	; (800349c <HAL_I2C_IsDeviceReady+0x254>)
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f994 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003286:	2302      	movs	r3, #2
 8003288:	e104      	b.n	8003494 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_I2C_IsDeviceReady+0x50>
 8003294:	2302      	movs	r3, #2
 8003296:	e0fd      	b.n	8003494 <HAL_I2C_IsDeviceReady+0x24c>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d007      	beq.n	80032be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2224      	movs	r2, #36	; 0x24
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4a70      	ldr	r2, [pc, #448]	; (80034a0 <HAL_I2C_IsDeviceReady+0x258>)
 80032e0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f952 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00d      	beq.n	8003326 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003318:	d103      	bne.n	8003322 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e0b6      	b.n	8003494 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003326:	897b      	ldrh	r3, [r7, #10]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003334:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003336:	f7fe faed 	bl	8001914 <HAL_GetTick>
 800333a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b02      	cmp	r3, #2
 8003348:	bf0c      	ite	eq
 800334a:	2301      	moveq	r3, #1
 800334c:	2300      	movne	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003360:	bf0c      	ite	eq
 8003362:	2301      	moveq	r3, #1
 8003364:	2300      	movne	r3, #0
 8003366:	b2db      	uxtb	r3, r3
 8003368:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800336a:	e025      	b.n	80033b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800336c:	f7fe fad2 	bl	8001914 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d302      	bcc.n	8003382 <HAL_I2C_IsDeviceReady+0x13a>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d103      	bne.n	800338a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	22a0      	movs	r2, #160	; 0xa0
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b02      	cmp	r3, #2
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2ba0      	cmp	r3, #160	; 0xa0
 80033c2:	d005      	beq.n	80033d0 <HAL_I2C_IsDeviceReady+0x188>
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d102      	bne.n	80033d0 <HAL_I2C_IsDeviceReady+0x188>
 80033ca:	7dbb      	ldrb	r3, [r7, #22]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0cd      	beq.n	800336c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d129      	bne.n	800343a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	2319      	movs	r3, #25
 8003412:	2201      	movs	r2, #1
 8003414:	4921      	ldr	r1, [pc, #132]	; (800349c <HAL_I2C_IsDeviceReady+0x254>)
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f8c6 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e036      	b.n	8003494 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	e02c      	b.n	8003494 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003448:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003452:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	2319      	movs	r3, #25
 800345a:	2201      	movs	r2, #1
 800345c:	490f      	ldr	r1, [pc, #60]	; (800349c <HAL_I2C_IsDeviceReady+0x254>)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f8a2 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e012      	b.n	8003494 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	3301      	adds	r3, #1
 8003472:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	f4ff af32 	bcc.w	80032e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003492:	2302      	movs	r3, #2
  }
}
 8003494:	4618      	mov	r0, r3
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	00100002 	.word	0x00100002
 80034a0:	ffff0000 	.word	0xffff0000

080034a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	460b      	mov	r3, r1
 80034b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d006      	beq.n	80034ce <I2C_MasterRequestWrite+0x2a>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d003      	beq.n	80034ce <I2C_MasterRequestWrite+0x2a>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034cc:	d108      	bne.n	80034e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e00b      	b.n	80034f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	2b12      	cmp	r3, #18
 80034e6:	d107      	bne.n	80034f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f84f 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00d      	beq.n	800352c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351e:	d103      	bne.n	8003528 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003526:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e035      	b.n	8003598 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003534:	d108      	bne.n	8003548 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003536:	897b      	ldrh	r3, [r7, #10]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003544:	611a      	str	r2, [r3, #16]
 8003546:	e01b      	b.n	8003580 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003548:	897b      	ldrh	r3, [r7, #10]
 800354a:	11db      	asrs	r3, r3, #7
 800354c:	b2db      	uxtb	r3, r3
 800354e:	f003 0306 	and.w	r3, r3, #6
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f063 030f 	orn	r3, r3, #15
 8003558:	b2da      	uxtb	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	490e      	ldr	r1, [pc, #56]	; (80035a0 <I2C_MasterRequestWrite+0xfc>)
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f875 	bl	8003656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e010      	b.n	8003598 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003576:	897b      	ldrh	r3, [r7, #10]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4907      	ldr	r1, [pc, #28]	; (80035a4 <I2C_MasterRequestWrite+0x100>)
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f865 	bl	8003656 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	00010008 	.word	0x00010008
 80035a4:	00010002 	.word	0x00010002

080035a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b8:	e025      	b.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d021      	beq.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c2:	f7fe f9a7 	bl	8001914 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d302      	bcc.n	80035d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d116      	bne.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f043 0220 	orr.w	r2, r3, #32
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e023      	b.n	800364e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d10d      	bne.n	800362c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	43da      	mvns	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4013      	ands	r3, r2
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	bf0c      	ite	eq
 8003622:	2301      	moveq	r3, #1
 8003624:	2300      	movne	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	e00c      	b.n	8003646 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	43da      	mvns	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4013      	ands	r3, r2
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf0c      	ite	eq
 800363e:	2301      	moveq	r3, #1
 8003640:	2300      	movne	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	429a      	cmp	r2, r3
 800364a:	d0b6      	beq.n	80035ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
 8003662:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003664:	e051      	b.n	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003674:	d123      	bne.n	80036be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003684:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800368e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f043 0204 	orr.w	r2, r3, #4
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e046      	b.n	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c4:	d021      	beq.n	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c6:	f7fe f925 	bl	8001914 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d302      	bcc.n	80036dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d116      	bne.n	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e020      	b.n	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	d10c      	bne.n	800372e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	43da      	mvns	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4013      	ands	r3, r2
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	e00b      	b.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	43da      	mvns	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4013      	ands	r3, r2
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d18d      	bne.n	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003760:	e02d      	b.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f878 	bl	8003858 <I2C_IsAcknowledgeFailed>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e02d      	b.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d021      	beq.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fe f8cb 	bl	8001914 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d116      	bne.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f043 0220 	orr.w	r2, r3, #32
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e007      	b.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c8:	2b80      	cmp	r3, #128	; 0x80
 80037ca:	d1ca      	bne.n	8003762 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037e2:	e02d      	b.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f837 	bl	8003858 <I2C_IsAcknowledgeFailed>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e02d      	b.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fa:	d021      	beq.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fc:	f7fe f88a 	bl	8001914 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	429a      	cmp	r2, r3
 800380a:	d302      	bcc.n	8003812 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d116      	bne.n	8003840 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	f043 0220 	orr.w	r2, r3, #32
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e007      	b.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b04      	cmp	r3, #4
 800384c:	d1ca      	bne.n	80037e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386e:	d11b      	bne.n	80038a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003878:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	f043 0204 	orr.w	r2, r3, #4
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d129      	bne.n	8003920 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2224      	movs	r2, #36	; 0x24
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0210 	bic.w	r2, r2, #16
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	e000      	b.n	8003922 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003920:	2302      	movs	r3, #2
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800392e:	b480      	push	{r7}
 8003930:	b085      	sub	sp, #20
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b20      	cmp	r3, #32
 8003946:	d12a      	bne.n	800399e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	; 0x24
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003968:	89fb      	ldrh	r3, [r7, #14]
 800396a:	f023 030f 	bic.w	r3, r3, #15
 800396e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b29a      	uxth	r2, r3
 8003974:	89fb      	ldrh	r3, [r7, #14]
 8003976:	4313      	orrs	r3, r2
 8003978:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	89fa      	ldrh	r2, [r7, #14]
 8003980:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0201 	orr.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e000      	b.n	80039a0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800399e:	2302      	movs	r3, #2
  }
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ae:	b08f      	sub	sp, #60	; 0x3c
 80039b0:	af0a      	add	r7, sp, #40	; 0x28
 80039b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e10f      	b.n	8003bde <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d106      	bne.n	80039de <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7fd fdd1 	bl	8001580 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2203      	movs	r2, #3
 80039e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d102      	bne.n	80039f8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f002 f834 	bl	8005a6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	687e      	ldr	r6, [r7, #4]
 8003a0a:	466d      	mov	r5, sp
 8003a0c:	f106 0410 	add.w	r4, r6, #16
 8003a10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a20:	1d33      	adds	r3, r6, #4
 8003a22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a24:	6838      	ldr	r0, [r7, #0]
 8003a26:	f001 ffbf 	bl	80059a8 <USB_CoreInit>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0d0      	b.n	8003bde <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2100      	movs	r1, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f002 f822 	bl	8005a8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]
 8003a4c:	e04a      	b.n	8003ae4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a4e:	7bfa      	ldrb	r2, [r7, #15]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	333d      	adds	r3, #61	; 0x3d
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	333c      	adds	r3, #60	; 0x3c
 8003a72:	7bfa      	ldrb	r2, [r7, #15]
 8003a74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a76:	7bfa      	ldrb	r2, [r7, #15]
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	b298      	uxth	r0, r3
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	3344      	adds	r3, #68	; 0x44
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a8e:	7bfa      	ldrb	r2, [r7, #15]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	3340      	adds	r3, #64	; 0x40
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003aa2:	7bfa      	ldrb	r2, [r7, #15]
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	3348      	adds	r3, #72	; 0x48
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ab6:	7bfa      	ldrb	r2, [r7, #15]
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	334c      	adds	r3, #76	; 0x4c
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003aca:	7bfa      	ldrb	r2, [r7, #15]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	3354      	adds	r3, #84	; 0x54
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
 8003ae4:	7bfa      	ldrb	r2, [r7, #15]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d3af      	bcc.n	8003a4e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
 8003af2:	e044      	b.n	8003b7e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003af4:	7bfa      	ldrb	r2, [r7, #15]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003b06:	2200      	movs	r2, #0
 8003b08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b0a:	7bfa      	ldrb	r2, [r7, #15]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b20:	7bfa      	ldrb	r2, [r7, #15]
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b36:	7bfa      	ldrb	r2, [r7, #15]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b4c:	7bfa      	ldrb	r2, [r7, #15]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b62:	7bfa      	ldrb	r2, [r7, #15]
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	4613      	mov	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
 8003b7e:	7bfa      	ldrb	r2, [r7, #15]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d3b5      	bcc.n	8003af4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	603b      	str	r3, [r7, #0]
 8003b8e:	687e      	ldr	r6, [r7, #4]
 8003b90:	466d      	mov	r5, sp
 8003b92:	f106 0410 	add.w	r4, r6, #16
 8003b96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ba2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ba6:	1d33      	adds	r3, r6, #4
 8003ba8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003baa:	6838      	ldr	r0, [r7, #0]
 8003bac:	f001 ffba 	bl	8005b24 <USB_DevInit>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e00d      	b.n	8003bde <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f002 f985 	bl	8005ee6 <USB_DevDisconnect>

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e267      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d075      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c06:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d00c      	beq.n	8003c2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c12:	4b85      	ldr	r3, [pc, #532]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d112      	bne.n	8003c44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c1e:	4b82      	ldr	r3, [pc, #520]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c2a:	d10b      	bne.n	8003c44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2c:	4b7e      	ldr	r3, [pc, #504]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d05b      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x108>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d157      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e242      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4c:	d106      	bne.n	8003c5c <HAL_RCC_OscConfig+0x74>
 8003c4e:	4b76      	ldr	r3, [pc, #472]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a75      	ldr	r2, [pc, #468]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	e01d      	b.n	8003c98 <HAL_RCC_OscConfig+0xb0>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x98>
 8003c66:	4b70      	ldr	r3, [pc, #448]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a6f      	ldr	r2, [pc, #444]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	4b6d      	ldr	r3, [pc, #436]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a6c      	ldr	r2, [pc, #432]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	e00b      	b.n	8003c98 <HAL_RCC_OscConfig+0xb0>
 8003c80:	4b69      	ldr	r3, [pc, #420]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a68      	ldr	r2, [pc, #416]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	4b66      	ldr	r3, [pc, #408]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a65      	ldr	r2, [pc, #404]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d013      	beq.n	8003cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca0:	f7fd fe38 	bl	8001914 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca8:	f7fd fe34 	bl	8001914 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b64      	cmp	r3, #100	; 0x64
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e207      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	4b5b      	ldr	r3, [pc, #364]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0xc0>
 8003cc6:	e014      	b.n	8003cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fd fe24 	bl	8001914 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd0:	f7fd fe20 	bl	8001914 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	; 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e1f3      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce2:	4b51      	ldr	r3, [pc, #324]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0xe8>
 8003cee:	e000      	b.n	8003cf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d063      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cfe:	4b4a      	ldr	r3, [pc, #296]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00b      	beq.n	8003d22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0a:	4b47      	ldr	r3, [pc, #284]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d11c      	bne.n	8003d50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b44      	ldr	r3, [pc, #272]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d116      	bne.n	8003d50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d22:	4b41      	ldr	r3, [pc, #260]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <HAL_RCC_OscConfig+0x152>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d001      	beq.n	8003d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e1c7      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3a:	4b3b      	ldr	r3, [pc, #236]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4937      	ldr	r1, [pc, #220]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4e:	e03a      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d020      	beq.n	8003d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d58:	4b34      	ldr	r3, [pc, #208]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5e:	f7fd fdd9 	bl	8001914 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d66:	f7fd fdd5 	bl	8001914 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e1a8      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d78:	4b2b      	ldr	r3, [pc, #172]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d84:	4b28      	ldr	r3, [pc, #160]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4925      	ldr	r1, [pc, #148]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	600b      	str	r3, [r1, #0]
 8003d98:	e015      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d9a:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <HAL_RCC_OscConfig+0x244>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fd fdb8 	bl	8001914 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da8:	f7fd fdb4 	bl	8001914 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e187      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dba:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d036      	beq.n	8003e40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d016      	beq.n	8003e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dda:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <HAL_RCC_OscConfig+0x248>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de0:	f7fd fd98 	bl	8001914 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de8:	f7fd fd94 	bl	8001914 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e167      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x200>
 8003e06:	e01b      	b.n	8003e40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e08:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <HAL_RCC_OscConfig+0x248>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0e:	f7fd fd81 	bl	8001914 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e14:	e00e      	b.n	8003e34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e16:	f7fd fd7d 	bl	8001914 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d907      	bls.n	8003e34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e150      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	42470000 	.word	0x42470000
 8003e30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e34:	4b88      	ldr	r3, [pc, #544]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1ea      	bne.n	8003e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8097 	beq.w	8003f7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e52:	4b81      	ldr	r3, [pc, #516]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10f      	bne.n	8003e7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	4b7d      	ldr	r3, [pc, #500]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4a7c      	ldr	r2, [pc, #496]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6e:	4b7a      	ldr	r3, [pc, #488]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7e:	4b77      	ldr	r3, [pc, #476]	; (800405c <HAL_RCC_OscConfig+0x474>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d118      	bne.n	8003ebc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e8a:	4b74      	ldr	r3, [pc, #464]	; (800405c <HAL_RCC_OscConfig+0x474>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a73      	ldr	r2, [pc, #460]	; (800405c <HAL_RCC_OscConfig+0x474>)
 8003e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e96:	f7fd fd3d 	bl	8001914 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9e:	f7fd fd39 	bl	8001914 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e10c      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb0:	4b6a      	ldr	r3, [pc, #424]	; (800405c <HAL_RCC_OscConfig+0x474>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d106      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x2ea>
 8003ec4:	4b64      	ldr	r3, [pc, #400]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	4a63      	ldr	r2, [pc, #396]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed0:	e01c      	b.n	8003f0c <HAL_RCC_OscConfig+0x324>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b05      	cmp	r3, #5
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x30c>
 8003eda:	4b5f      	ldr	r3, [pc, #380]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	4a5e      	ldr	r2, [pc, #376]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	f043 0304 	orr.w	r3, r3, #4
 8003ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee6:	4b5c      	ldr	r3, [pc, #368]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	4a5b      	ldr	r2, [pc, #364]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef2:	e00b      	b.n	8003f0c <HAL_RCC_OscConfig+0x324>
 8003ef4:	4b58      	ldr	r3, [pc, #352]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	4a57      	ldr	r2, [pc, #348]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70
 8003f00:	4b55      	ldr	r3, [pc, #340]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	4a54      	ldr	r2, [pc, #336]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003f06:	f023 0304 	bic.w	r3, r3, #4
 8003f0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d015      	beq.n	8003f40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f14:	f7fd fcfe 	bl	8001914 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f1c:	f7fd fcfa 	bl	8001914 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e0cb      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f32:	4b49      	ldr	r3, [pc, #292]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0ee      	beq.n	8003f1c <HAL_RCC_OscConfig+0x334>
 8003f3e:	e014      	b.n	8003f6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f40:	f7fd fce8 	bl	8001914 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f48:	f7fd fce4 	bl	8001914 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e0b5      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f5e:	4b3e      	ldr	r3, [pc, #248]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1ee      	bne.n	8003f48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d105      	bne.n	8003f7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f70:	4b39      	ldr	r3, [pc, #228]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	4a38      	ldr	r2, [pc, #224]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80a1 	beq.w	80040c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f86:	4b34      	ldr	r3, [pc, #208]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d05c      	beq.n	800404c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d141      	bne.n	800401e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9a:	4b31      	ldr	r3, [pc, #196]	; (8004060 <HAL_RCC_OscConfig+0x478>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa0:	f7fd fcb8 	bl	8001914 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa8:	f7fd fcb4 	bl	8001914 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e087      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fba:	4b27      	ldr	r3, [pc, #156]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	019b      	lsls	r3, r3, #6
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	085b      	lsrs	r3, r3, #1
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	041b      	lsls	r3, r3, #16
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	061b      	lsls	r3, r3, #24
 8003fea:	491b      	ldr	r1, [pc, #108]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <HAL_RCC_OscConfig+0x478>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff6:	f7fd fc8d 	bl	8001914 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffe:	f7fd fc89 	bl	8001914 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e05c      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004010:	4b11      	ldr	r3, [pc, #68]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0f0      	beq.n	8003ffe <HAL_RCC_OscConfig+0x416>
 800401c:	e054      	b.n	80040c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401e:	4b10      	ldr	r3, [pc, #64]	; (8004060 <HAL_RCC_OscConfig+0x478>)
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004024:	f7fd fc76 	bl	8001914 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402c:	f7fd fc72 	bl	8001914 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e045      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_RCC_OscConfig+0x470>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0x444>
 800404a:	e03d      	b.n	80040c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d107      	bne.n	8004064 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e038      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
 8004058:	40023800 	.word	0x40023800
 800405c:	40007000 	.word	0x40007000
 8004060:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004064:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <HAL_RCC_OscConfig+0x4ec>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d028      	beq.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800407c:	429a      	cmp	r2, r3
 800407e:	d121      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d11a      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004094:	4013      	ands	r3, r2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800409a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800409c:	4293      	cmp	r3, r2
 800409e:	d111      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040aa:	085b      	lsrs	r3, r3, #1
 80040ac:	3b01      	subs	r3, #1
 80040ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d107      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40023800 	.word	0x40023800

080040d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0cc      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040ec:	4b68      	ldr	r3, [pc, #416]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d90c      	bls.n	8004114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fa:	4b65      	ldr	r3, [pc, #404]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004102:	4b63      	ldr	r3, [pc, #396]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0b8      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d020      	beq.n	8004162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800412c:	4b59      	ldr	r3, [pc, #356]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a58      	ldr	r2, [pc, #352]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004144:	4b53      	ldr	r3, [pc, #332]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	4a52      	ldr	r2, [pc, #328]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800414e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004150:	4b50      	ldr	r3, [pc, #320]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	494d      	ldr	r1, [pc, #308]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d044      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d107      	bne.n	8004186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004176:	4b47      	ldr	r3, [pc, #284]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d119      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e07f      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d003      	beq.n	8004196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004192:	2b03      	cmp	r3, #3
 8004194:	d107      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004196:	4b3f      	ldr	r3, [pc, #252]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d109      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e06f      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a6:	4b3b      	ldr	r3, [pc, #236]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e067      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041b6:	4b37      	ldr	r3, [pc, #220]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f023 0203 	bic.w	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4934      	ldr	r1, [pc, #208]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041c8:	f7fd fba4 	bl	8001914 <HAL_GetTick>
 80041cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d0:	f7fd fba0 	bl	8001914 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	; 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e04f      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e6:	4b2b      	ldr	r3, [pc, #172]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 020c 	and.w	r2, r3, #12
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d1eb      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f8:	4b25      	ldr	r3, [pc, #148]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d20c      	bcs.n	8004220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004206:	4b22      	ldr	r3, [pc, #136]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	4b20      	ldr	r3, [pc, #128]	; (8004290 <HAL_RCC_ClockConfig+0x1b8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e032      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800422c:	4b19      	ldr	r3, [pc, #100]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4916      	ldr	r1, [pc, #88]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800424a:	4b12      	ldr	r3, [pc, #72]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	490e      	ldr	r1, [pc, #56]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	4313      	orrs	r3, r2
 800425c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800425e:	f000 f821 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 8004262:	4602      	mov	r2, r0
 8004264:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	490a      	ldr	r1, [pc, #40]	; (8004298 <HAL_RCC_ClockConfig+0x1c0>)
 8004270:	5ccb      	ldrb	r3, [r1, r3]
 8004272:	fa22 f303 	lsr.w	r3, r2, r3
 8004276:	4a09      	ldr	r2, [pc, #36]	; (800429c <HAL_RCC_ClockConfig+0x1c4>)
 8004278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800427a:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <HAL_RCC_ClockConfig+0x1c8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f7fd fb04 	bl	800188c <HAL_InitTick>

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40023c00 	.word	0x40023c00
 8004294:	40023800 	.word	0x40023800
 8004298:	08007078 	.word	0x08007078
 800429c:	20000004 	.word	0x20000004
 80042a0:	20000008 	.word	0x20000008

080042a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042a8:	b094      	sub	sp, #80	; 0x50
 80042aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	647b      	str	r3, [r7, #68]	; 0x44
 80042b0:	2300      	movs	r3, #0
 80042b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b4:	2300      	movs	r3, #0
 80042b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042bc:	4b79      	ldr	r3, [pc, #484]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 030c 	and.w	r3, r3, #12
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d00d      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x40>
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	f200 80e1 	bhi.w	8004490 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0x34>
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d003      	beq.n	80042de <HAL_RCC_GetSysClockFreq+0x3a>
 80042d6:	e0db      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042d8:	4b73      	ldr	r3, [pc, #460]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80042da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042dc:	e0db      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042de:	4b73      	ldr	r3, [pc, #460]	; (80044ac <HAL_RCC_GetSysClockFreq+0x208>)
 80042e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042e2:	e0d8      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042e4:	4b6f      	ldr	r3, [pc, #444]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ee:	4b6d      	ldr	r3, [pc, #436]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d063      	beq.n	80043c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042fa:	4b6a      	ldr	r3, [pc, #424]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	099b      	lsrs	r3, r3, #6
 8004300:	2200      	movs	r2, #0
 8004302:	63bb      	str	r3, [r7, #56]	; 0x38
 8004304:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430c:	633b      	str	r3, [r7, #48]	; 0x30
 800430e:	2300      	movs	r3, #0
 8004310:	637b      	str	r3, [r7, #52]	; 0x34
 8004312:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004316:	4622      	mov	r2, r4
 8004318:	462b      	mov	r3, r5
 800431a:	f04f 0000 	mov.w	r0, #0
 800431e:	f04f 0100 	mov.w	r1, #0
 8004322:	0159      	lsls	r1, r3, #5
 8004324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004328:	0150      	lsls	r0, r2, #5
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4621      	mov	r1, r4
 8004330:	1a51      	subs	r1, r2, r1
 8004332:	6139      	str	r1, [r7, #16]
 8004334:	4629      	mov	r1, r5
 8004336:	eb63 0301 	sbc.w	r3, r3, r1
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004348:	4659      	mov	r1, fp
 800434a:	018b      	lsls	r3, r1, #6
 800434c:	4651      	mov	r1, sl
 800434e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004352:	4651      	mov	r1, sl
 8004354:	018a      	lsls	r2, r1, #6
 8004356:	4651      	mov	r1, sl
 8004358:	ebb2 0801 	subs.w	r8, r2, r1
 800435c:	4659      	mov	r1, fp
 800435e:	eb63 0901 	sbc.w	r9, r3, r1
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800436e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004376:	4690      	mov	r8, r2
 8004378:	4699      	mov	r9, r3
 800437a:	4623      	mov	r3, r4
 800437c:	eb18 0303 	adds.w	r3, r8, r3
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	462b      	mov	r3, r5
 8004384:	eb49 0303 	adc.w	r3, r9, r3
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004396:	4629      	mov	r1, r5
 8004398:	024b      	lsls	r3, r1, #9
 800439a:	4621      	mov	r1, r4
 800439c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043a0:	4621      	mov	r1, r4
 80043a2:	024a      	lsls	r2, r1, #9
 80043a4:	4610      	mov	r0, r2
 80043a6:	4619      	mov	r1, r3
 80043a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043aa:	2200      	movs	r2, #0
 80043ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043b4:	f7fb ff74 	bl	80002a0 <__aeabi_uldivmod>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4613      	mov	r3, r2
 80043be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c0:	e058      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c2:	4b38      	ldr	r3, [pc, #224]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	099b      	lsrs	r3, r3, #6
 80043c8:	2200      	movs	r2, #0
 80043ca:	4618      	mov	r0, r3
 80043cc:	4611      	mov	r1, r2
 80043ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043d2:	623b      	str	r3, [r7, #32]
 80043d4:	2300      	movs	r3, #0
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
 80043d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043dc:	4642      	mov	r2, r8
 80043de:	464b      	mov	r3, r9
 80043e0:	f04f 0000 	mov.w	r0, #0
 80043e4:	f04f 0100 	mov.w	r1, #0
 80043e8:	0159      	lsls	r1, r3, #5
 80043ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ee:	0150      	lsls	r0, r2, #5
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4641      	mov	r1, r8
 80043f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80043fa:	4649      	mov	r1, r9
 80043fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800440c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004410:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004414:	ebb2 040a 	subs.w	r4, r2, sl
 8004418:	eb63 050b 	sbc.w	r5, r3, fp
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	00eb      	lsls	r3, r5, #3
 8004426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800442a:	00e2      	lsls	r2, r4, #3
 800442c:	4614      	mov	r4, r2
 800442e:	461d      	mov	r5, r3
 8004430:	4643      	mov	r3, r8
 8004432:	18e3      	adds	r3, r4, r3
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	464b      	mov	r3, r9
 8004438:	eb45 0303 	adc.w	r3, r5, r3
 800443c:	607b      	str	r3, [r7, #4]
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	e9d7 4500 	ldrd	r4, r5, [r7]
 800444a:	4629      	mov	r1, r5
 800444c:	028b      	lsls	r3, r1, #10
 800444e:	4621      	mov	r1, r4
 8004450:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004454:	4621      	mov	r1, r4
 8004456:	028a      	lsls	r2, r1, #10
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800445e:	2200      	movs	r2, #0
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	61fa      	str	r2, [r7, #28]
 8004464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004468:	f7fb ff1a 	bl	80002a0 <__aeabi_uldivmod>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4613      	mov	r3, r2
 8004472:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	0c1b      	lsrs	r3, r3, #16
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	3301      	adds	r3, #1
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800448e:	e002      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004490:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004492:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004498:	4618      	mov	r0, r3
 800449a:	3750      	adds	r7, #80	; 0x50
 800449c:	46bd      	mov	sp, r7
 800449e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044a2:	bf00      	nop
 80044a4:	40023800 	.word	0x40023800
 80044a8:	00f42400 	.word	0x00f42400
 80044ac:	007a1200 	.word	0x007a1200

080044b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044b4:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044b6:	681b      	ldr	r3, [r3, #0]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20000004 	.word	0x20000004

080044c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044cc:	f7ff fff0 	bl	80044b0 <HAL_RCC_GetHCLKFreq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	0a9b      	lsrs	r3, r3, #10
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	4903      	ldr	r1, [pc, #12]	; (80044ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80044de:	5ccb      	ldrb	r3, [r1, r3]
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40023800 	.word	0x40023800
 80044ec:	08007088 	.word	0x08007088

080044f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044f4:	f7ff ffdc 	bl	80044b0 <HAL_RCC_GetHCLKFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	0b5b      	lsrs	r3, r3, #13
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4903      	ldr	r1, [pc, #12]	; (8004514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800450c:	4618      	mov	r0, r3
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40023800 	.word	0x40023800
 8004514:	08007088 	.word	0x08007088

08004518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e041      	b.n	80045ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fc ff40 	bl	80013c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3304      	adds	r3, #4
 8004554:	4619      	mov	r1, r3
 8004556:	4610      	mov	r0, r2
 8004558:	f000 fad8 	bl	8004b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e041      	b.n	800464c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d106      	bne.n	80045e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f839 	bl	8004654 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2202      	movs	r2, #2
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3304      	adds	r3, #4
 80045f2:	4619      	mov	r1, r3
 80045f4:	4610      	mov	r0, r2
 80045f6:	f000 fa89 	bl	8004b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d109      	bne.n	800468c <HAL_TIM_PWM_Start+0x24>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	bf14      	ite	ne
 8004684:	2301      	movne	r3, #1
 8004686:	2300      	moveq	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	e022      	b.n	80046d2 <HAL_TIM_PWM_Start+0x6a>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b04      	cmp	r3, #4
 8004690:	d109      	bne.n	80046a6 <HAL_TIM_PWM_Start+0x3e>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b01      	cmp	r3, #1
 800469c:	bf14      	ite	ne
 800469e:	2301      	movne	r3, #1
 80046a0:	2300      	moveq	r3, #0
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	e015      	b.n	80046d2 <HAL_TIM_PWM_Start+0x6a>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d109      	bne.n	80046c0 <HAL_TIM_PWM_Start+0x58>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	bf14      	ite	ne
 80046b8:	2301      	movne	r3, #1
 80046ba:	2300      	moveq	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	e008      	b.n	80046d2 <HAL_TIM_PWM_Start+0x6a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	bf14      	ite	ne
 80046cc:	2301      	movne	r3, #1
 80046ce:	2300      	moveq	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e07c      	b.n	80047d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <HAL_TIM_PWM_Start+0x82>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046e8:	e013      	b.n	8004712 <HAL_TIM_PWM_Start+0xaa>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d104      	bne.n	80046fa <HAL_TIM_PWM_Start+0x92>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f8:	e00b      	b.n	8004712 <HAL_TIM_PWM_Start+0xaa>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d104      	bne.n	800470a <HAL_TIM_PWM_Start+0xa2>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004708:	e003      	b.n	8004712 <HAL_TIM_PWM_Start+0xaa>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2201      	movs	r2, #1
 8004718:	6839      	ldr	r1, [r7, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fce0 	bl	80050e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a2d      	ldr	r2, [pc, #180]	; (80047dc <HAL_TIM_PWM_Start+0x174>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d004      	beq.n	8004734 <HAL_TIM_PWM_Start+0xcc>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a2c      	ldr	r2, [pc, #176]	; (80047e0 <HAL_TIM_PWM_Start+0x178>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d101      	bne.n	8004738 <HAL_TIM_PWM_Start+0xd0>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <HAL_TIM_PWM_Start+0xd2>
 8004738:	2300      	movs	r3, #0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800474c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a22      	ldr	r2, [pc, #136]	; (80047dc <HAL_TIM_PWM_Start+0x174>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d022      	beq.n	800479e <HAL_TIM_PWM_Start+0x136>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004760:	d01d      	beq.n	800479e <HAL_TIM_PWM_Start+0x136>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1f      	ldr	r2, [pc, #124]	; (80047e4 <HAL_TIM_PWM_Start+0x17c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d018      	beq.n	800479e <HAL_TIM_PWM_Start+0x136>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1d      	ldr	r2, [pc, #116]	; (80047e8 <HAL_TIM_PWM_Start+0x180>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d013      	beq.n	800479e <HAL_TIM_PWM_Start+0x136>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a1c      	ldr	r2, [pc, #112]	; (80047ec <HAL_TIM_PWM_Start+0x184>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00e      	beq.n	800479e <HAL_TIM_PWM_Start+0x136>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a16      	ldr	r2, [pc, #88]	; (80047e0 <HAL_TIM_PWM_Start+0x178>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d009      	beq.n	800479e <HAL_TIM_PWM_Start+0x136>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a18      	ldr	r2, [pc, #96]	; (80047f0 <HAL_TIM_PWM_Start+0x188>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d004      	beq.n	800479e <HAL_TIM_PWM_Start+0x136>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a16      	ldr	r2, [pc, #88]	; (80047f4 <HAL_TIM_PWM_Start+0x18c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d111      	bne.n	80047c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b06      	cmp	r3, #6
 80047ae:	d010      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c0:	e007      	b.n	80047d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 0201 	orr.w	r2, r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40010000 	.word	0x40010000
 80047e0:	40010400 	.word	0x40010400
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40000c00 	.word	0x40000c00
 80047f0:	40014000 	.word	0x40014000
 80047f4:	40001800 	.word	0x40001800

080047f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480e:	2b01      	cmp	r3, #1
 8004810:	d101      	bne.n	8004816 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004812:	2302      	movs	r3, #2
 8004814:	e0ae      	b.n	8004974 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b0c      	cmp	r3, #12
 8004822:	f200 809f 	bhi.w	8004964 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004826:	a201      	add	r2, pc, #4	; (adr r2, 800482c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	08004861 	.word	0x08004861
 8004830:	08004965 	.word	0x08004965
 8004834:	08004965 	.word	0x08004965
 8004838:	08004965 	.word	0x08004965
 800483c:	080048a1 	.word	0x080048a1
 8004840:	08004965 	.word	0x08004965
 8004844:	08004965 	.word	0x08004965
 8004848:	08004965 	.word	0x08004965
 800484c:	080048e3 	.word	0x080048e3
 8004850:	08004965 	.word	0x08004965
 8004854:	08004965 	.word	0x08004965
 8004858:	08004965 	.word	0x08004965
 800485c:	08004923 	.word	0x08004923
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68b9      	ldr	r1, [r7, #8]
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f9f0 	bl	8004c4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0208 	orr.w	r2, r2, #8
 800487a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0204 	bic.w	r2, r2, #4
 800488a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6999      	ldr	r1, [r3, #24]
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	619a      	str	r2, [r3, #24]
      break;
 800489e:	e064      	b.n	800496a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68b9      	ldr	r1, [r7, #8]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fa40 	bl	8004d2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6999      	ldr	r1, [r3, #24]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	021a      	lsls	r2, r3, #8
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	619a      	str	r2, [r3, #24]
      break;
 80048e0:	e043      	b.n	800496a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68b9      	ldr	r1, [r7, #8]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 fa95 	bl	8004e18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69da      	ldr	r2, [r3, #28]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0208 	orr.w	r2, r2, #8
 80048fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0204 	bic.w	r2, r2, #4
 800490c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69d9      	ldr	r1, [r3, #28]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	61da      	str	r2, [r3, #28]
      break;
 8004920:	e023      	b.n	800496a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68b9      	ldr	r1, [r7, #8]
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fae9 	bl	8004f00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69da      	ldr	r2, [r3, #28]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800493c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800494c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69d9      	ldr	r1, [r3, #28]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	021a      	lsls	r2, r3, #8
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	61da      	str	r2, [r3, #28]
      break;
 8004962:	e002      	b.n	800496a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	75fb      	strb	r3, [r7, #23]
      break;
 8004968:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004972:	7dfb      	ldrb	r3, [r7, #23]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_TIM_ConfigClockSource+0x1c>
 8004994:	2302      	movs	r3, #2
 8004996:	e0b4      	b.n	8004b02 <HAL_TIM_ConfigClockSource+0x186>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d0:	d03e      	beq.n	8004a50 <HAL_TIM_ConfigClockSource+0xd4>
 80049d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d6:	f200 8087 	bhi.w	8004ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80049da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049de:	f000 8086 	beq.w	8004aee <HAL_TIM_ConfigClockSource+0x172>
 80049e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e6:	d87f      	bhi.n	8004ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80049e8:	2b70      	cmp	r3, #112	; 0x70
 80049ea:	d01a      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0xa6>
 80049ec:	2b70      	cmp	r3, #112	; 0x70
 80049ee:	d87b      	bhi.n	8004ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80049f0:	2b60      	cmp	r3, #96	; 0x60
 80049f2:	d050      	beq.n	8004a96 <HAL_TIM_ConfigClockSource+0x11a>
 80049f4:	2b60      	cmp	r3, #96	; 0x60
 80049f6:	d877      	bhi.n	8004ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80049f8:	2b50      	cmp	r3, #80	; 0x50
 80049fa:	d03c      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0xfa>
 80049fc:	2b50      	cmp	r3, #80	; 0x50
 80049fe:	d873      	bhi.n	8004ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8004a00:	2b40      	cmp	r3, #64	; 0x40
 8004a02:	d058      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0x13a>
 8004a04:	2b40      	cmp	r3, #64	; 0x40
 8004a06:	d86f      	bhi.n	8004ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8004a08:	2b30      	cmp	r3, #48	; 0x30
 8004a0a:	d064      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8004a0c:	2b30      	cmp	r3, #48	; 0x30
 8004a0e:	d86b      	bhi.n	8004ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d060      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d867      	bhi.n	8004ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d05c      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8004a1c:	2b10      	cmp	r3, #16
 8004a1e:	d05a      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8004a20:	e062      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	6899      	ldr	r1, [r3, #8]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f000 fb35 	bl	80050a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	609a      	str	r2, [r3, #8]
      break;
 8004a4e:	e04f      	b.n	8004af0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	6899      	ldr	r1, [r3, #8]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f000 fb1e 	bl	80050a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a72:	609a      	str	r2, [r3, #8]
      break;
 8004a74:	e03c      	b.n	8004af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6859      	ldr	r1, [r3, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	461a      	mov	r2, r3
 8004a84:	f000 fa92 	bl	8004fac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2150      	movs	r1, #80	; 0x50
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 faeb 	bl	800506a <TIM_ITRx_SetConfig>
      break;
 8004a94:	e02c      	b.n	8004af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	6859      	ldr	r1, [r3, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f000 fab1 	bl	800500a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2160      	movs	r1, #96	; 0x60
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fadb 	bl	800506a <TIM_ITRx_SetConfig>
      break;
 8004ab4:	e01c      	b.n	8004af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	6859      	ldr	r1, [r3, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f000 fa72 	bl	8004fac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2140      	movs	r1, #64	; 0x40
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 facb 	bl	800506a <TIM_ITRx_SetConfig>
      break;
 8004ad4:	e00c      	b.n	8004af0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f000 fac2 	bl	800506a <TIM_ITRx_SetConfig>
      break;
 8004ae6:	e003      	b.n	8004af0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	73fb      	strb	r3, [r7, #15]
      break;
 8004aec:	e000      	b.n	8004af0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004aee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a40      	ldr	r2, [pc, #256]	; (8004c20 <TIM_Base_SetConfig+0x114>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d013      	beq.n	8004b4c <TIM_Base_SetConfig+0x40>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2a:	d00f      	beq.n	8004b4c <TIM_Base_SetConfig+0x40>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a3d      	ldr	r2, [pc, #244]	; (8004c24 <TIM_Base_SetConfig+0x118>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00b      	beq.n	8004b4c <TIM_Base_SetConfig+0x40>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a3c      	ldr	r2, [pc, #240]	; (8004c28 <TIM_Base_SetConfig+0x11c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d007      	beq.n	8004b4c <TIM_Base_SetConfig+0x40>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a3b      	ldr	r2, [pc, #236]	; (8004c2c <TIM_Base_SetConfig+0x120>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d003      	beq.n	8004b4c <TIM_Base_SetConfig+0x40>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a3a      	ldr	r2, [pc, #232]	; (8004c30 <TIM_Base_SetConfig+0x124>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d108      	bne.n	8004b5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a2f      	ldr	r2, [pc, #188]	; (8004c20 <TIM_Base_SetConfig+0x114>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d02b      	beq.n	8004bbe <TIM_Base_SetConfig+0xb2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b6c:	d027      	beq.n	8004bbe <TIM_Base_SetConfig+0xb2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a2c      	ldr	r2, [pc, #176]	; (8004c24 <TIM_Base_SetConfig+0x118>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d023      	beq.n	8004bbe <TIM_Base_SetConfig+0xb2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a2b      	ldr	r2, [pc, #172]	; (8004c28 <TIM_Base_SetConfig+0x11c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d01f      	beq.n	8004bbe <TIM_Base_SetConfig+0xb2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a2a      	ldr	r2, [pc, #168]	; (8004c2c <TIM_Base_SetConfig+0x120>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d01b      	beq.n	8004bbe <TIM_Base_SetConfig+0xb2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a29      	ldr	r2, [pc, #164]	; (8004c30 <TIM_Base_SetConfig+0x124>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d017      	beq.n	8004bbe <TIM_Base_SetConfig+0xb2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a28      	ldr	r2, [pc, #160]	; (8004c34 <TIM_Base_SetConfig+0x128>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <TIM_Base_SetConfig+0xb2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a27      	ldr	r2, [pc, #156]	; (8004c38 <TIM_Base_SetConfig+0x12c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00f      	beq.n	8004bbe <TIM_Base_SetConfig+0xb2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a26      	ldr	r2, [pc, #152]	; (8004c3c <TIM_Base_SetConfig+0x130>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00b      	beq.n	8004bbe <TIM_Base_SetConfig+0xb2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a25      	ldr	r2, [pc, #148]	; (8004c40 <TIM_Base_SetConfig+0x134>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d007      	beq.n	8004bbe <TIM_Base_SetConfig+0xb2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a24      	ldr	r2, [pc, #144]	; (8004c44 <TIM_Base_SetConfig+0x138>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d003      	beq.n	8004bbe <TIM_Base_SetConfig+0xb2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a23      	ldr	r2, [pc, #140]	; (8004c48 <TIM_Base_SetConfig+0x13c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d108      	bne.n	8004bd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a0a      	ldr	r2, [pc, #40]	; (8004c20 <TIM_Base_SetConfig+0x114>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_Base_SetConfig+0xf8>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a0c      	ldr	r2, [pc, #48]	; (8004c30 <TIM_Base_SetConfig+0x124>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d103      	bne.n	8004c0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	615a      	str	r2, [r3, #20]
}
 8004c12:	bf00      	nop
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40010000 	.word	0x40010000
 8004c24:	40000400 	.word	0x40000400
 8004c28:	40000800 	.word	0x40000800
 8004c2c:	40000c00 	.word	0x40000c00
 8004c30:	40010400 	.word	0x40010400
 8004c34:	40014000 	.word	0x40014000
 8004c38:	40014400 	.word	0x40014400
 8004c3c:	40014800 	.word	0x40014800
 8004c40:	40001800 	.word	0x40001800
 8004c44:	40001c00 	.word	0x40001c00
 8004c48:	40002000 	.word	0x40002000

08004c4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f023 0201 	bic.w	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0303 	bic.w	r3, r3, #3
 8004c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f023 0302 	bic.w	r3, r3, #2
 8004c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a20      	ldr	r2, [pc, #128]	; (8004d24 <TIM_OC1_SetConfig+0xd8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_OC1_SetConfig+0x64>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a1f      	ldr	r2, [pc, #124]	; (8004d28 <TIM_OC1_SetConfig+0xdc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d10c      	bne.n	8004cca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f023 0308 	bic.w	r3, r3, #8
 8004cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f023 0304 	bic.w	r3, r3, #4
 8004cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a15      	ldr	r2, [pc, #84]	; (8004d24 <TIM_OC1_SetConfig+0xd8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_OC1_SetConfig+0x8e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a14      	ldr	r2, [pc, #80]	; (8004d28 <TIM_OC1_SetConfig+0xdc>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d111      	bne.n	8004cfe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	621a      	str	r2, [r3, #32]
}
 8004d18:	bf00      	nop
 8004d1a:	371c      	adds	r7, #28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	40010000 	.word	0x40010000
 8004d28:	40010400 	.word	0x40010400

08004d2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f023 0210 	bic.w	r2, r3, #16
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f023 0320 	bic.w	r3, r3, #32
 8004d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a22      	ldr	r2, [pc, #136]	; (8004e10 <TIM_OC2_SetConfig+0xe4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_OC2_SetConfig+0x68>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a21      	ldr	r2, [pc, #132]	; (8004e14 <TIM_OC2_SetConfig+0xe8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d10d      	bne.n	8004db0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a17      	ldr	r2, [pc, #92]	; (8004e10 <TIM_OC2_SetConfig+0xe4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <TIM_OC2_SetConfig+0x94>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a16      	ldr	r2, [pc, #88]	; (8004e14 <TIM_OC2_SetConfig+0xe8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d113      	bne.n	8004de8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	621a      	str	r2, [r3, #32]
}
 8004e02:	bf00      	nop
 8004e04:	371c      	adds	r7, #28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40010000 	.word	0x40010000
 8004e14:	40010400 	.word	0x40010400

08004e18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0303 	bic.w	r3, r3, #3
 8004e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a21      	ldr	r2, [pc, #132]	; (8004ef8 <TIM_OC3_SetConfig+0xe0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d003      	beq.n	8004e7e <TIM_OC3_SetConfig+0x66>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a20      	ldr	r2, [pc, #128]	; (8004efc <TIM_OC3_SetConfig+0xe4>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d10d      	bne.n	8004e9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	021b      	lsls	r3, r3, #8
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a16      	ldr	r2, [pc, #88]	; (8004ef8 <TIM_OC3_SetConfig+0xe0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d003      	beq.n	8004eaa <TIM_OC3_SetConfig+0x92>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a15      	ldr	r2, [pc, #84]	; (8004efc <TIM_OC3_SetConfig+0xe4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d113      	bne.n	8004ed2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	621a      	str	r2, [r3, #32]
}
 8004eec:	bf00      	nop
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	40010000 	.word	0x40010000
 8004efc:	40010400 	.word	0x40010400

08004f00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	031b      	lsls	r3, r3, #12
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a12      	ldr	r2, [pc, #72]	; (8004fa4 <TIM_OC4_SetConfig+0xa4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d003      	beq.n	8004f68 <TIM_OC4_SetConfig+0x68>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a11      	ldr	r2, [pc, #68]	; (8004fa8 <TIM_OC4_SetConfig+0xa8>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d109      	bne.n	8004f7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	019b      	lsls	r3, r3, #6
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	621a      	str	r2, [r3, #32]
}
 8004f96:	bf00      	nop
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40010000 	.word	0x40010000
 8004fa8:	40010400 	.word	0x40010400

08004fac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f023 0201 	bic.w	r2, r3, #1
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f023 030a 	bic.w	r3, r3, #10
 8004fe8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	621a      	str	r2, [r3, #32]
}
 8004ffe:	bf00      	nop
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800500a:	b480      	push	{r7}
 800500c:	b087      	sub	sp, #28
 800500e:	af00      	add	r7, sp, #0
 8005010:	60f8      	str	r0, [r7, #12]
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	f023 0210 	bic.w	r2, r3, #16
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005034:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	031b      	lsls	r3, r3, #12
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005046:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	621a      	str	r2, [r3, #32]
}
 800505e:	bf00      	nop
 8005060:	371c      	adds	r7, #28
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800506a:	b480      	push	{r7}
 800506c:	b085      	sub	sp, #20
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005080:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	f043 0307 	orr.w	r3, r3, #7
 800508c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	609a      	str	r2, [r3, #8]
}
 8005094:	bf00      	nop
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	021a      	lsls	r2, r3, #8
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	431a      	orrs	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	609a      	str	r2, [r3, #8]
}
 80050d4:	bf00      	nop
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	2201      	movs	r2, #1
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a1a      	ldr	r2, [r3, #32]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	43db      	mvns	r3, r3
 8005102:	401a      	ands	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a1a      	ldr	r2, [r3, #32]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f003 031f 	and.w	r3, r3, #31
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	fa01 f303 	lsl.w	r3, r1, r3
 8005118:	431a      	orrs	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	621a      	str	r2, [r3, #32]
}
 800511e:	bf00      	nop
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
	...

0800512c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005140:	2302      	movs	r3, #2
 8005142:	e05a      	b.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a21      	ldr	r2, [pc, #132]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d022      	beq.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005190:	d01d      	beq.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1d      	ldr	r2, [pc, #116]	; (800520c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d018      	beq.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1b      	ldr	r2, [pc, #108]	; (8005210 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d013      	beq.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1a      	ldr	r2, [pc, #104]	; (8005214 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d00e      	beq.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a18      	ldr	r2, [pc, #96]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d009      	beq.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a17      	ldr	r2, [pc, #92]	; (800521c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d004      	beq.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a15      	ldr	r2, [pc, #84]	; (8005220 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d10c      	bne.n	80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40010000 	.word	0x40010000
 800520c:	40000400 	.word	0x40000400
 8005210:	40000800 	.word	0x40000800
 8005214:	40000c00 	.word	0x40000c00
 8005218:	40010400 	.word	0x40010400
 800521c:	40014000 	.word	0x40014000
 8005220:	40001800 	.word	0x40001800

08005224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e03f      	b.n	80052b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fc f950 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2224      	movs	r2, #36	; 0x24
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f929 	bl	80054c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800527c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800528c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800529c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b08a      	sub	sp, #40	; 0x28
 80052c2:	af02      	add	r7, sp, #8
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	603b      	str	r3, [r7, #0]
 80052ca:	4613      	mov	r3, r2
 80052cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d17c      	bne.n	80053d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <HAL_UART_Transmit+0x2c>
 80052e4:	88fb      	ldrh	r3, [r7, #6]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e075      	b.n	80053da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_UART_Transmit+0x3e>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e06e      	b.n	80053da <HAL_UART_Transmit+0x11c>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2221      	movs	r2, #33	; 0x21
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005312:	f7fc faff 	bl	8001914 <HAL_GetTick>
 8005316:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	88fa      	ldrh	r2, [r7, #6]
 800531c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	88fa      	ldrh	r2, [r7, #6]
 8005322:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532c:	d108      	bne.n	8005340 <HAL_UART_Transmit+0x82>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d104      	bne.n	8005340 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005336:	2300      	movs	r3, #0
 8005338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	e003      	b.n	8005348 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005344:	2300      	movs	r3, #0
 8005346:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005350:	e02a      	b.n	80053a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2200      	movs	r2, #0
 800535a:	2180      	movs	r1, #128	; 0x80
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f840 	bl	80053e2 <UART_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e036      	b.n	80053da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10b      	bne.n	800538a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005380:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	3302      	adds	r3, #2
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	e007      	b.n	800539a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	781a      	ldrb	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	3301      	adds	r3, #1
 8005398:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1cf      	bne.n	8005352 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2200      	movs	r2, #0
 80053ba:	2140      	movs	r1, #64	; 0x40
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f810 	bl	80053e2 <UART_WaitOnFlagUntilTimeout>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e006      	b.n	80053da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	e000      	b.n	80053da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80053d8:	2302      	movs	r3, #2
  }
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3720      	adds	r7, #32
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b090      	sub	sp, #64	; 0x40
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	603b      	str	r3, [r7, #0]
 80053ee:	4613      	mov	r3, r2
 80053f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f2:	e050      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d04c      	beq.n	8005496 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <UART_WaitOnFlagUntilTimeout+0x30>
 8005402:	f7fc fa87 	bl	8001914 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800540e:	429a      	cmp	r2, r3
 8005410:	d241      	bcs.n	8005496 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	330c      	adds	r3, #12
 8005418:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005432:	637a      	str	r2, [r7, #52]	; 0x34
 8005434:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005438:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e5      	bne.n	8005412 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3314      	adds	r3, #20
 800544c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	613b      	str	r3, [r7, #16]
   return(result);
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f023 0301 	bic.w	r3, r3, #1
 800545c:	63bb      	str	r3, [r7, #56]	; 0x38
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3314      	adds	r3, #20
 8005464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005466:	623a      	str	r2, [r7, #32]
 8005468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	69f9      	ldr	r1, [r7, #28]
 800546c:	6a3a      	ldr	r2, [r7, #32]
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	61bb      	str	r3, [r7, #24]
   return(result);
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e5      	bne.n	8005446 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2220      	movs	r2, #32
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2220      	movs	r2, #32
 8005486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e00f      	b.n	80054b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4013      	ands	r3, r2
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	bf0c      	ite	eq
 80054a6:	2301      	moveq	r3, #1
 80054a8:	2300      	movne	r3, #0
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	461a      	mov	r2, r3
 80054ae:	79fb      	ldrb	r3, [r7, #7]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d09f      	beq.n	80053f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3740      	adds	r7, #64	; 0x40
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054c4:	b0c0      	sub	sp, #256	; 0x100
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054dc:	68d9      	ldr	r1, [r3, #12]
 80054de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	ea40 0301 	orr.w	r3, r0, r1
 80054e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	431a      	orrs	r2, r3
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005518:	f021 010c 	bic.w	r1, r1, #12
 800551c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005526:	430b      	orrs	r3, r1
 8005528:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553a:	6999      	ldr	r1, [r3, #24]
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	ea40 0301 	orr.w	r3, r0, r1
 8005546:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4b8f      	ldr	r3, [pc, #572]	; (800578c <UART_SetConfig+0x2cc>)
 8005550:	429a      	cmp	r2, r3
 8005552:	d005      	beq.n	8005560 <UART_SetConfig+0xa0>
 8005554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4b8d      	ldr	r3, [pc, #564]	; (8005790 <UART_SetConfig+0x2d0>)
 800555c:	429a      	cmp	r2, r3
 800555e:	d104      	bne.n	800556a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005560:	f7fe ffc6 	bl	80044f0 <HAL_RCC_GetPCLK2Freq>
 8005564:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005568:	e003      	b.n	8005572 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800556a:	f7fe ffad 	bl	80044c8 <HAL_RCC_GetPCLK1Freq>
 800556e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800557c:	f040 810c 	bne.w	8005798 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005584:	2200      	movs	r2, #0
 8005586:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800558a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800558e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005592:	4622      	mov	r2, r4
 8005594:	462b      	mov	r3, r5
 8005596:	1891      	adds	r1, r2, r2
 8005598:	65b9      	str	r1, [r7, #88]	; 0x58
 800559a:	415b      	adcs	r3, r3
 800559c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800559e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055a2:	4621      	mov	r1, r4
 80055a4:	eb12 0801 	adds.w	r8, r2, r1
 80055a8:	4629      	mov	r1, r5
 80055aa:	eb43 0901 	adc.w	r9, r3, r1
 80055ae:	f04f 0200 	mov.w	r2, #0
 80055b2:	f04f 0300 	mov.w	r3, #0
 80055b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055c2:	4690      	mov	r8, r2
 80055c4:	4699      	mov	r9, r3
 80055c6:	4623      	mov	r3, r4
 80055c8:	eb18 0303 	adds.w	r3, r8, r3
 80055cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055d0:	462b      	mov	r3, r5
 80055d2:	eb49 0303 	adc.w	r3, r9, r3
 80055d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80055ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80055ee:	460b      	mov	r3, r1
 80055f0:	18db      	adds	r3, r3, r3
 80055f2:	653b      	str	r3, [r7, #80]	; 0x50
 80055f4:	4613      	mov	r3, r2
 80055f6:	eb42 0303 	adc.w	r3, r2, r3
 80055fa:	657b      	str	r3, [r7, #84]	; 0x54
 80055fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005600:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005604:	f7fa fe4c 	bl	80002a0 <__aeabi_uldivmod>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4b61      	ldr	r3, [pc, #388]	; (8005794 <UART_SetConfig+0x2d4>)
 800560e:	fba3 2302 	umull	r2, r3, r3, r2
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	011c      	lsls	r4, r3, #4
 8005616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800561a:	2200      	movs	r2, #0
 800561c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005620:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005624:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005628:	4642      	mov	r2, r8
 800562a:	464b      	mov	r3, r9
 800562c:	1891      	adds	r1, r2, r2
 800562e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005630:	415b      	adcs	r3, r3
 8005632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005634:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005638:	4641      	mov	r1, r8
 800563a:	eb12 0a01 	adds.w	sl, r2, r1
 800563e:	4649      	mov	r1, r9
 8005640:	eb43 0b01 	adc.w	fp, r3, r1
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005650:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005654:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005658:	4692      	mov	sl, r2
 800565a:	469b      	mov	fp, r3
 800565c:	4643      	mov	r3, r8
 800565e:	eb1a 0303 	adds.w	r3, sl, r3
 8005662:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005666:	464b      	mov	r3, r9
 8005668:	eb4b 0303 	adc.w	r3, fp, r3
 800566c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800567c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005680:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005684:	460b      	mov	r3, r1
 8005686:	18db      	adds	r3, r3, r3
 8005688:	643b      	str	r3, [r7, #64]	; 0x40
 800568a:	4613      	mov	r3, r2
 800568c:	eb42 0303 	adc.w	r3, r2, r3
 8005690:	647b      	str	r3, [r7, #68]	; 0x44
 8005692:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005696:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800569a:	f7fa fe01 	bl	80002a0 <__aeabi_uldivmod>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4611      	mov	r1, r2
 80056a4:	4b3b      	ldr	r3, [pc, #236]	; (8005794 <UART_SetConfig+0x2d4>)
 80056a6:	fba3 2301 	umull	r2, r3, r3, r1
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	2264      	movs	r2, #100	; 0x64
 80056ae:	fb02 f303 	mul.w	r3, r2, r3
 80056b2:	1acb      	subs	r3, r1, r3
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80056ba:	4b36      	ldr	r3, [pc, #216]	; (8005794 <UART_SetConfig+0x2d4>)
 80056bc:	fba3 2302 	umull	r2, r3, r3, r2
 80056c0:	095b      	lsrs	r3, r3, #5
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056c8:	441c      	add	r4, r3
 80056ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80056d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80056dc:	4642      	mov	r2, r8
 80056de:	464b      	mov	r3, r9
 80056e0:	1891      	adds	r1, r2, r2
 80056e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80056e4:	415b      	adcs	r3, r3
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056ec:	4641      	mov	r1, r8
 80056ee:	1851      	adds	r1, r2, r1
 80056f0:	6339      	str	r1, [r7, #48]	; 0x30
 80056f2:	4649      	mov	r1, r9
 80056f4:	414b      	adcs	r3, r1
 80056f6:	637b      	str	r3, [r7, #52]	; 0x34
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	f04f 0300 	mov.w	r3, #0
 8005700:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005704:	4659      	mov	r1, fp
 8005706:	00cb      	lsls	r3, r1, #3
 8005708:	4651      	mov	r1, sl
 800570a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800570e:	4651      	mov	r1, sl
 8005710:	00ca      	lsls	r2, r1, #3
 8005712:	4610      	mov	r0, r2
 8005714:	4619      	mov	r1, r3
 8005716:	4603      	mov	r3, r0
 8005718:	4642      	mov	r2, r8
 800571a:	189b      	adds	r3, r3, r2
 800571c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005720:	464b      	mov	r3, r9
 8005722:	460a      	mov	r2, r1
 8005724:	eb42 0303 	adc.w	r3, r2, r3
 8005728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005738:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800573c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005740:	460b      	mov	r3, r1
 8005742:	18db      	adds	r3, r3, r3
 8005744:	62bb      	str	r3, [r7, #40]	; 0x28
 8005746:	4613      	mov	r3, r2
 8005748:	eb42 0303 	adc.w	r3, r2, r3
 800574c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800574e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005752:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005756:	f7fa fda3 	bl	80002a0 <__aeabi_uldivmod>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <UART_SetConfig+0x2d4>)
 8005760:	fba3 1302 	umull	r1, r3, r3, r2
 8005764:	095b      	lsrs	r3, r3, #5
 8005766:	2164      	movs	r1, #100	; 0x64
 8005768:	fb01 f303 	mul.w	r3, r1, r3
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	3332      	adds	r3, #50	; 0x32
 8005772:	4a08      	ldr	r2, [pc, #32]	; (8005794 <UART_SetConfig+0x2d4>)
 8005774:	fba2 2303 	umull	r2, r3, r2, r3
 8005778:	095b      	lsrs	r3, r3, #5
 800577a:	f003 0207 	and.w	r2, r3, #7
 800577e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4422      	add	r2, r4
 8005786:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005788:	e105      	b.n	8005996 <UART_SetConfig+0x4d6>
 800578a:	bf00      	nop
 800578c:	40011000 	.word	0x40011000
 8005790:	40011400 	.word	0x40011400
 8005794:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800579c:	2200      	movs	r2, #0
 800579e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80057a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80057aa:	4642      	mov	r2, r8
 80057ac:	464b      	mov	r3, r9
 80057ae:	1891      	adds	r1, r2, r2
 80057b0:	6239      	str	r1, [r7, #32]
 80057b2:	415b      	adcs	r3, r3
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
 80057b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057ba:	4641      	mov	r1, r8
 80057bc:	1854      	adds	r4, r2, r1
 80057be:	4649      	mov	r1, r9
 80057c0:	eb43 0501 	adc.w	r5, r3, r1
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	00eb      	lsls	r3, r5, #3
 80057ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057d2:	00e2      	lsls	r2, r4, #3
 80057d4:	4614      	mov	r4, r2
 80057d6:	461d      	mov	r5, r3
 80057d8:	4643      	mov	r3, r8
 80057da:	18e3      	adds	r3, r4, r3
 80057dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057e0:	464b      	mov	r3, r9
 80057e2:	eb45 0303 	adc.w	r3, r5, r3
 80057e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057fa:	f04f 0200 	mov.w	r2, #0
 80057fe:	f04f 0300 	mov.w	r3, #0
 8005802:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005806:	4629      	mov	r1, r5
 8005808:	008b      	lsls	r3, r1, #2
 800580a:	4621      	mov	r1, r4
 800580c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005810:	4621      	mov	r1, r4
 8005812:	008a      	lsls	r2, r1, #2
 8005814:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005818:	f7fa fd42 	bl	80002a0 <__aeabi_uldivmod>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4b60      	ldr	r3, [pc, #384]	; (80059a4 <UART_SetConfig+0x4e4>)
 8005822:	fba3 2302 	umull	r2, r3, r3, r2
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	011c      	lsls	r4, r3, #4
 800582a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800582e:	2200      	movs	r2, #0
 8005830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005834:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005838:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800583c:	4642      	mov	r2, r8
 800583e:	464b      	mov	r3, r9
 8005840:	1891      	adds	r1, r2, r2
 8005842:	61b9      	str	r1, [r7, #24]
 8005844:	415b      	adcs	r3, r3
 8005846:	61fb      	str	r3, [r7, #28]
 8005848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800584c:	4641      	mov	r1, r8
 800584e:	1851      	adds	r1, r2, r1
 8005850:	6139      	str	r1, [r7, #16]
 8005852:	4649      	mov	r1, r9
 8005854:	414b      	adcs	r3, r1
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005864:	4659      	mov	r1, fp
 8005866:	00cb      	lsls	r3, r1, #3
 8005868:	4651      	mov	r1, sl
 800586a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800586e:	4651      	mov	r1, sl
 8005870:	00ca      	lsls	r2, r1, #3
 8005872:	4610      	mov	r0, r2
 8005874:	4619      	mov	r1, r3
 8005876:	4603      	mov	r3, r0
 8005878:	4642      	mov	r2, r8
 800587a:	189b      	adds	r3, r3, r2
 800587c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005880:	464b      	mov	r3, r9
 8005882:	460a      	mov	r2, r1
 8005884:	eb42 0303 	adc.w	r3, r2, r3
 8005888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	67bb      	str	r3, [r7, #120]	; 0x78
 8005896:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80058a4:	4649      	mov	r1, r9
 80058a6:	008b      	lsls	r3, r1, #2
 80058a8:	4641      	mov	r1, r8
 80058aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ae:	4641      	mov	r1, r8
 80058b0:	008a      	lsls	r2, r1, #2
 80058b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80058b6:	f7fa fcf3 	bl	80002a0 <__aeabi_uldivmod>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	4b39      	ldr	r3, [pc, #228]	; (80059a4 <UART_SetConfig+0x4e4>)
 80058c0:	fba3 1302 	umull	r1, r3, r3, r2
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	2164      	movs	r1, #100	; 0x64
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	3332      	adds	r3, #50	; 0x32
 80058d2:	4a34      	ldr	r2, [pc, #208]	; (80059a4 <UART_SetConfig+0x4e4>)
 80058d4:	fba2 2303 	umull	r2, r3, r2, r3
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058de:	441c      	add	r4, r3
 80058e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e4:	2200      	movs	r2, #0
 80058e6:	673b      	str	r3, [r7, #112]	; 0x70
 80058e8:	677a      	str	r2, [r7, #116]	; 0x74
 80058ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80058ee:	4642      	mov	r2, r8
 80058f0:	464b      	mov	r3, r9
 80058f2:	1891      	adds	r1, r2, r2
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	415b      	adcs	r3, r3
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058fe:	4641      	mov	r1, r8
 8005900:	1851      	adds	r1, r2, r1
 8005902:	6039      	str	r1, [r7, #0]
 8005904:	4649      	mov	r1, r9
 8005906:	414b      	adcs	r3, r1
 8005908:	607b      	str	r3, [r7, #4]
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	f04f 0300 	mov.w	r3, #0
 8005912:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005916:	4659      	mov	r1, fp
 8005918:	00cb      	lsls	r3, r1, #3
 800591a:	4651      	mov	r1, sl
 800591c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005920:	4651      	mov	r1, sl
 8005922:	00ca      	lsls	r2, r1, #3
 8005924:	4610      	mov	r0, r2
 8005926:	4619      	mov	r1, r3
 8005928:	4603      	mov	r3, r0
 800592a:	4642      	mov	r2, r8
 800592c:	189b      	adds	r3, r3, r2
 800592e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005930:	464b      	mov	r3, r9
 8005932:	460a      	mov	r2, r1
 8005934:	eb42 0303 	adc.w	r3, r2, r3
 8005938:	66fb      	str	r3, [r7, #108]	; 0x6c
 800593a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	663b      	str	r3, [r7, #96]	; 0x60
 8005944:	667a      	str	r2, [r7, #100]	; 0x64
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005952:	4649      	mov	r1, r9
 8005954:	008b      	lsls	r3, r1, #2
 8005956:	4641      	mov	r1, r8
 8005958:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800595c:	4641      	mov	r1, r8
 800595e:	008a      	lsls	r2, r1, #2
 8005960:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005964:	f7fa fc9c 	bl	80002a0 <__aeabi_uldivmod>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <UART_SetConfig+0x4e4>)
 800596e:	fba3 1302 	umull	r1, r3, r3, r2
 8005972:	095b      	lsrs	r3, r3, #5
 8005974:	2164      	movs	r1, #100	; 0x64
 8005976:	fb01 f303 	mul.w	r3, r1, r3
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	3332      	adds	r3, #50	; 0x32
 8005980:	4a08      	ldr	r2, [pc, #32]	; (80059a4 <UART_SetConfig+0x4e4>)
 8005982:	fba2 2303 	umull	r2, r3, r2, r3
 8005986:	095b      	lsrs	r3, r3, #5
 8005988:	f003 020f 	and.w	r2, r3, #15
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4422      	add	r2, r4
 8005994:	609a      	str	r2, [r3, #8]
}
 8005996:	bf00      	nop
 8005998:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800599c:	46bd      	mov	sp, r7
 800599e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059a2:	bf00      	nop
 80059a4:	51eb851f 	.word	0x51eb851f

080059a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059a8:	b084      	sub	sp, #16
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	f107 001c 	add.w	r0, r7, #28
 80059b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d122      	bne.n	8005a06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80059d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d105      	bne.n	80059fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 faa2 	bl	8005f44 <USB_CoreReset>
 8005a00:	4603      	mov	r3, r0
 8005a02:	73fb      	strb	r3, [r7, #15]
 8005a04:	e01a      	b.n	8005a3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fa96 	bl	8005f44 <USB_CoreReset>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	639a      	str	r2, [r3, #56]	; 0x38
 8005a2e:	e005      	b.n	8005a3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d10b      	bne.n	8005a5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f043 0206 	orr.w	r2, r3, #6
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f043 0220 	orr.w	r2, r3, #32
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a66:	b004      	add	sp, #16
 8005a68:	4770      	bx	lr

08005a6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f023 0201 	bic.w	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005aa8:	78fb      	ldrb	r3, [r7, #3]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d115      	bne.n	8005ada <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005aba:	2001      	movs	r0, #1
 8005abc:	f7fb ff36 	bl	800192c <HAL_Delay>
      ms++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fa2e 	bl	8005f28 <USB_GetMode>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d01e      	beq.n	8005b10 <USB_SetCurrentMode+0x84>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b31      	cmp	r3, #49	; 0x31
 8005ad6:	d9f0      	bls.n	8005aba <USB_SetCurrentMode+0x2e>
 8005ad8:	e01a      	b.n	8005b10 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ada:	78fb      	ldrb	r3, [r7, #3]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d115      	bne.n	8005b0c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005aec:	2001      	movs	r0, #1
 8005aee:	f7fb ff1d 	bl	800192c <HAL_Delay>
      ms++;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	3301      	adds	r3, #1
 8005af6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fa15 	bl	8005f28 <USB_GetMode>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d005      	beq.n	8005b10 <USB_SetCurrentMode+0x84>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b31      	cmp	r3, #49	; 0x31
 8005b08:	d9f0      	bls.n	8005aec <USB_SetCurrentMode+0x60>
 8005b0a:	e001      	b.n	8005b10 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e005      	b.n	8005b1c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b32      	cmp	r3, #50	; 0x32
 8005b14:	d101      	bne.n	8005b1a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b24:	b084      	sub	sp, #16
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b086      	sub	sp, #24
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b3e:	2300      	movs	r3, #0
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	e009      	b.n	8005b58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	3340      	adds	r3, #64	; 0x40
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	2200      	movs	r2, #0
 8005b50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	3301      	adds	r3, #1
 8005b56:	613b      	str	r3, [r7, #16]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2b0e      	cmp	r3, #14
 8005b5c:	d9f2      	bls.n	8005b44 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d11c      	bne.n	8005b9e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b72:	f043 0302 	orr.w	r3, r3, #2
 8005b76:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	639a      	str	r2, [r3, #56]	; 0x38
 8005b9c:	e00b      	b.n	8005bb6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc8:	4619      	mov	r1, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	680b      	ldr	r3, [r1, #0]
 8005bd4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d10c      	bne.n	8005bf6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d104      	bne.n	8005bec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005be2:	2100      	movs	r1, #0
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f965 	bl	8005eb4 <USB_SetDevSpeed>
 8005bea:	e008      	b.n	8005bfe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bec:	2101      	movs	r1, #1
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f960 	bl	8005eb4 <USB_SetDevSpeed>
 8005bf4:	e003      	b.n	8005bfe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005bf6:	2103      	movs	r1, #3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f95b 	bl	8005eb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bfe:	2110      	movs	r1, #16
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f8f3 	bl	8005dec <USB_FlushTxFifo>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f91f 	bl	8005e54 <USB_FlushRxFifo>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c26:	461a      	mov	r2, r3
 8005c28:	2300      	movs	r3, #0
 8005c2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c32:	461a      	mov	r2, r3
 8005c34:	2300      	movs	r3, #0
 8005c36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3e:	461a      	mov	r2, r3
 8005c40:	2300      	movs	r3, #0
 8005c42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c44:	2300      	movs	r3, #0
 8005c46:	613b      	str	r3, [r7, #16]
 8005c48:	e043      	b.n	8005cd2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c60:	d118      	bne.n	8005c94 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10a      	bne.n	8005c7e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c74:	461a      	mov	r2, r3
 8005c76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	e013      	b.n	8005ca6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	e008      	b.n	8005ca6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	613b      	str	r3, [r7, #16]
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d3b7      	bcc.n	8005c4a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cda:	2300      	movs	r3, #0
 8005cdc:	613b      	str	r3, [r7, #16]
 8005cde:	e043      	b.n	8005d68 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cf6:	d118      	bne.n	8005d2a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10a      	bne.n	8005d14 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	e013      	b.n	8005d3c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d20:	461a      	mov	r2, r3
 8005d22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	e008      	b.n	8005d3c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d36:	461a      	mov	r2, r3
 8005d38:	2300      	movs	r3, #0
 8005d3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d48:	461a      	mov	r2, r3
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	3301      	adds	r3, #1
 8005d66:	613b      	str	r3, [r7, #16]
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d3b7      	bcc.n	8005ce0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d105      	bne.n	8005da4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f043 0210 	orr.w	r2, r3, #16
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699a      	ldr	r2, [r3, #24]
 8005da8:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <USB_DevInit+0x2c4>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d005      	beq.n	8005dc2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f043 0208 	orr.w	r2, r3, #8
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d107      	bne.n	8005dd8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dd0:	f043 0304 	orr.w	r3, r3, #4
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005de4:	b004      	add	sp, #16
 8005de6:	4770      	bx	lr
 8005de8:	803c3800 	.word	0x803c3800

08005dec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4a13      	ldr	r2, [pc, #76]	; (8005e50 <USB_FlushTxFifo+0x64>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d901      	bls.n	8005e0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e01b      	b.n	8005e44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	daf2      	bge.n	8005dfa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	019b      	lsls	r3, r3, #6
 8005e1c:	f043 0220 	orr.w	r2, r3, #32
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3301      	adds	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4a08      	ldr	r2, [pc, #32]	; (8005e50 <USB_FlushTxFifo+0x64>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d901      	bls.n	8005e36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e006      	b.n	8005e44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	d0f0      	beq.n	8005e24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	00030d40 	.word	0x00030d40

08005e54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3301      	adds	r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4a11      	ldr	r2, [pc, #68]	; (8005eb0 <USB_FlushRxFifo+0x5c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d901      	bls.n	8005e72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e018      	b.n	8005ea4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	daf2      	bge.n	8005e60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2210      	movs	r2, #16
 8005e82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	3301      	adds	r3, #1
 8005e88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4a08      	ldr	r2, [pc, #32]	; (8005eb0 <USB_FlushRxFifo+0x5c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d901      	bls.n	8005e96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e006      	b.n	8005ea4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f003 0310 	and.w	r3, r3, #16
 8005e9e:	2b10      	cmp	r3, #16
 8005ea0:	d0f0      	beq.n	8005e84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	00030d40 	.word	0x00030d40

08005eb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	68f9      	ldr	r1, [r7, #12]
 8005ed0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b085      	sub	sp, #20
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f00:	f023 0303 	bic.w	r3, r3, #3
 8005f04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f14:	f043 0302 	orr.w	r3, r3, #2
 8005f18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	f003 0301 	and.w	r3, r3, #1
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3301      	adds	r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <USB_CoreReset+0x64>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d901      	bls.n	8005f62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e01b      	b.n	8005f9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	daf2      	bge.n	8005f50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f043 0201 	orr.w	r2, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4a09      	ldr	r2, [pc, #36]	; (8005fa8 <USB_CoreReset+0x64>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d901      	bls.n	8005f8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e006      	b.n	8005f9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d0f0      	beq.n	8005f7a <USB_CoreReset+0x36>

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	00030d40 	.word	0x00030d40

08005fac <__errno>:
 8005fac:	4b01      	ldr	r3, [pc, #4]	; (8005fb4 <__errno+0x8>)
 8005fae:	6818      	ldr	r0, [r3, #0]
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	20000010 	.word	0x20000010

08005fb8 <__libc_init_array>:
 8005fb8:	b570      	push	{r4, r5, r6, lr}
 8005fba:	4d0d      	ldr	r5, [pc, #52]	; (8005ff0 <__libc_init_array+0x38>)
 8005fbc:	4c0d      	ldr	r4, [pc, #52]	; (8005ff4 <__libc_init_array+0x3c>)
 8005fbe:	1b64      	subs	r4, r4, r5
 8005fc0:	10a4      	asrs	r4, r4, #2
 8005fc2:	2600      	movs	r6, #0
 8005fc4:	42a6      	cmp	r6, r4
 8005fc6:	d109      	bne.n	8005fdc <__libc_init_array+0x24>
 8005fc8:	4d0b      	ldr	r5, [pc, #44]	; (8005ff8 <__libc_init_array+0x40>)
 8005fca:	4c0c      	ldr	r4, [pc, #48]	; (8005ffc <__libc_init_array+0x44>)
 8005fcc:	f001 f80a 	bl	8006fe4 <_init>
 8005fd0:	1b64      	subs	r4, r4, r5
 8005fd2:	10a4      	asrs	r4, r4, #2
 8005fd4:	2600      	movs	r6, #0
 8005fd6:	42a6      	cmp	r6, r4
 8005fd8:	d105      	bne.n	8005fe6 <__libc_init_array+0x2e>
 8005fda:	bd70      	pop	{r4, r5, r6, pc}
 8005fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe0:	4798      	blx	r3
 8005fe2:	3601      	adds	r6, #1
 8005fe4:	e7ee      	b.n	8005fc4 <__libc_init_array+0xc>
 8005fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fea:	4798      	blx	r3
 8005fec:	3601      	adds	r6, #1
 8005fee:	e7f2      	b.n	8005fd6 <__libc_init_array+0x1e>
 8005ff0:	08007130 	.word	0x08007130
 8005ff4:	08007130 	.word	0x08007130
 8005ff8:	08007130 	.word	0x08007130
 8005ffc:	08007134 	.word	0x08007134

08006000 <memset>:
 8006000:	4402      	add	r2, r0
 8006002:	4603      	mov	r3, r0
 8006004:	4293      	cmp	r3, r2
 8006006:	d100      	bne.n	800600a <memset+0xa>
 8006008:	4770      	bx	lr
 800600a:	f803 1b01 	strb.w	r1, [r3], #1
 800600e:	e7f9      	b.n	8006004 <memset+0x4>

08006010 <setvbuf>:
 8006010:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006014:	461d      	mov	r5, r3
 8006016:	4b5d      	ldr	r3, [pc, #372]	; (800618c <setvbuf+0x17c>)
 8006018:	681f      	ldr	r7, [r3, #0]
 800601a:	4604      	mov	r4, r0
 800601c:	460e      	mov	r6, r1
 800601e:	4690      	mov	r8, r2
 8006020:	b127      	cbz	r7, 800602c <setvbuf+0x1c>
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	b913      	cbnz	r3, 800602c <setvbuf+0x1c>
 8006026:	4638      	mov	r0, r7
 8006028:	f000 fa26 	bl	8006478 <__sinit>
 800602c:	4b58      	ldr	r3, [pc, #352]	; (8006190 <setvbuf+0x180>)
 800602e:	429c      	cmp	r4, r3
 8006030:	d167      	bne.n	8006102 <setvbuf+0xf2>
 8006032:	687c      	ldr	r4, [r7, #4]
 8006034:	f1b8 0f02 	cmp.w	r8, #2
 8006038:	d006      	beq.n	8006048 <setvbuf+0x38>
 800603a:	f1b8 0f01 	cmp.w	r8, #1
 800603e:	f200 809f 	bhi.w	8006180 <setvbuf+0x170>
 8006042:	2d00      	cmp	r5, #0
 8006044:	f2c0 809c 	blt.w	8006180 <setvbuf+0x170>
 8006048:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800604a:	07db      	lsls	r3, r3, #31
 800604c:	d405      	bmi.n	800605a <setvbuf+0x4a>
 800604e:	89a3      	ldrh	r3, [r4, #12]
 8006050:	0598      	lsls	r0, r3, #22
 8006052:	d402      	bmi.n	800605a <setvbuf+0x4a>
 8006054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006056:	f000 faad 	bl	80065b4 <__retarget_lock_acquire_recursive>
 800605a:	4621      	mov	r1, r4
 800605c:	4638      	mov	r0, r7
 800605e:	f000 f977 	bl	8006350 <_fflush_r>
 8006062:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006064:	b141      	cbz	r1, 8006078 <setvbuf+0x68>
 8006066:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800606a:	4299      	cmp	r1, r3
 800606c:	d002      	beq.n	8006074 <setvbuf+0x64>
 800606e:	4638      	mov	r0, r7
 8006070:	f000 fad0 	bl	8006614 <_free_r>
 8006074:	2300      	movs	r3, #0
 8006076:	6363      	str	r3, [r4, #52]	; 0x34
 8006078:	2300      	movs	r3, #0
 800607a:	61a3      	str	r3, [r4, #24]
 800607c:	6063      	str	r3, [r4, #4]
 800607e:	89a3      	ldrh	r3, [r4, #12]
 8006080:	0619      	lsls	r1, r3, #24
 8006082:	d503      	bpl.n	800608c <setvbuf+0x7c>
 8006084:	6921      	ldr	r1, [r4, #16]
 8006086:	4638      	mov	r0, r7
 8006088:	f000 fac4 	bl	8006614 <_free_r>
 800608c:	89a3      	ldrh	r3, [r4, #12]
 800608e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006092:	f023 0303 	bic.w	r3, r3, #3
 8006096:	f1b8 0f02 	cmp.w	r8, #2
 800609a:	81a3      	strh	r3, [r4, #12]
 800609c:	d06c      	beq.n	8006178 <setvbuf+0x168>
 800609e:	ab01      	add	r3, sp, #4
 80060a0:	466a      	mov	r2, sp
 80060a2:	4621      	mov	r1, r4
 80060a4:	4638      	mov	r0, r7
 80060a6:	f000 fa87 	bl	80065b8 <__swhatbuf_r>
 80060aa:	89a3      	ldrh	r3, [r4, #12]
 80060ac:	4318      	orrs	r0, r3
 80060ae:	81a0      	strh	r0, [r4, #12]
 80060b0:	2d00      	cmp	r5, #0
 80060b2:	d130      	bne.n	8006116 <setvbuf+0x106>
 80060b4:	9d00      	ldr	r5, [sp, #0]
 80060b6:	4628      	mov	r0, r5
 80060b8:	f000 faa4 	bl	8006604 <malloc>
 80060bc:	4606      	mov	r6, r0
 80060be:	2800      	cmp	r0, #0
 80060c0:	d155      	bne.n	800616e <setvbuf+0x15e>
 80060c2:	f8dd 9000 	ldr.w	r9, [sp]
 80060c6:	45a9      	cmp	r9, r5
 80060c8:	d14a      	bne.n	8006160 <setvbuf+0x150>
 80060ca:	f04f 35ff 	mov.w	r5, #4294967295
 80060ce:	2200      	movs	r2, #0
 80060d0:	60a2      	str	r2, [r4, #8]
 80060d2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80060d6:	6022      	str	r2, [r4, #0]
 80060d8:	6122      	str	r2, [r4, #16]
 80060da:	2201      	movs	r2, #1
 80060dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060e0:	6162      	str	r2, [r4, #20]
 80060e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060e4:	f043 0302 	orr.w	r3, r3, #2
 80060e8:	07d2      	lsls	r2, r2, #31
 80060ea:	81a3      	strh	r3, [r4, #12]
 80060ec:	d405      	bmi.n	80060fa <setvbuf+0xea>
 80060ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80060f2:	d102      	bne.n	80060fa <setvbuf+0xea>
 80060f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060f6:	f000 fa5e 	bl	80065b6 <__retarget_lock_release_recursive>
 80060fa:	4628      	mov	r0, r5
 80060fc:	b003      	add	sp, #12
 80060fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006102:	4b24      	ldr	r3, [pc, #144]	; (8006194 <setvbuf+0x184>)
 8006104:	429c      	cmp	r4, r3
 8006106:	d101      	bne.n	800610c <setvbuf+0xfc>
 8006108:	68bc      	ldr	r4, [r7, #8]
 800610a:	e793      	b.n	8006034 <setvbuf+0x24>
 800610c:	4b22      	ldr	r3, [pc, #136]	; (8006198 <setvbuf+0x188>)
 800610e:	429c      	cmp	r4, r3
 8006110:	bf08      	it	eq
 8006112:	68fc      	ldreq	r4, [r7, #12]
 8006114:	e78e      	b.n	8006034 <setvbuf+0x24>
 8006116:	2e00      	cmp	r6, #0
 8006118:	d0cd      	beq.n	80060b6 <setvbuf+0xa6>
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	b913      	cbnz	r3, 8006124 <setvbuf+0x114>
 800611e:	4638      	mov	r0, r7
 8006120:	f000 f9aa 	bl	8006478 <__sinit>
 8006124:	f1b8 0f01 	cmp.w	r8, #1
 8006128:	bf08      	it	eq
 800612a:	89a3      	ldrheq	r3, [r4, #12]
 800612c:	6026      	str	r6, [r4, #0]
 800612e:	bf04      	itt	eq
 8006130:	f043 0301 	orreq.w	r3, r3, #1
 8006134:	81a3      	strheq	r3, [r4, #12]
 8006136:	89a2      	ldrh	r2, [r4, #12]
 8006138:	f012 0308 	ands.w	r3, r2, #8
 800613c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006140:	d01c      	beq.n	800617c <setvbuf+0x16c>
 8006142:	07d3      	lsls	r3, r2, #31
 8006144:	bf41      	itttt	mi
 8006146:	2300      	movmi	r3, #0
 8006148:	426d      	negmi	r5, r5
 800614a:	60a3      	strmi	r3, [r4, #8]
 800614c:	61a5      	strmi	r5, [r4, #24]
 800614e:	bf58      	it	pl
 8006150:	60a5      	strpl	r5, [r4, #8]
 8006152:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006154:	f015 0501 	ands.w	r5, r5, #1
 8006158:	d115      	bne.n	8006186 <setvbuf+0x176>
 800615a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800615e:	e7c8      	b.n	80060f2 <setvbuf+0xe2>
 8006160:	4648      	mov	r0, r9
 8006162:	f000 fa4f 	bl	8006604 <malloc>
 8006166:	4606      	mov	r6, r0
 8006168:	2800      	cmp	r0, #0
 800616a:	d0ae      	beq.n	80060ca <setvbuf+0xba>
 800616c:	464d      	mov	r5, r9
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006174:	81a3      	strh	r3, [r4, #12]
 8006176:	e7d0      	b.n	800611a <setvbuf+0x10a>
 8006178:	2500      	movs	r5, #0
 800617a:	e7a8      	b.n	80060ce <setvbuf+0xbe>
 800617c:	60a3      	str	r3, [r4, #8]
 800617e:	e7e8      	b.n	8006152 <setvbuf+0x142>
 8006180:	f04f 35ff 	mov.w	r5, #4294967295
 8006184:	e7b9      	b.n	80060fa <setvbuf+0xea>
 8006186:	2500      	movs	r5, #0
 8006188:	e7b7      	b.n	80060fa <setvbuf+0xea>
 800618a:	bf00      	nop
 800618c:	20000010 	.word	0x20000010
 8006190:	080070b4 	.word	0x080070b4
 8006194:	080070d4 	.word	0x080070d4
 8006198:	08007094 	.word	0x08007094

0800619c <sniprintf>:
 800619c:	b40c      	push	{r2, r3}
 800619e:	b530      	push	{r4, r5, lr}
 80061a0:	4b17      	ldr	r3, [pc, #92]	; (8006200 <sniprintf+0x64>)
 80061a2:	1e0c      	subs	r4, r1, #0
 80061a4:	681d      	ldr	r5, [r3, #0]
 80061a6:	b09d      	sub	sp, #116	; 0x74
 80061a8:	da08      	bge.n	80061bc <sniprintf+0x20>
 80061aa:	238b      	movs	r3, #139	; 0x8b
 80061ac:	602b      	str	r3, [r5, #0]
 80061ae:	f04f 30ff 	mov.w	r0, #4294967295
 80061b2:	b01d      	add	sp, #116	; 0x74
 80061b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061b8:	b002      	add	sp, #8
 80061ba:	4770      	bx	lr
 80061bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80061c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80061c4:	bf14      	ite	ne
 80061c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80061ca:	4623      	moveq	r3, r4
 80061cc:	9304      	str	r3, [sp, #16]
 80061ce:	9307      	str	r3, [sp, #28]
 80061d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061d4:	9002      	str	r0, [sp, #8]
 80061d6:	9006      	str	r0, [sp, #24]
 80061d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80061dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80061de:	ab21      	add	r3, sp, #132	; 0x84
 80061e0:	a902      	add	r1, sp, #8
 80061e2:	4628      	mov	r0, r5
 80061e4:	9301      	str	r3, [sp, #4]
 80061e6:	f000 fb51 	bl	800688c <_svfiprintf_r>
 80061ea:	1c43      	adds	r3, r0, #1
 80061ec:	bfbc      	itt	lt
 80061ee:	238b      	movlt	r3, #139	; 0x8b
 80061f0:	602b      	strlt	r3, [r5, #0]
 80061f2:	2c00      	cmp	r4, #0
 80061f4:	d0dd      	beq.n	80061b2 <sniprintf+0x16>
 80061f6:	9b02      	ldr	r3, [sp, #8]
 80061f8:	2200      	movs	r2, #0
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	e7d9      	b.n	80061b2 <sniprintf+0x16>
 80061fe:	bf00      	nop
 8006200:	20000010 	.word	0x20000010

08006204 <siprintf>:
 8006204:	b40e      	push	{r1, r2, r3}
 8006206:	b500      	push	{lr}
 8006208:	b09c      	sub	sp, #112	; 0x70
 800620a:	ab1d      	add	r3, sp, #116	; 0x74
 800620c:	9002      	str	r0, [sp, #8]
 800620e:	9006      	str	r0, [sp, #24]
 8006210:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006214:	4809      	ldr	r0, [pc, #36]	; (800623c <siprintf+0x38>)
 8006216:	9107      	str	r1, [sp, #28]
 8006218:	9104      	str	r1, [sp, #16]
 800621a:	4909      	ldr	r1, [pc, #36]	; (8006240 <siprintf+0x3c>)
 800621c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006220:	9105      	str	r1, [sp, #20]
 8006222:	6800      	ldr	r0, [r0, #0]
 8006224:	9301      	str	r3, [sp, #4]
 8006226:	a902      	add	r1, sp, #8
 8006228:	f000 fb30 	bl	800688c <_svfiprintf_r>
 800622c:	9b02      	ldr	r3, [sp, #8]
 800622e:	2200      	movs	r2, #0
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	b01c      	add	sp, #112	; 0x70
 8006234:	f85d eb04 	ldr.w	lr, [sp], #4
 8006238:	b003      	add	sp, #12
 800623a:	4770      	bx	lr
 800623c:	20000010 	.word	0x20000010
 8006240:	ffff0208 	.word	0xffff0208

08006244 <__sflush_r>:
 8006244:	898a      	ldrh	r2, [r1, #12]
 8006246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800624a:	4605      	mov	r5, r0
 800624c:	0710      	lsls	r0, r2, #28
 800624e:	460c      	mov	r4, r1
 8006250:	d458      	bmi.n	8006304 <__sflush_r+0xc0>
 8006252:	684b      	ldr	r3, [r1, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	dc05      	bgt.n	8006264 <__sflush_r+0x20>
 8006258:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	dc02      	bgt.n	8006264 <__sflush_r+0x20>
 800625e:	2000      	movs	r0, #0
 8006260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006266:	2e00      	cmp	r6, #0
 8006268:	d0f9      	beq.n	800625e <__sflush_r+0x1a>
 800626a:	2300      	movs	r3, #0
 800626c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006270:	682f      	ldr	r7, [r5, #0]
 8006272:	602b      	str	r3, [r5, #0]
 8006274:	d032      	beq.n	80062dc <__sflush_r+0x98>
 8006276:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006278:	89a3      	ldrh	r3, [r4, #12]
 800627a:	075a      	lsls	r2, r3, #29
 800627c:	d505      	bpl.n	800628a <__sflush_r+0x46>
 800627e:	6863      	ldr	r3, [r4, #4]
 8006280:	1ac0      	subs	r0, r0, r3
 8006282:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006284:	b10b      	cbz	r3, 800628a <__sflush_r+0x46>
 8006286:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006288:	1ac0      	subs	r0, r0, r3
 800628a:	2300      	movs	r3, #0
 800628c:	4602      	mov	r2, r0
 800628e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006290:	6a21      	ldr	r1, [r4, #32]
 8006292:	4628      	mov	r0, r5
 8006294:	47b0      	blx	r6
 8006296:	1c43      	adds	r3, r0, #1
 8006298:	89a3      	ldrh	r3, [r4, #12]
 800629a:	d106      	bne.n	80062aa <__sflush_r+0x66>
 800629c:	6829      	ldr	r1, [r5, #0]
 800629e:	291d      	cmp	r1, #29
 80062a0:	d82c      	bhi.n	80062fc <__sflush_r+0xb8>
 80062a2:	4a2a      	ldr	r2, [pc, #168]	; (800634c <__sflush_r+0x108>)
 80062a4:	40ca      	lsrs	r2, r1
 80062a6:	07d6      	lsls	r6, r2, #31
 80062a8:	d528      	bpl.n	80062fc <__sflush_r+0xb8>
 80062aa:	2200      	movs	r2, #0
 80062ac:	6062      	str	r2, [r4, #4]
 80062ae:	04d9      	lsls	r1, r3, #19
 80062b0:	6922      	ldr	r2, [r4, #16]
 80062b2:	6022      	str	r2, [r4, #0]
 80062b4:	d504      	bpl.n	80062c0 <__sflush_r+0x7c>
 80062b6:	1c42      	adds	r2, r0, #1
 80062b8:	d101      	bne.n	80062be <__sflush_r+0x7a>
 80062ba:	682b      	ldr	r3, [r5, #0]
 80062bc:	b903      	cbnz	r3, 80062c0 <__sflush_r+0x7c>
 80062be:	6560      	str	r0, [r4, #84]	; 0x54
 80062c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062c2:	602f      	str	r7, [r5, #0]
 80062c4:	2900      	cmp	r1, #0
 80062c6:	d0ca      	beq.n	800625e <__sflush_r+0x1a>
 80062c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062cc:	4299      	cmp	r1, r3
 80062ce:	d002      	beq.n	80062d6 <__sflush_r+0x92>
 80062d0:	4628      	mov	r0, r5
 80062d2:	f000 f99f 	bl	8006614 <_free_r>
 80062d6:	2000      	movs	r0, #0
 80062d8:	6360      	str	r0, [r4, #52]	; 0x34
 80062da:	e7c1      	b.n	8006260 <__sflush_r+0x1c>
 80062dc:	6a21      	ldr	r1, [r4, #32]
 80062de:	2301      	movs	r3, #1
 80062e0:	4628      	mov	r0, r5
 80062e2:	47b0      	blx	r6
 80062e4:	1c41      	adds	r1, r0, #1
 80062e6:	d1c7      	bne.n	8006278 <__sflush_r+0x34>
 80062e8:	682b      	ldr	r3, [r5, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0c4      	beq.n	8006278 <__sflush_r+0x34>
 80062ee:	2b1d      	cmp	r3, #29
 80062f0:	d001      	beq.n	80062f6 <__sflush_r+0xb2>
 80062f2:	2b16      	cmp	r3, #22
 80062f4:	d101      	bne.n	80062fa <__sflush_r+0xb6>
 80062f6:	602f      	str	r7, [r5, #0]
 80062f8:	e7b1      	b.n	800625e <__sflush_r+0x1a>
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006300:	81a3      	strh	r3, [r4, #12]
 8006302:	e7ad      	b.n	8006260 <__sflush_r+0x1c>
 8006304:	690f      	ldr	r7, [r1, #16]
 8006306:	2f00      	cmp	r7, #0
 8006308:	d0a9      	beq.n	800625e <__sflush_r+0x1a>
 800630a:	0793      	lsls	r3, r2, #30
 800630c:	680e      	ldr	r6, [r1, #0]
 800630e:	bf08      	it	eq
 8006310:	694b      	ldreq	r3, [r1, #20]
 8006312:	600f      	str	r7, [r1, #0]
 8006314:	bf18      	it	ne
 8006316:	2300      	movne	r3, #0
 8006318:	eba6 0807 	sub.w	r8, r6, r7
 800631c:	608b      	str	r3, [r1, #8]
 800631e:	f1b8 0f00 	cmp.w	r8, #0
 8006322:	dd9c      	ble.n	800625e <__sflush_r+0x1a>
 8006324:	6a21      	ldr	r1, [r4, #32]
 8006326:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006328:	4643      	mov	r3, r8
 800632a:	463a      	mov	r2, r7
 800632c:	4628      	mov	r0, r5
 800632e:	47b0      	blx	r6
 8006330:	2800      	cmp	r0, #0
 8006332:	dc06      	bgt.n	8006342 <__sflush_r+0xfe>
 8006334:	89a3      	ldrh	r3, [r4, #12]
 8006336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800633a:	81a3      	strh	r3, [r4, #12]
 800633c:	f04f 30ff 	mov.w	r0, #4294967295
 8006340:	e78e      	b.n	8006260 <__sflush_r+0x1c>
 8006342:	4407      	add	r7, r0
 8006344:	eba8 0800 	sub.w	r8, r8, r0
 8006348:	e7e9      	b.n	800631e <__sflush_r+0xda>
 800634a:	bf00      	nop
 800634c:	20400001 	.word	0x20400001

08006350 <_fflush_r>:
 8006350:	b538      	push	{r3, r4, r5, lr}
 8006352:	690b      	ldr	r3, [r1, #16]
 8006354:	4605      	mov	r5, r0
 8006356:	460c      	mov	r4, r1
 8006358:	b913      	cbnz	r3, 8006360 <_fflush_r+0x10>
 800635a:	2500      	movs	r5, #0
 800635c:	4628      	mov	r0, r5
 800635e:	bd38      	pop	{r3, r4, r5, pc}
 8006360:	b118      	cbz	r0, 800636a <_fflush_r+0x1a>
 8006362:	6983      	ldr	r3, [r0, #24]
 8006364:	b90b      	cbnz	r3, 800636a <_fflush_r+0x1a>
 8006366:	f000 f887 	bl	8006478 <__sinit>
 800636a:	4b14      	ldr	r3, [pc, #80]	; (80063bc <_fflush_r+0x6c>)
 800636c:	429c      	cmp	r4, r3
 800636e:	d11b      	bne.n	80063a8 <_fflush_r+0x58>
 8006370:	686c      	ldr	r4, [r5, #4]
 8006372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0ef      	beq.n	800635a <_fflush_r+0xa>
 800637a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800637c:	07d0      	lsls	r0, r2, #31
 800637e:	d404      	bmi.n	800638a <_fflush_r+0x3a>
 8006380:	0599      	lsls	r1, r3, #22
 8006382:	d402      	bmi.n	800638a <_fflush_r+0x3a>
 8006384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006386:	f000 f915 	bl	80065b4 <__retarget_lock_acquire_recursive>
 800638a:	4628      	mov	r0, r5
 800638c:	4621      	mov	r1, r4
 800638e:	f7ff ff59 	bl	8006244 <__sflush_r>
 8006392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006394:	07da      	lsls	r2, r3, #31
 8006396:	4605      	mov	r5, r0
 8006398:	d4e0      	bmi.n	800635c <_fflush_r+0xc>
 800639a:	89a3      	ldrh	r3, [r4, #12]
 800639c:	059b      	lsls	r3, r3, #22
 800639e:	d4dd      	bmi.n	800635c <_fflush_r+0xc>
 80063a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063a2:	f000 f908 	bl	80065b6 <__retarget_lock_release_recursive>
 80063a6:	e7d9      	b.n	800635c <_fflush_r+0xc>
 80063a8:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <_fflush_r+0x70>)
 80063aa:	429c      	cmp	r4, r3
 80063ac:	d101      	bne.n	80063b2 <_fflush_r+0x62>
 80063ae:	68ac      	ldr	r4, [r5, #8]
 80063b0:	e7df      	b.n	8006372 <_fflush_r+0x22>
 80063b2:	4b04      	ldr	r3, [pc, #16]	; (80063c4 <_fflush_r+0x74>)
 80063b4:	429c      	cmp	r4, r3
 80063b6:	bf08      	it	eq
 80063b8:	68ec      	ldreq	r4, [r5, #12]
 80063ba:	e7da      	b.n	8006372 <_fflush_r+0x22>
 80063bc:	080070b4 	.word	0x080070b4
 80063c0:	080070d4 	.word	0x080070d4
 80063c4:	08007094 	.word	0x08007094

080063c8 <std>:
 80063c8:	2300      	movs	r3, #0
 80063ca:	b510      	push	{r4, lr}
 80063cc:	4604      	mov	r4, r0
 80063ce:	e9c0 3300 	strd	r3, r3, [r0]
 80063d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063d6:	6083      	str	r3, [r0, #8]
 80063d8:	8181      	strh	r1, [r0, #12]
 80063da:	6643      	str	r3, [r0, #100]	; 0x64
 80063dc:	81c2      	strh	r2, [r0, #14]
 80063de:	6183      	str	r3, [r0, #24]
 80063e0:	4619      	mov	r1, r3
 80063e2:	2208      	movs	r2, #8
 80063e4:	305c      	adds	r0, #92	; 0x5c
 80063e6:	f7ff fe0b 	bl	8006000 <memset>
 80063ea:	4b05      	ldr	r3, [pc, #20]	; (8006400 <std+0x38>)
 80063ec:	6263      	str	r3, [r4, #36]	; 0x24
 80063ee:	4b05      	ldr	r3, [pc, #20]	; (8006404 <std+0x3c>)
 80063f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80063f2:	4b05      	ldr	r3, [pc, #20]	; (8006408 <std+0x40>)
 80063f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063f6:	4b05      	ldr	r3, [pc, #20]	; (800640c <std+0x44>)
 80063f8:	6224      	str	r4, [r4, #32]
 80063fa:	6323      	str	r3, [r4, #48]	; 0x30
 80063fc:	bd10      	pop	{r4, pc}
 80063fe:	bf00      	nop
 8006400:	08006dd5 	.word	0x08006dd5
 8006404:	08006df7 	.word	0x08006df7
 8006408:	08006e2f 	.word	0x08006e2f
 800640c:	08006e53 	.word	0x08006e53

08006410 <_cleanup_r>:
 8006410:	4901      	ldr	r1, [pc, #4]	; (8006418 <_cleanup_r+0x8>)
 8006412:	f000 b8af 	b.w	8006574 <_fwalk_reent>
 8006416:	bf00      	nop
 8006418:	08006351 	.word	0x08006351

0800641c <__sfmoreglue>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	2268      	movs	r2, #104	; 0x68
 8006420:	1e4d      	subs	r5, r1, #1
 8006422:	4355      	muls	r5, r2
 8006424:	460e      	mov	r6, r1
 8006426:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800642a:	f000 f95f 	bl	80066ec <_malloc_r>
 800642e:	4604      	mov	r4, r0
 8006430:	b140      	cbz	r0, 8006444 <__sfmoreglue+0x28>
 8006432:	2100      	movs	r1, #0
 8006434:	e9c0 1600 	strd	r1, r6, [r0]
 8006438:	300c      	adds	r0, #12
 800643a:	60a0      	str	r0, [r4, #8]
 800643c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006440:	f7ff fdde 	bl	8006000 <memset>
 8006444:	4620      	mov	r0, r4
 8006446:	bd70      	pop	{r4, r5, r6, pc}

08006448 <__sfp_lock_acquire>:
 8006448:	4801      	ldr	r0, [pc, #4]	; (8006450 <__sfp_lock_acquire+0x8>)
 800644a:	f000 b8b3 	b.w	80065b4 <__retarget_lock_acquire_recursive>
 800644e:	bf00      	nop
 8006450:	20000945 	.word	0x20000945

08006454 <__sfp_lock_release>:
 8006454:	4801      	ldr	r0, [pc, #4]	; (800645c <__sfp_lock_release+0x8>)
 8006456:	f000 b8ae 	b.w	80065b6 <__retarget_lock_release_recursive>
 800645a:	bf00      	nop
 800645c:	20000945 	.word	0x20000945

08006460 <__sinit_lock_acquire>:
 8006460:	4801      	ldr	r0, [pc, #4]	; (8006468 <__sinit_lock_acquire+0x8>)
 8006462:	f000 b8a7 	b.w	80065b4 <__retarget_lock_acquire_recursive>
 8006466:	bf00      	nop
 8006468:	20000946 	.word	0x20000946

0800646c <__sinit_lock_release>:
 800646c:	4801      	ldr	r0, [pc, #4]	; (8006474 <__sinit_lock_release+0x8>)
 800646e:	f000 b8a2 	b.w	80065b6 <__retarget_lock_release_recursive>
 8006472:	bf00      	nop
 8006474:	20000946 	.word	0x20000946

08006478 <__sinit>:
 8006478:	b510      	push	{r4, lr}
 800647a:	4604      	mov	r4, r0
 800647c:	f7ff fff0 	bl	8006460 <__sinit_lock_acquire>
 8006480:	69a3      	ldr	r3, [r4, #24]
 8006482:	b11b      	cbz	r3, 800648c <__sinit+0x14>
 8006484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006488:	f7ff bff0 	b.w	800646c <__sinit_lock_release>
 800648c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006490:	6523      	str	r3, [r4, #80]	; 0x50
 8006492:	4b13      	ldr	r3, [pc, #76]	; (80064e0 <__sinit+0x68>)
 8006494:	4a13      	ldr	r2, [pc, #76]	; (80064e4 <__sinit+0x6c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	62a2      	str	r2, [r4, #40]	; 0x28
 800649a:	42a3      	cmp	r3, r4
 800649c:	bf04      	itt	eq
 800649e:	2301      	moveq	r3, #1
 80064a0:	61a3      	streq	r3, [r4, #24]
 80064a2:	4620      	mov	r0, r4
 80064a4:	f000 f820 	bl	80064e8 <__sfp>
 80064a8:	6060      	str	r0, [r4, #4]
 80064aa:	4620      	mov	r0, r4
 80064ac:	f000 f81c 	bl	80064e8 <__sfp>
 80064b0:	60a0      	str	r0, [r4, #8]
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 f818 	bl	80064e8 <__sfp>
 80064b8:	2200      	movs	r2, #0
 80064ba:	60e0      	str	r0, [r4, #12]
 80064bc:	2104      	movs	r1, #4
 80064be:	6860      	ldr	r0, [r4, #4]
 80064c0:	f7ff ff82 	bl	80063c8 <std>
 80064c4:	68a0      	ldr	r0, [r4, #8]
 80064c6:	2201      	movs	r2, #1
 80064c8:	2109      	movs	r1, #9
 80064ca:	f7ff ff7d 	bl	80063c8 <std>
 80064ce:	68e0      	ldr	r0, [r4, #12]
 80064d0:	2202      	movs	r2, #2
 80064d2:	2112      	movs	r1, #18
 80064d4:	f7ff ff78 	bl	80063c8 <std>
 80064d8:	2301      	movs	r3, #1
 80064da:	61a3      	str	r3, [r4, #24]
 80064dc:	e7d2      	b.n	8006484 <__sinit+0xc>
 80064de:	bf00      	nop
 80064e0:	08007090 	.word	0x08007090
 80064e4:	08006411 	.word	0x08006411

080064e8 <__sfp>:
 80064e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ea:	4607      	mov	r7, r0
 80064ec:	f7ff ffac 	bl	8006448 <__sfp_lock_acquire>
 80064f0:	4b1e      	ldr	r3, [pc, #120]	; (800656c <__sfp+0x84>)
 80064f2:	681e      	ldr	r6, [r3, #0]
 80064f4:	69b3      	ldr	r3, [r6, #24]
 80064f6:	b913      	cbnz	r3, 80064fe <__sfp+0x16>
 80064f8:	4630      	mov	r0, r6
 80064fa:	f7ff ffbd 	bl	8006478 <__sinit>
 80064fe:	3648      	adds	r6, #72	; 0x48
 8006500:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006504:	3b01      	subs	r3, #1
 8006506:	d503      	bpl.n	8006510 <__sfp+0x28>
 8006508:	6833      	ldr	r3, [r6, #0]
 800650a:	b30b      	cbz	r3, 8006550 <__sfp+0x68>
 800650c:	6836      	ldr	r6, [r6, #0]
 800650e:	e7f7      	b.n	8006500 <__sfp+0x18>
 8006510:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006514:	b9d5      	cbnz	r5, 800654c <__sfp+0x64>
 8006516:	4b16      	ldr	r3, [pc, #88]	; (8006570 <__sfp+0x88>)
 8006518:	60e3      	str	r3, [r4, #12]
 800651a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800651e:	6665      	str	r5, [r4, #100]	; 0x64
 8006520:	f000 f847 	bl	80065b2 <__retarget_lock_init_recursive>
 8006524:	f7ff ff96 	bl	8006454 <__sfp_lock_release>
 8006528:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800652c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006530:	6025      	str	r5, [r4, #0]
 8006532:	61a5      	str	r5, [r4, #24]
 8006534:	2208      	movs	r2, #8
 8006536:	4629      	mov	r1, r5
 8006538:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800653c:	f7ff fd60 	bl	8006000 <memset>
 8006540:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006544:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006548:	4620      	mov	r0, r4
 800654a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800654c:	3468      	adds	r4, #104	; 0x68
 800654e:	e7d9      	b.n	8006504 <__sfp+0x1c>
 8006550:	2104      	movs	r1, #4
 8006552:	4638      	mov	r0, r7
 8006554:	f7ff ff62 	bl	800641c <__sfmoreglue>
 8006558:	4604      	mov	r4, r0
 800655a:	6030      	str	r0, [r6, #0]
 800655c:	2800      	cmp	r0, #0
 800655e:	d1d5      	bne.n	800650c <__sfp+0x24>
 8006560:	f7ff ff78 	bl	8006454 <__sfp_lock_release>
 8006564:	230c      	movs	r3, #12
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	e7ee      	b.n	8006548 <__sfp+0x60>
 800656a:	bf00      	nop
 800656c:	08007090 	.word	0x08007090
 8006570:	ffff0001 	.word	0xffff0001

08006574 <_fwalk_reent>:
 8006574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006578:	4606      	mov	r6, r0
 800657a:	4688      	mov	r8, r1
 800657c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006580:	2700      	movs	r7, #0
 8006582:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006586:	f1b9 0901 	subs.w	r9, r9, #1
 800658a:	d505      	bpl.n	8006598 <_fwalk_reent+0x24>
 800658c:	6824      	ldr	r4, [r4, #0]
 800658e:	2c00      	cmp	r4, #0
 8006590:	d1f7      	bne.n	8006582 <_fwalk_reent+0xe>
 8006592:	4638      	mov	r0, r7
 8006594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006598:	89ab      	ldrh	r3, [r5, #12]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d907      	bls.n	80065ae <_fwalk_reent+0x3a>
 800659e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065a2:	3301      	adds	r3, #1
 80065a4:	d003      	beq.n	80065ae <_fwalk_reent+0x3a>
 80065a6:	4629      	mov	r1, r5
 80065a8:	4630      	mov	r0, r6
 80065aa:	47c0      	blx	r8
 80065ac:	4307      	orrs	r7, r0
 80065ae:	3568      	adds	r5, #104	; 0x68
 80065b0:	e7e9      	b.n	8006586 <_fwalk_reent+0x12>

080065b2 <__retarget_lock_init_recursive>:
 80065b2:	4770      	bx	lr

080065b4 <__retarget_lock_acquire_recursive>:
 80065b4:	4770      	bx	lr

080065b6 <__retarget_lock_release_recursive>:
 80065b6:	4770      	bx	lr

080065b8 <__swhatbuf_r>:
 80065b8:	b570      	push	{r4, r5, r6, lr}
 80065ba:	460e      	mov	r6, r1
 80065bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c0:	2900      	cmp	r1, #0
 80065c2:	b096      	sub	sp, #88	; 0x58
 80065c4:	4614      	mov	r4, r2
 80065c6:	461d      	mov	r5, r3
 80065c8:	da08      	bge.n	80065dc <__swhatbuf_r+0x24>
 80065ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	602a      	str	r2, [r5, #0]
 80065d2:	061a      	lsls	r2, r3, #24
 80065d4:	d410      	bmi.n	80065f8 <__swhatbuf_r+0x40>
 80065d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065da:	e00e      	b.n	80065fa <__swhatbuf_r+0x42>
 80065dc:	466a      	mov	r2, sp
 80065de:	f000 fc5f 	bl	8006ea0 <_fstat_r>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	dbf1      	blt.n	80065ca <__swhatbuf_r+0x12>
 80065e6:	9a01      	ldr	r2, [sp, #4]
 80065e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80065ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80065f0:	425a      	negs	r2, r3
 80065f2:	415a      	adcs	r2, r3
 80065f4:	602a      	str	r2, [r5, #0]
 80065f6:	e7ee      	b.n	80065d6 <__swhatbuf_r+0x1e>
 80065f8:	2340      	movs	r3, #64	; 0x40
 80065fa:	2000      	movs	r0, #0
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	b016      	add	sp, #88	; 0x58
 8006600:	bd70      	pop	{r4, r5, r6, pc}
	...

08006604 <malloc>:
 8006604:	4b02      	ldr	r3, [pc, #8]	; (8006610 <malloc+0xc>)
 8006606:	4601      	mov	r1, r0
 8006608:	6818      	ldr	r0, [r3, #0]
 800660a:	f000 b86f 	b.w	80066ec <_malloc_r>
 800660e:	bf00      	nop
 8006610:	20000010 	.word	0x20000010

08006614 <_free_r>:
 8006614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006616:	2900      	cmp	r1, #0
 8006618:	d044      	beq.n	80066a4 <_free_r+0x90>
 800661a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800661e:	9001      	str	r0, [sp, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	f1a1 0404 	sub.w	r4, r1, #4
 8006626:	bfb8      	it	lt
 8006628:	18e4      	addlt	r4, r4, r3
 800662a:	f000 fc85 	bl	8006f38 <__malloc_lock>
 800662e:	4a1e      	ldr	r2, [pc, #120]	; (80066a8 <_free_r+0x94>)
 8006630:	9801      	ldr	r0, [sp, #4]
 8006632:	6813      	ldr	r3, [r2, #0]
 8006634:	b933      	cbnz	r3, 8006644 <_free_r+0x30>
 8006636:	6063      	str	r3, [r4, #4]
 8006638:	6014      	str	r4, [r2, #0]
 800663a:	b003      	add	sp, #12
 800663c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006640:	f000 bc80 	b.w	8006f44 <__malloc_unlock>
 8006644:	42a3      	cmp	r3, r4
 8006646:	d908      	bls.n	800665a <_free_r+0x46>
 8006648:	6825      	ldr	r5, [r4, #0]
 800664a:	1961      	adds	r1, r4, r5
 800664c:	428b      	cmp	r3, r1
 800664e:	bf01      	itttt	eq
 8006650:	6819      	ldreq	r1, [r3, #0]
 8006652:	685b      	ldreq	r3, [r3, #4]
 8006654:	1949      	addeq	r1, r1, r5
 8006656:	6021      	streq	r1, [r4, #0]
 8006658:	e7ed      	b.n	8006636 <_free_r+0x22>
 800665a:	461a      	mov	r2, r3
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	b10b      	cbz	r3, 8006664 <_free_r+0x50>
 8006660:	42a3      	cmp	r3, r4
 8006662:	d9fa      	bls.n	800665a <_free_r+0x46>
 8006664:	6811      	ldr	r1, [r2, #0]
 8006666:	1855      	adds	r5, r2, r1
 8006668:	42a5      	cmp	r5, r4
 800666a:	d10b      	bne.n	8006684 <_free_r+0x70>
 800666c:	6824      	ldr	r4, [r4, #0]
 800666e:	4421      	add	r1, r4
 8006670:	1854      	adds	r4, r2, r1
 8006672:	42a3      	cmp	r3, r4
 8006674:	6011      	str	r1, [r2, #0]
 8006676:	d1e0      	bne.n	800663a <_free_r+0x26>
 8006678:	681c      	ldr	r4, [r3, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	6053      	str	r3, [r2, #4]
 800667e:	4421      	add	r1, r4
 8006680:	6011      	str	r1, [r2, #0]
 8006682:	e7da      	b.n	800663a <_free_r+0x26>
 8006684:	d902      	bls.n	800668c <_free_r+0x78>
 8006686:	230c      	movs	r3, #12
 8006688:	6003      	str	r3, [r0, #0]
 800668a:	e7d6      	b.n	800663a <_free_r+0x26>
 800668c:	6825      	ldr	r5, [r4, #0]
 800668e:	1961      	adds	r1, r4, r5
 8006690:	428b      	cmp	r3, r1
 8006692:	bf04      	itt	eq
 8006694:	6819      	ldreq	r1, [r3, #0]
 8006696:	685b      	ldreq	r3, [r3, #4]
 8006698:	6063      	str	r3, [r4, #4]
 800669a:	bf04      	itt	eq
 800669c:	1949      	addeq	r1, r1, r5
 800669e:	6021      	streq	r1, [r4, #0]
 80066a0:	6054      	str	r4, [r2, #4]
 80066a2:	e7ca      	b.n	800663a <_free_r+0x26>
 80066a4:	b003      	add	sp, #12
 80066a6:	bd30      	pop	{r4, r5, pc}
 80066a8:	20000948 	.word	0x20000948

080066ac <sbrk_aligned>:
 80066ac:	b570      	push	{r4, r5, r6, lr}
 80066ae:	4e0e      	ldr	r6, [pc, #56]	; (80066e8 <sbrk_aligned+0x3c>)
 80066b0:	460c      	mov	r4, r1
 80066b2:	6831      	ldr	r1, [r6, #0]
 80066b4:	4605      	mov	r5, r0
 80066b6:	b911      	cbnz	r1, 80066be <sbrk_aligned+0x12>
 80066b8:	f000 fb7c 	bl	8006db4 <_sbrk_r>
 80066bc:	6030      	str	r0, [r6, #0]
 80066be:	4621      	mov	r1, r4
 80066c0:	4628      	mov	r0, r5
 80066c2:	f000 fb77 	bl	8006db4 <_sbrk_r>
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	d00a      	beq.n	80066e0 <sbrk_aligned+0x34>
 80066ca:	1cc4      	adds	r4, r0, #3
 80066cc:	f024 0403 	bic.w	r4, r4, #3
 80066d0:	42a0      	cmp	r0, r4
 80066d2:	d007      	beq.n	80066e4 <sbrk_aligned+0x38>
 80066d4:	1a21      	subs	r1, r4, r0
 80066d6:	4628      	mov	r0, r5
 80066d8:	f000 fb6c 	bl	8006db4 <_sbrk_r>
 80066dc:	3001      	adds	r0, #1
 80066de:	d101      	bne.n	80066e4 <sbrk_aligned+0x38>
 80066e0:	f04f 34ff 	mov.w	r4, #4294967295
 80066e4:	4620      	mov	r0, r4
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	2000094c 	.word	0x2000094c

080066ec <_malloc_r>:
 80066ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f0:	1ccd      	adds	r5, r1, #3
 80066f2:	f025 0503 	bic.w	r5, r5, #3
 80066f6:	3508      	adds	r5, #8
 80066f8:	2d0c      	cmp	r5, #12
 80066fa:	bf38      	it	cc
 80066fc:	250c      	movcc	r5, #12
 80066fe:	2d00      	cmp	r5, #0
 8006700:	4607      	mov	r7, r0
 8006702:	db01      	blt.n	8006708 <_malloc_r+0x1c>
 8006704:	42a9      	cmp	r1, r5
 8006706:	d905      	bls.n	8006714 <_malloc_r+0x28>
 8006708:	230c      	movs	r3, #12
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	2600      	movs	r6, #0
 800670e:	4630      	mov	r0, r6
 8006710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006714:	4e2e      	ldr	r6, [pc, #184]	; (80067d0 <_malloc_r+0xe4>)
 8006716:	f000 fc0f 	bl	8006f38 <__malloc_lock>
 800671a:	6833      	ldr	r3, [r6, #0]
 800671c:	461c      	mov	r4, r3
 800671e:	bb34      	cbnz	r4, 800676e <_malloc_r+0x82>
 8006720:	4629      	mov	r1, r5
 8006722:	4638      	mov	r0, r7
 8006724:	f7ff ffc2 	bl	80066ac <sbrk_aligned>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	4604      	mov	r4, r0
 800672c:	d14d      	bne.n	80067ca <_malloc_r+0xde>
 800672e:	6834      	ldr	r4, [r6, #0]
 8006730:	4626      	mov	r6, r4
 8006732:	2e00      	cmp	r6, #0
 8006734:	d140      	bne.n	80067b8 <_malloc_r+0xcc>
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	4631      	mov	r1, r6
 800673a:	4638      	mov	r0, r7
 800673c:	eb04 0803 	add.w	r8, r4, r3
 8006740:	f000 fb38 	bl	8006db4 <_sbrk_r>
 8006744:	4580      	cmp	r8, r0
 8006746:	d13a      	bne.n	80067be <_malloc_r+0xd2>
 8006748:	6821      	ldr	r1, [r4, #0]
 800674a:	3503      	adds	r5, #3
 800674c:	1a6d      	subs	r5, r5, r1
 800674e:	f025 0503 	bic.w	r5, r5, #3
 8006752:	3508      	adds	r5, #8
 8006754:	2d0c      	cmp	r5, #12
 8006756:	bf38      	it	cc
 8006758:	250c      	movcc	r5, #12
 800675a:	4629      	mov	r1, r5
 800675c:	4638      	mov	r0, r7
 800675e:	f7ff ffa5 	bl	80066ac <sbrk_aligned>
 8006762:	3001      	adds	r0, #1
 8006764:	d02b      	beq.n	80067be <_malloc_r+0xd2>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	442b      	add	r3, r5
 800676a:	6023      	str	r3, [r4, #0]
 800676c:	e00e      	b.n	800678c <_malloc_r+0xa0>
 800676e:	6822      	ldr	r2, [r4, #0]
 8006770:	1b52      	subs	r2, r2, r5
 8006772:	d41e      	bmi.n	80067b2 <_malloc_r+0xc6>
 8006774:	2a0b      	cmp	r2, #11
 8006776:	d916      	bls.n	80067a6 <_malloc_r+0xba>
 8006778:	1961      	adds	r1, r4, r5
 800677a:	42a3      	cmp	r3, r4
 800677c:	6025      	str	r5, [r4, #0]
 800677e:	bf18      	it	ne
 8006780:	6059      	strne	r1, [r3, #4]
 8006782:	6863      	ldr	r3, [r4, #4]
 8006784:	bf08      	it	eq
 8006786:	6031      	streq	r1, [r6, #0]
 8006788:	5162      	str	r2, [r4, r5]
 800678a:	604b      	str	r3, [r1, #4]
 800678c:	4638      	mov	r0, r7
 800678e:	f104 060b 	add.w	r6, r4, #11
 8006792:	f000 fbd7 	bl	8006f44 <__malloc_unlock>
 8006796:	f026 0607 	bic.w	r6, r6, #7
 800679a:	1d23      	adds	r3, r4, #4
 800679c:	1af2      	subs	r2, r6, r3
 800679e:	d0b6      	beq.n	800670e <_malloc_r+0x22>
 80067a0:	1b9b      	subs	r3, r3, r6
 80067a2:	50a3      	str	r3, [r4, r2]
 80067a4:	e7b3      	b.n	800670e <_malloc_r+0x22>
 80067a6:	6862      	ldr	r2, [r4, #4]
 80067a8:	42a3      	cmp	r3, r4
 80067aa:	bf0c      	ite	eq
 80067ac:	6032      	streq	r2, [r6, #0]
 80067ae:	605a      	strne	r2, [r3, #4]
 80067b0:	e7ec      	b.n	800678c <_malloc_r+0xa0>
 80067b2:	4623      	mov	r3, r4
 80067b4:	6864      	ldr	r4, [r4, #4]
 80067b6:	e7b2      	b.n	800671e <_malloc_r+0x32>
 80067b8:	4634      	mov	r4, r6
 80067ba:	6876      	ldr	r6, [r6, #4]
 80067bc:	e7b9      	b.n	8006732 <_malloc_r+0x46>
 80067be:	230c      	movs	r3, #12
 80067c0:	603b      	str	r3, [r7, #0]
 80067c2:	4638      	mov	r0, r7
 80067c4:	f000 fbbe 	bl	8006f44 <__malloc_unlock>
 80067c8:	e7a1      	b.n	800670e <_malloc_r+0x22>
 80067ca:	6025      	str	r5, [r4, #0]
 80067cc:	e7de      	b.n	800678c <_malloc_r+0xa0>
 80067ce:	bf00      	nop
 80067d0:	20000948 	.word	0x20000948

080067d4 <__ssputs_r>:
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	688e      	ldr	r6, [r1, #8]
 80067da:	429e      	cmp	r6, r3
 80067dc:	4682      	mov	sl, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	4690      	mov	r8, r2
 80067e2:	461f      	mov	r7, r3
 80067e4:	d838      	bhi.n	8006858 <__ssputs_r+0x84>
 80067e6:	898a      	ldrh	r2, [r1, #12]
 80067e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067ec:	d032      	beq.n	8006854 <__ssputs_r+0x80>
 80067ee:	6825      	ldr	r5, [r4, #0]
 80067f0:	6909      	ldr	r1, [r1, #16]
 80067f2:	eba5 0901 	sub.w	r9, r5, r1
 80067f6:	6965      	ldr	r5, [r4, #20]
 80067f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006800:	3301      	adds	r3, #1
 8006802:	444b      	add	r3, r9
 8006804:	106d      	asrs	r5, r5, #1
 8006806:	429d      	cmp	r5, r3
 8006808:	bf38      	it	cc
 800680a:	461d      	movcc	r5, r3
 800680c:	0553      	lsls	r3, r2, #21
 800680e:	d531      	bpl.n	8006874 <__ssputs_r+0xa0>
 8006810:	4629      	mov	r1, r5
 8006812:	f7ff ff6b 	bl	80066ec <_malloc_r>
 8006816:	4606      	mov	r6, r0
 8006818:	b950      	cbnz	r0, 8006830 <__ssputs_r+0x5c>
 800681a:	230c      	movs	r3, #12
 800681c:	f8ca 3000 	str.w	r3, [sl]
 8006820:	89a3      	ldrh	r3, [r4, #12]
 8006822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006826:	81a3      	strh	r3, [r4, #12]
 8006828:	f04f 30ff 	mov.w	r0, #4294967295
 800682c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006830:	6921      	ldr	r1, [r4, #16]
 8006832:	464a      	mov	r2, r9
 8006834:	f000 fb58 	bl	8006ee8 <memcpy>
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800683e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006842:	81a3      	strh	r3, [r4, #12]
 8006844:	6126      	str	r6, [r4, #16]
 8006846:	6165      	str	r5, [r4, #20]
 8006848:	444e      	add	r6, r9
 800684a:	eba5 0509 	sub.w	r5, r5, r9
 800684e:	6026      	str	r6, [r4, #0]
 8006850:	60a5      	str	r5, [r4, #8]
 8006852:	463e      	mov	r6, r7
 8006854:	42be      	cmp	r6, r7
 8006856:	d900      	bls.n	800685a <__ssputs_r+0x86>
 8006858:	463e      	mov	r6, r7
 800685a:	6820      	ldr	r0, [r4, #0]
 800685c:	4632      	mov	r2, r6
 800685e:	4641      	mov	r1, r8
 8006860:	f000 fb50 	bl	8006f04 <memmove>
 8006864:	68a3      	ldr	r3, [r4, #8]
 8006866:	1b9b      	subs	r3, r3, r6
 8006868:	60a3      	str	r3, [r4, #8]
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	4433      	add	r3, r6
 800686e:	6023      	str	r3, [r4, #0]
 8006870:	2000      	movs	r0, #0
 8006872:	e7db      	b.n	800682c <__ssputs_r+0x58>
 8006874:	462a      	mov	r2, r5
 8006876:	f000 fb6b 	bl	8006f50 <_realloc_r>
 800687a:	4606      	mov	r6, r0
 800687c:	2800      	cmp	r0, #0
 800687e:	d1e1      	bne.n	8006844 <__ssputs_r+0x70>
 8006880:	6921      	ldr	r1, [r4, #16]
 8006882:	4650      	mov	r0, sl
 8006884:	f7ff fec6 	bl	8006614 <_free_r>
 8006888:	e7c7      	b.n	800681a <__ssputs_r+0x46>
	...

0800688c <_svfiprintf_r>:
 800688c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006890:	4698      	mov	r8, r3
 8006892:	898b      	ldrh	r3, [r1, #12]
 8006894:	061b      	lsls	r3, r3, #24
 8006896:	b09d      	sub	sp, #116	; 0x74
 8006898:	4607      	mov	r7, r0
 800689a:	460d      	mov	r5, r1
 800689c:	4614      	mov	r4, r2
 800689e:	d50e      	bpl.n	80068be <_svfiprintf_r+0x32>
 80068a0:	690b      	ldr	r3, [r1, #16]
 80068a2:	b963      	cbnz	r3, 80068be <_svfiprintf_r+0x32>
 80068a4:	2140      	movs	r1, #64	; 0x40
 80068a6:	f7ff ff21 	bl	80066ec <_malloc_r>
 80068aa:	6028      	str	r0, [r5, #0]
 80068ac:	6128      	str	r0, [r5, #16]
 80068ae:	b920      	cbnz	r0, 80068ba <_svfiprintf_r+0x2e>
 80068b0:	230c      	movs	r3, #12
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	f04f 30ff 	mov.w	r0, #4294967295
 80068b8:	e0d1      	b.n	8006a5e <_svfiprintf_r+0x1d2>
 80068ba:	2340      	movs	r3, #64	; 0x40
 80068bc:	616b      	str	r3, [r5, #20]
 80068be:	2300      	movs	r3, #0
 80068c0:	9309      	str	r3, [sp, #36]	; 0x24
 80068c2:	2320      	movs	r3, #32
 80068c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80068cc:	2330      	movs	r3, #48	; 0x30
 80068ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a78 <_svfiprintf_r+0x1ec>
 80068d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068d6:	f04f 0901 	mov.w	r9, #1
 80068da:	4623      	mov	r3, r4
 80068dc:	469a      	mov	sl, r3
 80068de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068e2:	b10a      	cbz	r2, 80068e8 <_svfiprintf_r+0x5c>
 80068e4:	2a25      	cmp	r2, #37	; 0x25
 80068e6:	d1f9      	bne.n	80068dc <_svfiprintf_r+0x50>
 80068e8:	ebba 0b04 	subs.w	fp, sl, r4
 80068ec:	d00b      	beq.n	8006906 <_svfiprintf_r+0x7a>
 80068ee:	465b      	mov	r3, fp
 80068f0:	4622      	mov	r2, r4
 80068f2:	4629      	mov	r1, r5
 80068f4:	4638      	mov	r0, r7
 80068f6:	f7ff ff6d 	bl	80067d4 <__ssputs_r>
 80068fa:	3001      	adds	r0, #1
 80068fc:	f000 80aa 	beq.w	8006a54 <_svfiprintf_r+0x1c8>
 8006900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006902:	445a      	add	r2, fp
 8006904:	9209      	str	r2, [sp, #36]	; 0x24
 8006906:	f89a 3000 	ldrb.w	r3, [sl]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 80a2 	beq.w	8006a54 <_svfiprintf_r+0x1c8>
 8006910:	2300      	movs	r3, #0
 8006912:	f04f 32ff 	mov.w	r2, #4294967295
 8006916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800691a:	f10a 0a01 	add.w	sl, sl, #1
 800691e:	9304      	str	r3, [sp, #16]
 8006920:	9307      	str	r3, [sp, #28]
 8006922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006926:	931a      	str	r3, [sp, #104]	; 0x68
 8006928:	4654      	mov	r4, sl
 800692a:	2205      	movs	r2, #5
 800692c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006930:	4851      	ldr	r0, [pc, #324]	; (8006a78 <_svfiprintf_r+0x1ec>)
 8006932:	f7f9 fc65 	bl	8000200 <memchr>
 8006936:	9a04      	ldr	r2, [sp, #16]
 8006938:	b9d8      	cbnz	r0, 8006972 <_svfiprintf_r+0xe6>
 800693a:	06d0      	lsls	r0, r2, #27
 800693c:	bf44      	itt	mi
 800693e:	2320      	movmi	r3, #32
 8006940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006944:	0711      	lsls	r1, r2, #28
 8006946:	bf44      	itt	mi
 8006948:	232b      	movmi	r3, #43	; 0x2b
 800694a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800694e:	f89a 3000 	ldrb.w	r3, [sl]
 8006952:	2b2a      	cmp	r3, #42	; 0x2a
 8006954:	d015      	beq.n	8006982 <_svfiprintf_r+0xf6>
 8006956:	9a07      	ldr	r2, [sp, #28]
 8006958:	4654      	mov	r4, sl
 800695a:	2000      	movs	r0, #0
 800695c:	f04f 0c0a 	mov.w	ip, #10
 8006960:	4621      	mov	r1, r4
 8006962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006966:	3b30      	subs	r3, #48	; 0x30
 8006968:	2b09      	cmp	r3, #9
 800696a:	d94e      	bls.n	8006a0a <_svfiprintf_r+0x17e>
 800696c:	b1b0      	cbz	r0, 800699c <_svfiprintf_r+0x110>
 800696e:	9207      	str	r2, [sp, #28]
 8006970:	e014      	b.n	800699c <_svfiprintf_r+0x110>
 8006972:	eba0 0308 	sub.w	r3, r0, r8
 8006976:	fa09 f303 	lsl.w	r3, r9, r3
 800697a:	4313      	orrs	r3, r2
 800697c:	9304      	str	r3, [sp, #16]
 800697e:	46a2      	mov	sl, r4
 8006980:	e7d2      	b.n	8006928 <_svfiprintf_r+0x9c>
 8006982:	9b03      	ldr	r3, [sp, #12]
 8006984:	1d19      	adds	r1, r3, #4
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	9103      	str	r1, [sp, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	bfbb      	ittet	lt
 800698e:	425b      	neglt	r3, r3
 8006990:	f042 0202 	orrlt.w	r2, r2, #2
 8006994:	9307      	strge	r3, [sp, #28]
 8006996:	9307      	strlt	r3, [sp, #28]
 8006998:	bfb8      	it	lt
 800699a:	9204      	strlt	r2, [sp, #16]
 800699c:	7823      	ldrb	r3, [r4, #0]
 800699e:	2b2e      	cmp	r3, #46	; 0x2e
 80069a0:	d10c      	bne.n	80069bc <_svfiprintf_r+0x130>
 80069a2:	7863      	ldrb	r3, [r4, #1]
 80069a4:	2b2a      	cmp	r3, #42	; 0x2a
 80069a6:	d135      	bne.n	8006a14 <_svfiprintf_r+0x188>
 80069a8:	9b03      	ldr	r3, [sp, #12]
 80069aa:	1d1a      	adds	r2, r3, #4
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	9203      	str	r2, [sp, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bfb8      	it	lt
 80069b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80069b8:	3402      	adds	r4, #2
 80069ba:	9305      	str	r3, [sp, #20]
 80069bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a88 <_svfiprintf_r+0x1fc>
 80069c0:	7821      	ldrb	r1, [r4, #0]
 80069c2:	2203      	movs	r2, #3
 80069c4:	4650      	mov	r0, sl
 80069c6:	f7f9 fc1b 	bl	8000200 <memchr>
 80069ca:	b140      	cbz	r0, 80069de <_svfiprintf_r+0x152>
 80069cc:	2340      	movs	r3, #64	; 0x40
 80069ce:	eba0 000a 	sub.w	r0, r0, sl
 80069d2:	fa03 f000 	lsl.w	r0, r3, r0
 80069d6:	9b04      	ldr	r3, [sp, #16]
 80069d8:	4303      	orrs	r3, r0
 80069da:	3401      	adds	r4, #1
 80069dc:	9304      	str	r3, [sp, #16]
 80069de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069e2:	4826      	ldr	r0, [pc, #152]	; (8006a7c <_svfiprintf_r+0x1f0>)
 80069e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069e8:	2206      	movs	r2, #6
 80069ea:	f7f9 fc09 	bl	8000200 <memchr>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d038      	beq.n	8006a64 <_svfiprintf_r+0x1d8>
 80069f2:	4b23      	ldr	r3, [pc, #140]	; (8006a80 <_svfiprintf_r+0x1f4>)
 80069f4:	bb1b      	cbnz	r3, 8006a3e <_svfiprintf_r+0x1b2>
 80069f6:	9b03      	ldr	r3, [sp, #12]
 80069f8:	3307      	adds	r3, #7
 80069fa:	f023 0307 	bic.w	r3, r3, #7
 80069fe:	3308      	adds	r3, #8
 8006a00:	9303      	str	r3, [sp, #12]
 8006a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a04:	4433      	add	r3, r6
 8006a06:	9309      	str	r3, [sp, #36]	; 0x24
 8006a08:	e767      	b.n	80068da <_svfiprintf_r+0x4e>
 8006a0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a0e:	460c      	mov	r4, r1
 8006a10:	2001      	movs	r0, #1
 8006a12:	e7a5      	b.n	8006960 <_svfiprintf_r+0xd4>
 8006a14:	2300      	movs	r3, #0
 8006a16:	3401      	adds	r4, #1
 8006a18:	9305      	str	r3, [sp, #20]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	f04f 0c0a 	mov.w	ip, #10
 8006a20:	4620      	mov	r0, r4
 8006a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a26:	3a30      	subs	r2, #48	; 0x30
 8006a28:	2a09      	cmp	r2, #9
 8006a2a:	d903      	bls.n	8006a34 <_svfiprintf_r+0x1a8>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0c5      	beq.n	80069bc <_svfiprintf_r+0x130>
 8006a30:	9105      	str	r1, [sp, #20]
 8006a32:	e7c3      	b.n	80069bc <_svfiprintf_r+0x130>
 8006a34:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a38:	4604      	mov	r4, r0
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e7f0      	b.n	8006a20 <_svfiprintf_r+0x194>
 8006a3e:	ab03      	add	r3, sp, #12
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	462a      	mov	r2, r5
 8006a44:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <_svfiprintf_r+0x1f8>)
 8006a46:	a904      	add	r1, sp, #16
 8006a48:	4638      	mov	r0, r7
 8006a4a:	f3af 8000 	nop.w
 8006a4e:	1c42      	adds	r2, r0, #1
 8006a50:	4606      	mov	r6, r0
 8006a52:	d1d6      	bne.n	8006a02 <_svfiprintf_r+0x176>
 8006a54:	89ab      	ldrh	r3, [r5, #12]
 8006a56:	065b      	lsls	r3, r3, #25
 8006a58:	f53f af2c 	bmi.w	80068b4 <_svfiprintf_r+0x28>
 8006a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a5e:	b01d      	add	sp, #116	; 0x74
 8006a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a64:	ab03      	add	r3, sp, #12
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	462a      	mov	r2, r5
 8006a6a:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <_svfiprintf_r+0x1f8>)
 8006a6c:	a904      	add	r1, sp, #16
 8006a6e:	4638      	mov	r0, r7
 8006a70:	f000 f87a 	bl	8006b68 <_printf_i>
 8006a74:	e7eb      	b.n	8006a4e <_svfiprintf_r+0x1c2>
 8006a76:	bf00      	nop
 8006a78:	080070f4 	.word	0x080070f4
 8006a7c:	080070fe 	.word	0x080070fe
 8006a80:	00000000 	.word	0x00000000
 8006a84:	080067d5 	.word	0x080067d5
 8006a88:	080070fa 	.word	0x080070fa

08006a8c <_printf_common>:
 8006a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a90:	4616      	mov	r6, r2
 8006a92:	4699      	mov	r9, r3
 8006a94:	688a      	ldr	r2, [r1, #8]
 8006a96:	690b      	ldr	r3, [r1, #16]
 8006a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	bfb8      	it	lt
 8006aa0:	4613      	movlt	r3, r2
 8006aa2:	6033      	str	r3, [r6, #0]
 8006aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006aa8:	4607      	mov	r7, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	b10a      	cbz	r2, 8006ab2 <_printf_common+0x26>
 8006aae:	3301      	adds	r3, #1
 8006ab0:	6033      	str	r3, [r6, #0]
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	0699      	lsls	r1, r3, #26
 8006ab6:	bf42      	ittt	mi
 8006ab8:	6833      	ldrmi	r3, [r6, #0]
 8006aba:	3302      	addmi	r3, #2
 8006abc:	6033      	strmi	r3, [r6, #0]
 8006abe:	6825      	ldr	r5, [r4, #0]
 8006ac0:	f015 0506 	ands.w	r5, r5, #6
 8006ac4:	d106      	bne.n	8006ad4 <_printf_common+0x48>
 8006ac6:	f104 0a19 	add.w	sl, r4, #25
 8006aca:	68e3      	ldr	r3, [r4, #12]
 8006acc:	6832      	ldr	r2, [r6, #0]
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	42ab      	cmp	r3, r5
 8006ad2:	dc26      	bgt.n	8006b22 <_printf_common+0x96>
 8006ad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ad8:	1e13      	subs	r3, r2, #0
 8006ada:	6822      	ldr	r2, [r4, #0]
 8006adc:	bf18      	it	ne
 8006ade:	2301      	movne	r3, #1
 8006ae0:	0692      	lsls	r2, r2, #26
 8006ae2:	d42b      	bmi.n	8006b3c <_printf_common+0xb0>
 8006ae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ae8:	4649      	mov	r1, r9
 8006aea:	4638      	mov	r0, r7
 8006aec:	47c0      	blx	r8
 8006aee:	3001      	adds	r0, #1
 8006af0:	d01e      	beq.n	8006b30 <_printf_common+0xa4>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	68e5      	ldr	r5, [r4, #12]
 8006af6:	6832      	ldr	r2, [r6, #0]
 8006af8:	f003 0306 	and.w	r3, r3, #6
 8006afc:	2b04      	cmp	r3, #4
 8006afe:	bf08      	it	eq
 8006b00:	1aad      	subeq	r5, r5, r2
 8006b02:	68a3      	ldr	r3, [r4, #8]
 8006b04:	6922      	ldr	r2, [r4, #16]
 8006b06:	bf0c      	ite	eq
 8006b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b0c:	2500      	movne	r5, #0
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	bfc4      	itt	gt
 8006b12:	1a9b      	subgt	r3, r3, r2
 8006b14:	18ed      	addgt	r5, r5, r3
 8006b16:	2600      	movs	r6, #0
 8006b18:	341a      	adds	r4, #26
 8006b1a:	42b5      	cmp	r5, r6
 8006b1c:	d11a      	bne.n	8006b54 <_printf_common+0xc8>
 8006b1e:	2000      	movs	r0, #0
 8006b20:	e008      	b.n	8006b34 <_printf_common+0xa8>
 8006b22:	2301      	movs	r3, #1
 8006b24:	4652      	mov	r2, sl
 8006b26:	4649      	mov	r1, r9
 8006b28:	4638      	mov	r0, r7
 8006b2a:	47c0      	blx	r8
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	d103      	bne.n	8006b38 <_printf_common+0xac>
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295
 8006b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b38:	3501      	adds	r5, #1
 8006b3a:	e7c6      	b.n	8006aca <_printf_common+0x3e>
 8006b3c:	18e1      	adds	r1, r4, r3
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	2030      	movs	r0, #48	; 0x30
 8006b42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b46:	4422      	add	r2, r4
 8006b48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b50:	3302      	adds	r3, #2
 8006b52:	e7c7      	b.n	8006ae4 <_printf_common+0x58>
 8006b54:	2301      	movs	r3, #1
 8006b56:	4622      	mov	r2, r4
 8006b58:	4649      	mov	r1, r9
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	47c0      	blx	r8
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d0e6      	beq.n	8006b30 <_printf_common+0xa4>
 8006b62:	3601      	adds	r6, #1
 8006b64:	e7d9      	b.n	8006b1a <_printf_common+0x8e>
	...

08006b68 <_printf_i>:
 8006b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6c:	7e0f      	ldrb	r7, [r1, #24]
 8006b6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b70:	2f78      	cmp	r7, #120	; 0x78
 8006b72:	4691      	mov	r9, r2
 8006b74:	4680      	mov	r8, r0
 8006b76:	460c      	mov	r4, r1
 8006b78:	469a      	mov	sl, r3
 8006b7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b7e:	d807      	bhi.n	8006b90 <_printf_i+0x28>
 8006b80:	2f62      	cmp	r7, #98	; 0x62
 8006b82:	d80a      	bhi.n	8006b9a <_printf_i+0x32>
 8006b84:	2f00      	cmp	r7, #0
 8006b86:	f000 80d8 	beq.w	8006d3a <_printf_i+0x1d2>
 8006b8a:	2f58      	cmp	r7, #88	; 0x58
 8006b8c:	f000 80a3 	beq.w	8006cd6 <_printf_i+0x16e>
 8006b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b98:	e03a      	b.n	8006c10 <_printf_i+0xa8>
 8006b9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b9e:	2b15      	cmp	r3, #21
 8006ba0:	d8f6      	bhi.n	8006b90 <_printf_i+0x28>
 8006ba2:	a101      	add	r1, pc, #4	; (adr r1, 8006ba8 <_printf_i+0x40>)
 8006ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ba8:	08006c01 	.word	0x08006c01
 8006bac:	08006c15 	.word	0x08006c15
 8006bb0:	08006b91 	.word	0x08006b91
 8006bb4:	08006b91 	.word	0x08006b91
 8006bb8:	08006b91 	.word	0x08006b91
 8006bbc:	08006b91 	.word	0x08006b91
 8006bc0:	08006c15 	.word	0x08006c15
 8006bc4:	08006b91 	.word	0x08006b91
 8006bc8:	08006b91 	.word	0x08006b91
 8006bcc:	08006b91 	.word	0x08006b91
 8006bd0:	08006b91 	.word	0x08006b91
 8006bd4:	08006d21 	.word	0x08006d21
 8006bd8:	08006c45 	.word	0x08006c45
 8006bdc:	08006d03 	.word	0x08006d03
 8006be0:	08006b91 	.word	0x08006b91
 8006be4:	08006b91 	.word	0x08006b91
 8006be8:	08006d43 	.word	0x08006d43
 8006bec:	08006b91 	.word	0x08006b91
 8006bf0:	08006c45 	.word	0x08006c45
 8006bf4:	08006b91 	.word	0x08006b91
 8006bf8:	08006b91 	.word	0x08006b91
 8006bfc:	08006d0b 	.word	0x08006d0b
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	1d1a      	adds	r2, r3, #4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	602a      	str	r2, [r5, #0]
 8006c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c10:	2301      	movs	r3, #1
 8006c12:	e0a3      	b.n	8006d5c <_printf_i+0x1f4>
 8006c14:	6820      	ldr	r0, [r4, #0]
 8006c16:	6829      	ldr	r1, [r5, #0]
 8006c18:	0606      	lsls	r6, r0, #24
 8006c1a:	f101 0304 	add.w	r3, r1, #4
 8006c1e:	d50a      	bpl.n	8006c36 <_printf_i+0xce>
 8006c20:	680e      	ldr	r6, [r1, #0]
 8006c22:	602b      	str	r3, [r5, #0]
 8006c24:	2e00      	cmp	r6, #0
 8006c26:	da03      	bge.n	8006c30 <_printf_i+0xc8>
 8006c28:	232d      	movs	r3, #45	; 0x2d
 8006c2a:	4276      	negs	r6, r6
 8006c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c30:	485e      	ldr	r0, [pc, #376]	; (8006dac <_printf_i+0x244>)
 8006c32:	230a      	movs	r3, #10
 8006c34:	e019      	b.n	8006c6a <_printf_i+0x102>
 8006c36:	680e      	ldr	r6, [r1, #0]
 8006c38:	602b      	str	r3, [r5, #0]
 8006c3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c3e:	bf18      	it	ne
 8006c40:	b236      	sxthne	r6, r6
 8006c42:	e7ef      	b.n	8006c24 <_printf_i+0xbc>
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	6820      	ldr	r0, [r4, #0]
 8006c48:	1d19      	adds	r1, r3, #4
 8006c4a:	6029      	str	r1, [r5, #0]
 8006c4c:	0601      	lsls	r1, r0, #24
 8006c4e:	d501      	bpl.n	8006c54 <_printf_i+0xec>
 8006c50:	681e      	ldr	r6, [r3, #0]
 8006c52:	e002      	b.n	8006c5a <_printf_i+0xf2>
 8006c54:	0646      	lsls	r6, r0, #25
 8006c56:	d5fb      	bpl.n	8006c50 <_printf_i+0xe8>
 8006c58:	881e      	ldrh	r6, [r3, #0]
 8006c5a:	4854      	ldr	r0, [pc, #336]	; (8006dac <_printf_i+0x244>)
 8006c5c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c5e:	bf0c      	ite	eq
 8006c60:	2308      	moveq	r3, #8
 8006c62:	230a      	movne	r3, #10
 8006c64:	2100      	movs	r1, #0
 8006c66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c6a:	6865      	ldr	r5, [r4, #4]
 8006c6c:	60a5      	str	r5, [r4, #8]
 8006c6e:	2d00      	cmp	r5, #0
 8006c70:	bfa2      	ittt	ge
 8006c72:	6821      	ldrge	r1, [r4, #0]
 8006c74:	f021 0104 	bicge.w	r1, r1, #4
 8006c78:	6021      	strge	r1, [r4, #0]
 8006c7a:	b90e      	cbnz	r6, 8006c80 <_printf_i+0x118>
 8006c7c:	2d00      	cmp	r5, #0
 8006c7e:	d04d      	beq.n	8006d1c <_printf_i+0x1b4>
 8006c80:	4615      	mov	r5, r2
 8006c82:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c86:	fb03 6711 	mls	r7, r3, r1, r6
 8006c8a:	5dc7      	ldrb	r7, [r0, r7]
 8006c8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c90:	4637      	mov	r7, r6
 8006c92:	42bb      	cmp	r3, r7
 8006c94:	460e      	mov	r6, r1
 8006c96:	d9f4      	bls.n	8006c82 <_printf_i+0x11a>
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d10b      	bne.n	8006cb4 <_printf_i+0x14c>
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	07de      	lsls	r6, r3, #31
 8006ca0:	d508      	bpl.n	8006cb4 <_printf_i+0x14c>
 8006ca2:	6923      	ldr	r3, [r4, #16]
 8006ca4:	6861      	ldr	r1, [r4, #4]
 8006ca6:	4299      	cmp	r1, r3
 8006ca8:	bfde      	ittt	le
 8006caa:	2330      	movle	r3, #48	; 0x30
 8006cac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cb4:	1b52      	subs	r2, r2, r5
 8006cb6:	6122      	str	r2, [r4, #16]
 8006cb8:	f8cd a000 	str.w	sl, [sp]
 8006cbc:	464b      	mov	r3, r9
 8006cbe:	aa03      	add	r2, sp, #12
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	f7ff fee2 	bl	8006a8c <_printf_common>
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d14c      	bne.n	8006d66 <_printf_i+0x1fe>
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	b004      	add	sp, #16
 8006cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd6:	4835      	ldr	r0, [pc, #212]	; (8006dac <_printf_i+0x244>)
 8006cd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006cdc:	6829      	ldr	r1, [r5, #0]
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ce4:	6029      	str	r1, [r5, #0]
 8006ce6:	061d      	lsls	r5, r3, #24
 8006ce8:	d514      	bpl.n	8006d14 <_printf_i+0x1ac>
 8006cea:	07df      	lsls	r7, r3, #31
 8006cec:	bf44      	itt	mi
 8006cee:	f043 0320 	orrmi.w	r3, r3, #32
 8006cf2:	6023      	strmi	r3, [r4, #0]
 8006cf4:	b91e      	cbnz	r6, 8006cfe <_printf_i+0x196>
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	f023 0320 	bic.w	r3, r3, #32
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	2310      	movs	r3, #16
 8006d00:	e7b0      	b.n	8006c64 <_printf_i+0xfc>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	f043 0320 	orr.w	r3, r3, #32
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	2378      	movs	r3, #120	; 0x78
 8006d0c:	4828      	ldr	r0, [pc, #160]	; (8006db0 <_printf_i+0x248>)
 8006d0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d12:	e7e3      	b.n	8006cdc <_printf_i+0x174>
 8006d14:	0659      	lsls	r1, r3, #25
 8006d16:	bf48      	it	mi
 8006d18:	b2b6      	uxthmi	r6, r6
 8006d1a:	e7e6      	b.n	8006cea <_printf_i+0x182>
 8006d1c:	4615      	mov	r5, r2
 8006d1e:	e7bb      	b.n	8006c98 <_printf_i+0x130>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	6826      	ldr	r6, [r4, #0]
 8006d24:	6961      	ldr	r1, [r4, #20]
 8006d26:	1d18      	adds	r0, r3, #4
 8006d28:	6028      	str	r0, [r5, #0]
 8006d2a:	0635      	lsls	r5, r6, #24
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	d501      	bpl.n	8006d34 <_printf_i+0x1cc>
 8006d30:	6019      	str	r1, [r3, #0]
 8006d32:	e002      	b.n	8006d3a <_printf_i+0x1d2>
 8006d34:	0670      	lsls	r0, r6, #25
 8006d36:	d5fb      	bpl.n	8006d30 <_printf_i+0x1c8>
 8006d38:	8019      	strh	r1, [r3, #0]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	6123      	str	r3, [r4, #16]
 8006d3e:	4615      	mov	r5, r2
 8006d40:	e7ba      	b.n	8006cb8 <_printf_i+0x150>
 8006d42:	682b      	ldr	r3, [r5, #0]
 8006d44:	1d1a      	adds	r2, r3, #4
 8006d46:	602a      	str	r2, [r5, #0]
 8006d48:	681d      	ldr	r5, [r3, #0]
 8006d4a:	6862      	ldr	r2, [r4, #4]
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f7f9 fa56 	bl	8000200 <memchr>
 8006d54:	b108      	cbz	r0, 8006d5a <_printf_i+0x1f2>
 8006d56:	1b40      	subs	r0, r0, r5
 8006d58:	6060      	str	r0, [r4, #4]
 8006d5a:	6863      	ldr	r3, [r4, #4]
 8006d5c:	6123      	str	r3, [r4, #16]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d64:	e7a8      	b.n	8006cb8 <_printf_i+0x150>
 8006d66:	6923      	ldr	r3, [r4, #16]
 8006d68:	462a      	mov	r2, r5
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	4640      	mov	r0, r8
 8006d6e:	47d0      	blx	sl
 8006d70:	3001      	adds	r0, #1
 8006d72:	d0ab      	beq.n	8006ccc <_printf_i+0x164>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	079b      	lsls	r3, r3, #30
 8006d78:	d413      	bmi.n	8006da2 <_printf_i+0x23a>
 8006d7a:	68e0      	ldr	r0, [r4, #12]
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	4298      	cmp	r0, r3
 8006d80:	bfb8      	it	lt
 8006d82:	4618      	movlt	r0, r3
 8006d84:	e7a4      	b.n	8006cd0 <_printf_i+0x168>
 8006d86:	2301      	movs	r3, #1
 8006d88:	4632      	mov	r2, r6
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	4640      	mov	r0, r8
 8006d8e:	47d0      	blx	sl
 8006d90:	3001      	adds	r0, #1
 8006d92:	d09b      	beq.n	8006ccc <_printf_i+0x164>
 8006d94:	3501      	adds	r5, #1
 8006d96:	68e3      	ldr	r3, [r4, #12]
 8006d98:	9903      	ldr	r1, [sp, #12]
 8006d9a:	1a5b      	subs	r3, r3, r1
 8006d9c:	42ab      	cmp	r3, r5
 8006d9e:	dcf2      	bgt.n	8006d86 <_printf_i+0x21e>
 8006da0:	e7eb      	b.n	8006d7a <_printf_i+0x212>
 8006da2:	2500      	movs	r5, #0
 8006da4:	f104 0619 	add.w	r6, r4, #25
 8006da8:	e7f5      	b.n	8006d96 <_printf_i+0x22e>
 8006daa:	bf00      	nop
 8006dac:	08007105 	.word	0x08007105
 8006db0:	08007116 	.word	0x08007116

08006db4 <_sbrk_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4d06      	ldr	r5, [pc, #24]	; (8006dd0 <_sbrk_r+0x1c>)
 8006db8:	2300      	movs	r3, #0
 8006dba:	4604      	mov	r4, r0
 8006dbc:	4608      	mov	r0, r1
 8006dbe:	602b      	str	r3, [r5, #0]
 8006dc0:	f7fa fcd0 	bl	8001764 <_sbrk>
 8006dc4:	1c43      	adds	r3, r0, #1
 8006dc6:	d102      	bne.n	8006dce <_sbrk_r+0x1a>
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	b103      	cbz	r3, 8006dce <_sbrk_r+0x1a>
 8006dcc:	6023      	str	r3, [r4, #0]
 8006dce:	bd38      	pop	{r3, r4, r5, pc}
 8006dd0:	20000950 	.word	0x20000950

08006dd4 <__sread>:
 8006dd4:	b510      	push	{r4, lr}
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ddc:	f000 f8e8 	bl	8006fb0 <_read_r>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	bfab      	itete	ge
 8006de4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006de6:	89a3      	ldrhlt	r3, [r4, #12]
 8006de8:	181b      	addge	r3, r3, r0
 8006dea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006dee:	bfac      	ite	ge
 8006df0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006df2:	81a3      	strhlt	r3, [r4, #12]
 8006df4:	bd10      	pop	{r4, pc}

08006df6 <__swrite>:
 8006df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dfa:	461f      	mov	r7, r3
 8006dfc:	898b      	ldrh	r3, [r1, #12]
 8006dfe:	05db      	lsls	r3, r3, #23
 8006e00:	4605      	mov	r5, r0
 8006e02:	460c      	mov	r4, r1
 8006e04:	4616      	mov	r6, r2
 8006e06:	d505      	bpl.n	8006e14 <__swrite+0x1e>
 8006e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f000 f858 	bl	8006ec4 <_lseek_r>
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e1e:	81a3      	strh	r3, [r4, #12]
 8006e20:	4632      	mov	r2, r6
 8006e22:	463b      	mov	r3, r7
 8006e24:	4628      	mov	r0, r5
 8006e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e2a:	f000 b817 	b.w	8006e5c <_write_r>

08006e2e <__sseek>:
 8006e2e:	b510      	push	{r4, lr}
 8006e30:	460c      	mov	r4, r1
 8006e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e36:	f000 f845 	bl	8006ec4 <_lseek_r>
 8006e3a:	1c43      	adds	r3, r0, #1
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	bf15      	itete	ne
 8006e40:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e4a:	81a3      	strheq	r3, [r4, #12]
 8006e4c:	bf18      	it	ne
 8006e4e:	81a3      	strhne	r3, [r4, #12]
 8006e50:	bd10      	pop	{r4, pc}

08006e52 <__sclose>:
 8006e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e56:	f000 b813 	b.w	8006e80 <_close_r>
	...

08006e5c <_write_r>:
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	4d07      	ldr	r5, [pc, #28]	; (8006e7c <_write_r+0x20>)
 8006e60:	4604      	mov	r4, r0
 8006e62:	4608      	mov	r0, r1
 8006e64:	4611      	mov	r1, r2
 8006e66:	2200      	movs	r2, #0
 8006e68:	602a      	str	r2, [r5, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f7fa fc35 	bl	80016da <_write>
 8006e70:	1c43      	adds	r3, r0, #1
 8006e72:	d102      	bne.n	8006e7a <_write_r+0x1e>
 8006e74:	682b      	ldr	r3, [r5, #0]
 8006e76:	b103      	cbz	r3, 8006e7a <_write_r+0x1e>
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	bd38      	pop	{r3, r4, r5, pc}
 8006e7c:	20000950 	.word	0x20000950

08006e80 <_close_r>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	4d06      	ldr	r5, [pc, #24]	; (8006e9c <_close_r+0x1c>)
 8006e84:	2300      	movs	r3, #0
 8006e86:	4604      	mov	r4, r0
 8006e88:	4608      	mov	r0, r1
 8006e8a:	602b      	str	r3, [r5, #0]
 8006e8c:	f7fa fc41 	bl	8001712 <_close>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d102      	bne.n	8006e9a <_close_r+0x1a>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	b103      	cbz	r3, 8006e9a <_close_r+0x1a>
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	20000950 	.word	0x20000950

08006ea0 <_fstat_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4d07      	ldr	r5, [pc, #28]	; (8006ec0 <_fstat_r+0x20>)
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	4608      	mov	r0, r1
 8006eaa:	4611      	mov	r1, r2
 8006eac:	602b      	str	r3, [r5, #0]
 8006eae:	f7fa fc3c 	bl	800172a <_fstat>
 8006eb2:	1c43      	adds	r3, r0, #1
 8006eb4:	d102      	bne.n	8006ebc <_fstat_r+0x1c>
 8006eb6:	682b      	ldr	r3, [r5, #0]
 8006eb8:	b103      	cbz	r3, 8006ebc <_fstat_r+0x1c>
 8006eba:	6023      	str	r3, [r4, #0]
 8006ebc:	bd38      	pop	{r3, r4, r5, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20000950 	.word	0x20000950

08006ec4 <_lseek_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4d07      	ldr	r5, [pc, #28]	; (8006ee4 <_lseek_r+0x20>)
 8006ec8:	4604      	mov	r4, r0
 8006eca:	4608      	mov	r0, r1
 8006ecc:	4611      	mov	r1, r2
 8006ece:	2200      	movs	r2, #0
 8006ed0:	602a      	str	r2, [r5, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f7fa fc39 	bl	800174a <_lseek>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d102      	bne.n	8006ee2 <_lseek_r+0x1e>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	b103      	cbz	r3, 8006ee2 <_lseek_r+0x1e>
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	20000950 	.word	0x20000950

08006ee8 <memcpy>:
 8006ee8:	440a      	add	r2, r1
 8006eea:	4291      	cmp	r1, r2
 8006eec:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ef0:	d100      	bne.n	8006ef4 <memcpy+0xc>
 8006ef2:	4770      	bx	lr
 8006ef4:	b510      	push	{r4, lr}
 8006ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006efa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006efe:	4291      	cmp	r1, r2
 8006f00:	d1f9      	bne.n	8006ef6 <memcpy+0xe>
 8006f02:	bd10      	pop	{r4, pc}

08006f04 <memmove>:
 8006f04:	4288      	cmp	r0, r1
 8006f06:	b510      	push	{r4, lr}
 8006f08:	eb01 0402 	add.w	r4, r1, r2
 8006f0c:	d902      	bls.n	8006f14 <memmove+0x10>
 8006f0e:	4284      	cmp	r4, r0
 8006f10:	4623      	mov	r3, r4
 8006f12:	d807      	bhi.n	8006f24 <memmove+0x20>
 8006f14:	1e43      	subs	r3, r0, #1
 8006f16:	42a1      	cmp	r1, r4
 8006f18:	d008      	beq.n	8006f2c <memmove+0x28>
 8006f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f22:	e7f8      	b.n	8006f16 <memmove+0x12>
 8006f24:	4402      	add	r2, r0
 8006f26:	4601      	mov	r1, r0
 8006f28:	428a      	cmp	r2, r1
 8006f2a:	d100      	bne.n	8006f2e <memmove+0x2a>
 8006f2c:	bd10      	pop	{r4, pc}
 8006f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f36:	e7f7      	b.n	8006f28 <memmove+0x24>

08006f38 <__malloc_lock>:
 8006f38:	4801      	ldr	r0, [pc, #4]	; (8006f40 <__malloc_lock+0x8>)
 8006f3a:	f7ff bb3b 	b.w	80065b4 <__retarget_lock_acquire_recursive>
 8006f3e:	bf00      	nop
 8006f40:	20000944 	.word	0x20000944

08006f44 <__malloc_unlock>:
 8006f44:	4801      	ldr	r0, [pc, #4]	; (8006f4c <__malloc_unlock+0x8>)
 8006f46:	f7ff bb36 	b.w	80065b6 <__retarget_lock_release_recursive>
 8006f4a:	bf00      	nop
 8006f4c:	20000944 	.word	0x20000944

08006f50 <_realloc_r>:
 8006f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f54:	4680      	mov	r8, r0
 8006f56:	4614      	mov	r4, r2
 8006f58:	460e      	mov	r6, r1
 8006f5a:	b921      	cbnz	r1, 8006f66 <_realloc_r+0x16>
 8006f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f60:	4611      	mov	r1, r2
 8006f62:	f7ff bbc3 	b.w	80066ec <_malloc_r>
 8006f66:	b92a      	cbnz	r2, 8006f74 <_realloc_r+0x24>
 8006f68:	f7ff fb54 	bl	8006614 <_free_r>
 8006f6c:	4625      	mov	r5, r4
 8006f6e:	4628      	mov	r0, r5
 8006f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f74:	f000 f82e 	bl	8006fd4 <_malloc_usable_size_r>
 8006f78:	4284      	cmp	r4, r0
 8006f7a:	4607      	mov	r7, r0
 8006f7c:	d802      	bhi.n	8006f84 <_realloc_r+0x34>
 8006f7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f82:	d812      	bhi.n	8006faa <_realloc_r+0x5a>
 8006f84:	4621      	mov	r1, r4
 8006f86:	4640      	mov	r0, r8
 8006f88:	f7ff fbb0 	bl	80066ec <_malloc_r>
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d0ed      	beq.n	8006f6e <_realloc_r+0x1e>
 8006f92:	42bc      	cmp	r4, r7
 8006f94:	4622      	mov	r2, r4
 8006f96:	4631      	mov	r1, r6
 8006f98:	bf28      	it	cs
 8006f9a:	463a      	movcs	r2, r7
 8006f9c:	f7ff ffa4 	bl	8006ee8 <memcpy>
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	f7ff fb36 	bl	8006614 <_free_r>
 8006fa8:	e7e1      	b.n	8006f6e <_realloc_r+0x1e>
 8006faa:	4635      	mov	r5, r6
 8006fac:	e7df      	b.n	8006f6e <_realloc_r+0x1e>
	...

08006fb0 <_read_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4d07      	ldr	r5, [pc, #28]	; (8006fd0 <_read_r+0x20>)
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	4608      	mov	r0, r1
 8006fb8:	4611      	mov	r1, r2
 8006fba:	2200      	movs	r2, #0
 8006fbc:	602a      	str	r2, [r5, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f7fa fb6e 	bl	80016a0 <_read>
 8006fc4:	1c43      	adds	r3, r0, #1
 8006fc6:	d102      	bne.n	8006fce <_read_r+0x1e>
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	b103      	cbz	r3, 8006fce <_read_r+0x1e>
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	bd38      	pop	{r3, r4, r5, pc}
 8006fd0:	20000950 	.word	0x20000950

08006fd4 <_malloc_usable_size_r>:
 8006fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fd8:	1f18      	subs	r0, r3, #4
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	bfbc      	itt	lt
 8006fde:	580b      	ldrlt	r3, [r1, r0]
 8006fe0:	18c0      	addlt	r0, r0, r3
 8006fe2:	4770      	bx	lr

08006fe4 <_init>:
 8006fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe6:	bf00      	nop
 8006fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fea:	bc08      	pop	{r3}
 8006fec:	469e      	mov	lr, r3
 8006fee:	4770      	bx	lr

08006ff0 <_fini>:
 8006ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff2:	bf00      	nop
 8006ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff6:	bc08      	pop	{r3}
 8006ff8:	469e      	mov	lr, r3
 8006ffa:	4770      	bx	lr
