
Ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005544  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057c8  080057c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080057c8  080057c8  000157c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057d0  080057d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057d0  080057d0  000157d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057d4  080057d4  000157d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080057d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000118  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000188  20000188  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ddf0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001be2  00000000  00000000  0002de90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  0002fa78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bd8  00000000  00000000  000306f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024093  00000000  00000000  000312d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d941  00000000  00000000  00055363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db4bf  00000000  00000000  00062ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e163  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e34  00000000  00000000  0013e1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080056dc 	.word	0x080056dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080056dc 	.word	0x080056dc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <delay>:
static void MX_GPIO_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void delay(uint16_t time) {
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <delay+0x30>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time)
 8000d82:	bf00      	nop
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <delay+0x30>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d3f9      	bcc.n	8000d84 <delay+0x14>
		;
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200000d4 	.word	0x200000d4
 8000da4:	00000000 	.word	0x00000000

08000da8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7f1b      	ldrb	r3, [r3, #28]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	f040 8083 	bne.w	8000ec0 <HAL_TIM_IC_CaptureCallback+0x118>
			{
		if (Is_First_Captured == 0) // if the first value is not captured
 8000dba:	4b45      	ldr	r3, [pc, #276]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d11a      	bne.n	8000df8 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f002 fa8d 	bl	80032e4 <HAL_TIM_ReadCapturedValue>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a41      	ldr	r2, [pc, #260]	; (8000ed4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dce:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000dd0:	4b3f      	ldr	r3, [pc, #252]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6a1a      	ldr	r2, [r3, #32]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 020a 	bic.w	r2, r2, #10
 8000de4:	621a      	str	r2, [r3, #32]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	6a1a      	ldr	r2, [r3, #32]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f042 0202 	orr.w	r2, r2, #2
 8000df4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
}
 8000df6:	e063      	b.n	8000ec0 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured == 1)   // if the first is already captured
 8000df8:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d15f      	bne.n	8000ec0 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8000e00:	2100      	movs	r1, #0
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f002 fa6e 	bl	80032e4 <HAL_TIM_ReadCapturedValue>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4a33      	ldr	r2, [pc, #204]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e0c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8000e16:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d907      	bls.n	8000e32 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 8000e22:	4b2d      	ldr	r3, [pc, #180]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	4a2b      	ldr	r2, [pc, #172]	; (8000edc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e00f      	b.n	8000e52 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 8000e32:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000e3e:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e4c:	33ff      	adds	r3, #255	; 0xff
 8000e4e:	4a23      	ldr	r2, [pc, #140]	; (8000edc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e50:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034 / 2;
 8000e52:	4b22      	ldr	r3, [pc, #136]	; (8000edc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fb5c 	bl	8000514 <__aeabi_ui2d>
 8000e5c:	a31a      	add	r3, pc, #104	; (adr r3, 8000ec8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e62:	f7ff fbd1 	bl	8000608 <__aeabi_dmul>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e76:	f7ff fcf1 	bl	800085c <__aeabi_ddiv>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f7ff fdd3 	bl	8000a2c <__aeabi_d2uiz>
 8000e86:	4603      	mov	r3, r0
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e8c:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6a1a      	ldr	r2, [r3, #32]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 020a 	bic.w	r2, r2, #10
 8000ea2:	621a      	str	r2, [r3, #32]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6a12      	ldr	r2, [r2, #32]
 8000eae:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0202 	bic.w	r2, r2, #2
 8000ebe:	60da      	str	r2, [r3, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	b020c49c 	.word	0xb020c49c
 8000ecc:	3fa16872 	.word	0x3fa16872
 8000ed0:	2000016c 	.word	0x2000016c
 8000ed4:	20000160 	.word	0x20000160
 8000ed8:	20000164 	.word	0x20000164
 8000edc:	20000168 	.word	0x20000168
 8000ee0:	2000016d 	.word	0x2000016d
 8000ee4:	200000d4 	.word	0x200000d4

08000ee8 <HCSR04_Read>:

void HCSR04_Read(void) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8000eec:	2201      	movs	r2, #1
 8000eee:	2120      	movs	r1, #32
 8000ef0:	480a      	ldr	r0, [pc, #40]	; (8000f1c <HCSR04_Read+0x34>)
 8000ef2:	f000 fff7 	bl	8001ee4 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000ef6:	200a      	movs	r0, #10
 8000ef8:	f7ff ff3a 	bl	8000d70 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8000efc:	2200      	movs	r2, #0
 8000efe:	2120      	movs	r1, #32
 8000f00:	4806      	ldr	r0, [pc, #24]	; (8000f1c <HCSR04_Read+0x34>)
 8000f02:	f000 ffef 	bl	8001ee4 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HCSR04_Read+0x38>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68da      	ldr	r2, [r3, #12]
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <HCSR04_Read+0x38>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f042 0202 	orr.w	r2, r2, #2
 8000f14:	60da      	str	r2, [r3, #12]
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	200000d4 	.word	0x200000d4

08000f24 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char *ptr, int len) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (unsigned char*) ptr, len, HAL_MAX_DELAY);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	4804      	ldr	r0, [pc, #16]	; (8000f4c <_write+0x28>)
 8000f3c:	f002 ff55 	bl	8003dea <HAL_UART_Transmit>
	return len;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000011c 	.word	0x2000011c

08000f50 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f54:	f000 fc72 	bl	800183c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f58:	f000 f8a0 	bl	800109c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f5c:	f000 f9fa 	bl	8001354 <MX_GPIO_Init>
	MX_TIM3_Init();
 8000f60:	f000 f95e 	bl	8001220 <MX_TIM3_Init>
	MX_USART3_UART_Init();
 8000f64:	f000 f9cc 	bl	8001300 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8000f68:	f000 f902 	bl	8001170 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4845      	ldr	r0, [pc, #276]	; (8001084 <main+0x134>)
 8000f70:	f001 fd62 	bl	8002a38 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000f74:	2100      	movs	r1, #0
 8000f76:	4844      	ldr	r0, [pc, #272]	; (8001088 <main+0x138>)
 8000f78:	f001 fd5e 	bl	8002a38 <HAL_TIM_IC_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	setvbuf(stdin, NULL, _IONBF, 0);
 8000f7c:	4b43      	ldr	r3, [pc, #268]	; (800108c <main+0x13c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6858      	ldr	r0, [r3, #4]
 8000f82:	2300      	movs	r3, #0
 8000f84:	2202      	movs	r2, #2
 8000f86:	2100      	movs	r1, #0
 8000f88:	f003 fb64 	bl	8004654 <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 8000f8c:	4b3f      	ldr	r3, [pc, #252]	; (800108c <main+0x13c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6898      	ldr	r0, [r3, #8]
 8000f92:	2300      	movs	r3, #0
 8000f94:	2202      	movs	r2, #2
 8000f96:	2100      	movs	r1, #0
 8000f98:	f003 fb5c 	bl	8004654 <setvbuf>

	while (1) {

		HCSR04_Read();
 8000f9c:	f7ff ffa4 	bl	8000ee8 <HCSR04_Read>
		printf("DISTANCE : %d cm\r\n", Distance);
 8000fa0:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <main+0x140>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	483b      	ldr	r0, [pc, #236]	; (8001094 <main+0x144>)
 8000fa8:	f003 fac6 	bl	8004538 <iprintf>
		HAL_Delay(200);
 8000fac:	20c8      	movs	r0, #200	; 0xc8
 8000fae:	f000 fcb7 	bl	8001920 <HAL_Delay>

		if (0 < Distance && Distance <= 5) {
 8000fb2:	4b37      	ldr	r3, [pc, #220]	; (8001090 <main+0x140>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d01b      	beq.n	8000ff2 <main+0xa2>
 8000fba:	4b35      	ldr	r3, [pc, #212]	; (8001090 <main+0x140>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	d817      	bhi.n	8000ff2 <main+0xa2>
			TIM2->ARR = E;
 8000fc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fc6:	f240 22f6 	movw	r2, #758	; 0x2f6
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
			printf("buzzer : E \r\n");
 8000fcc:	4832      	ldr	r0, [pc, #200]	; (8001098 <main+0x148>)
 8000fce:	f003 fb39 	bl	8004644 <puts>
			TIM2->CCR1 = TIM2->ARR / 2;
 8000fd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fdc:	085b      	lsrs	r3, r3, #1
 8000fde:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(500);
 8000fe0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fe4:	f000 fc9c 	bl	8001920 <HAL_Delay>
			TIM2->CCR1 = 0;
 8000fe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fec:	2200      	movs	r2, #0
 8000fee:	635a      	str	r2, [r3, #52]	; 0x34
 8000ff0:	e043      	b.n	800107a <main+0x12a>
		}
		else if (5 < Distance && Distance <= 10) {
 8000ff2:	4b27      	ldr	r3, [pc, #156]	; (8001090 <main+0x140>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b05      	cmp	r3, #5
 8000ff8:	d91b      	bls.n	8001032 <main+0xe2>
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <main+0x140>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b0a      	cmp	r3, #10
 8001000:	d817      	bhi.n	8001032 <main+0xe2>
			TIM2->ARR = C;
 8001002:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001006:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
			printf("buzzer : E \r\n");
 800100c:	4822      	ldr	r0, [pc, #136]	; (8001098 <main+0x148>)
 800100e:	f003 fb19 	bl	8004644 <puts>
			TIM2->CCR1 = TIM2->ARR / 2;
 8001012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001018:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800101c:	085b      	lsrs	r3, r3, #1
 800101e:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(500);
 8001020:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001024:	f000 fc7c 	bl	8001920 <HAL_Delay>
			TIM2->CCR1 = 0;
 8001028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800102c:	2200      	movs	r2, #0
 800102e:	635a      	str	r2, [r3, #52]	; 0x34
 8001030:	e023      	b.n	800107a <main+0x12a>
		}
		else if (10 < Distance && Distance <= 15) {
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <main+0x140>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b0a      	cmp	r3, #10
 8001038:	d91b      	bls.n	8001072 <main+0x122>
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <main+0x140>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b0f      	cmp	r3, #15
 8001040:	d817      	bhi.n	8001072 <main+0x122>
			TIM2->ARR = G;
 8001042:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001046:	f240 227e 	movw	r2, #638	; 0x27e
 800104a:	62da      	str	r2, [r3, #44]	; 0x2c
			printf("buzzer : E \r\n");
 800104c:	4812      	ldr	r0, [pc, #72]	; (8001098 <main+0x148>)
 800104e:	f003 faf9 	bl	8004644 <puts>
			TIM2->CCR1 = TIM2->ARR / 2;
 8001052:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001058:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_Delay(500);
 8001060:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001064:	f000 fc5c 	bl	8001920 <HAL_Delay>
			TIM2->CCR1 = 0;
 8001068:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800106c:	2200      	movs	r2, #0
 800106e:	635a      	str	r2, [r3, #52]	; 0x34
 8001070:	e003      	b.n	800107a <main+0x12a>
		} else {
			TIM2->ARR = 0;
 8001072:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001076:	2200      	movs	r2, #0
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		HAL_Delay(200);
 800107a:	20c8      	movs	r0, #200	; 0xc8
 800107c:	f000 fc50 	bl	8001920 <HAL_Delay>
		HCSR04_Read();
 8001080:	e78c      	b.n	8000f9c <main+0x4c>
 8001082:	bf00      	nop
 8001084:	2000008c 	.word	0x2000008c
 8001088:	200000d4 	.word	0x200000d4
 800108c:	2000000c 	.word	0x2000000c
 8001090:	2000016d 	.word	0x2000016d
 8001094:	080056f4 	.word	0x080056f4
 8001098:	08005708 	.word	0x08005708

0800109c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	; 0x50
 80010a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	2230      	movs	r2, #48	; 0x30
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 fa3c 	bl	8004528 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <SystemClock_Config+0xcc>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	4a27      	ldr	r2, [pc, #156]	; (8001168 <SystemClock_Config+0xcc>)
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	; 0x40
 80010d0:	4b25      	ldr	r3, [pc, #148]	; (8001168 <SystemClock_Config+0xcc>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	4b22      	ldr	r3, [pc, #136]	; (800116c <SystemClock_Config+0xd0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a21      	ldr	r2, [pc, #132]	; (800116c <SystemClock_Config+0xd0>)
 80010e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <SystemClock_Config+0xd0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001106:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800110a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800110c:	2304      	movs	r3, #4
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001110:	23a8      	movs	r3, #168	; 0xa8
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001114:	2302      	movs	r3, #2
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001118:	2304      	movs	r3, #4
 800111a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fef9 	bl	8001f18 <HAL_RCC_OscConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x94>
		Error_Handler();
 800112c:	f000 f970 	bl	8001410 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001130:	230f      	movs	r3, #15
 8001132:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001134:	2302      	movs	r3, #2
 8001136:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800113c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001140:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001146:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2105      	movs	r1, #5
 800114e:	4618      	mov	r0, r3
 8001150:	f001 f95a 	bl	8002408 <HAL_RCC_ClockConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0xc2>
		Error_Handler();
 800115a:	f000 f959 	bl	8001410 <Error_Handler>
	}
}
 800115e:	bf00      	nop
 8001160:	3750      	adds	r7, #80	; 0x50
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800
 800116c:	40007000 	.word	0x40007000

08001170 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	615a      	str	r2, [r3, #20]
 8001190:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001192:	4b22      	ldr	r3, [pc, #136]	; (800121c <MX_TIM2_Init+0xac>)
 8001194:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001198:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1000 - 1;
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <MX_TIM2_Init+0xac>)
 800119c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011a0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <MX_TIM2_Init+0xac>)
 80011a4:	2210      	movs	r2, #16
 80011a6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 168 - 1;
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <MX_TIM2_Init+0xac>)
 80011aa:	22a7      	movs	r2, #167	; 0xa7
 80011ac:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <MX_TIM2_Init+0xac>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <MX_TIM2_Init+0xac>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80011ba:	4818      	ldr	r0, [pc, #96]	; (800121c <MX_TIM2_Init+0xac>)
 80011bc:	f001 fb93 	bl	80028e6 <HAL_TIM_PWM_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM2_Init+0x5a>
		Error_Handler();
 80011c6:	f000 f923 	bl	8001410 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80011d2:	f107 0320 	add.w	r3, r7, #32
 80011d6:	4619      	mov	r1, r3
 80011d8:	4810      	ldr	r0, [pc, #64]	; (800121c <MX_TIM2_Init+0xac>)
 80011da:	f002 fd29 	bl	8003c30 <HAL_TIMEx_MasterConfigSynchronization>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 80011e4:	f000 f914 	bl	8001410 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e8:	2360      	movs	r3, #96	; 0x60
 80011ea:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 84;
 80011ec:	2354      	movs	r3, #84	; 0x54
 80011ee:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	4619      	mov	r1, r3
 80011fe:	4807      	ldr	r0, [pc, #28]	; (800121c <MX_TIM2_Init+0xac>)
 8001200:	f001 fee6 	bl	8002fd0 <HAL_TIM_PWM_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 800120a:	f000 f901 	bl	8001410 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800120e:	4803      	ldr	r0, [pc, #12]	; (800121c <MX_TIM2_Init+0xac>)
 8001210:	f000 f99c 	bl	800154c <HAL_TIM_MspPostInit>

}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000008c 	.word	0x2000008c

08001220 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001226:	f107 0318 	add.w	r3, r7, #24
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800124a:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <MX_TIM3_Init+0xd8>)
 800124c:	4a2b      	ldr	r2, [pc, #172]	; (80012fc <MX_TIM3_Init+0xdc>)
 800124e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84 - 1;
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <MX_TIM3_Init+0xd8>)
 8001252:	2253      	movs	r2, #83	; 0x53
 8001254:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <MX_TIM3_Init+0xd8>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0xffff - 1;
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <MX_TIM3_Init+0xd8>)
 800125e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001262:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <MX_TIM3_Init+0xd8>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126a:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <MX_TIM3_Init+0xd8>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001270:	4821      	ldr	r0, [pc, #132]	; (80012f8 <MX_TIM3_Init+0xd8>)
 8001272:	f001 fae9 	bl	8002848 <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM3_Init+0x60>
		Error_Handler();
 800127c:	f000 f8c8 	bl	8001410 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001284:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001286:	f107 0318 	add.w	r3, r7, #24
 800128a:	4619      	mov	r1, r3
 800128c:	481a      	ldr	r0, [pc, #104]	; (80012f8 <MX_TIM3_Init+0xd8>)
 800128e:	f001 ff61 	bl	8003154 <HAL_TIM_ConfigClockSource>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM3_Init+0x7c>
		Error_Handler();
 8001298:	f000 f8ba 	bl	8001410 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK) {
 800129c:	4816      	ldr	r0, [pc, #88]	; (80012f8 <MX_TIM3_Init+0xd8>)
 800129e:	f001 fb71 	bl	8002984 <HAL_TIM_IC_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM3_Init+0x8c>
		Error_Handler();
 80012a8:	f000 f8b2 	bl	8001410 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4619      	mov	r1, r3
 80012ba:	480f      	ldr	r0, [pc, #60]	; (80012f8 <MX_TIM3_Init+0xd8>)
 80012bc:	f002 fcb8 	bl	8003c30 <HAL_TIMEx_MasterConfigSynchronization>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM3_Init+0xaa>
			!= HAL_OK) {
		Error_Handler();
 80012c6:	f000 f8a3 	bl	8001410 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012ce:	2301      	movs	r3, #1
 80012d0:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80012da:	463b      	mov	r3, r7
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_TIM3_Init+0xd8>)
 80012e2:	f001 fdd9 	bl	8002e98 <HAL_TIM_IC_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM3_Init+0xd0>
		Error_Handler();
 80012ec:	f000 f890 	bl	8001410 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200000d4 	.word	0x200000d4
 80012fc:	40000400 	.word	0x40000400

08001300 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_USART3_UART_Init+0x4c>)
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <MX_USART3_UART_Init+0x50>)
 8001308:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_USART3_UART_Init+0x4c>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_USART3_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_USART3_UART_Init+0x4c>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_USART3_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_USART3_UART_Init+0x4c>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_USART3_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_USART3_UART_Init+0x4c>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_USART3_UART_Init+0x4c>)
 8001338:	f002 fd0a 	bl	8003d50 <HAL_UART_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001342:	f000 f865 	bl	8001410 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000011c 	.word	0x2000011c
 8001350:	40004800 	.word	0x40004800

08001354 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	4b26      	ldr	r3, [pc, #152]	; (8001408 <MX_GPIO_Init+0xb4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a25      	ldr	r2, [pc, #148]	; (8001408 <MX_GPIO_Init+0xb4>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b23      	ldr	r3, [pc, #140]	; (8001408 <MX_GPIO_Init+0xb4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <MX_GPIO_Init+0xb4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <MX_GPIO_Init+0xb4>)
 8001390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <MX_GPIO_Init+0xb4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_GPIO_Init+0xb4>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <MX_GPIO_Init+0xb4>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <MX_GPIO_Init+0xb4>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_GPIO_Init+0xb4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a10      	ldr	r2, [pc, #64]	; (8001408 <MX_GPIO_Init+0xb4>)
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_GPIO_Init+0xb4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2120      	movs	r1, #32
 80013de:	480b      	ldr	r0, [pc, #44]	; (800140c <MX_GPIO_Init+0xb8>)
 80013e0:	f000 fd80 	bl	8001ee4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013e4:	2320      	movs	r3, #32
 80013e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	4804      	ldr	r0, [pc, #16]	; (800140c <MX_GPIO_Init+0xb8>)
 80013fc:	f000 fbc6 	bl	8001b8c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001400:	bf00      	nop
 8001402:	3728      	adds	r7, #40	; 0x28
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000

08001410 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001414:	b672      	cpsid	i
}
 8001416:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001418:	e7fe      	b.n	8001418 <Error_Handler+0x8>
	...

0800141c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <HAL_MspInit+0x4c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <HAL_MspInit+0x4c>)
 800142c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001430:	6453      	str	r3, [r2, #68]	; 0x44
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <HAL_MspInit+0x4c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_MspInit+0x4c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <HAL_MspInit+0x4c>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_MspInit+0x4c>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800

0800146c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800147c:	d10d      	bne.n	800149a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <HAL_TIM_Base_MspInit+0x94>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d133      	bne.n	8001536 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <HAL_TIM_Base_MspInit+0x98>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <HAL_TIM_Base_MspInit+0x98>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_TIM_Base_MspInit+0x98>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_TIM_Base_MspInit+0x98>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a14      	ldr	r2, [pc, #80]	; (8001544 <HAL_TIM_Base_MspInit+0x98>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_TIM_Base_MspInit+0x98>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001506:	2340      	movs	r3, #64	; 0x40
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001516:	2302      	movs	r3, #2
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4809      	ldr	r0, [pc, #36]	; (8001548 <HAL_TIM_Base_MspInit+0x9c>)
 8001522:	f000 fb33 	bl	8001b8c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	201d      	movs	r0, #29
 800152c:	f000 faf7 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001530:	201d      	movs	r0, #29
 8001532:	f000 fb10 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	; 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40000400 	.word	0x40000400
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000

0800154c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800156c:	d11d      	bne.n	80015aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <HAL_TIM_MspPostInit+0x68>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <HAL_TIM_MspPostInit+0x68>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <HAL_TIM_MspPostInit+0x68>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800158a:	2301      	movs	r3, #1
 800158c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800159a:	2301      	movs	r3, #1
 800159c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	4619      	mov	r1, r3
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <HAL_TIM_MspPostInit+0x6c>)
 80015a6:	f000 faf1 	bl	8001b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000

080015bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a19      	ldr	r2, [pc, #100]	; (8001640 <HAL_UART_MspInit+0x84>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d12c      	bne.n	8001638 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <HAL_UART_MspInit+0x88>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a17      	ldr	r2, [pc, #92]	; (8001644 <HAL_UART_MspInit+0x88>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_UART_MspInit+0x88>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_UART_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a10      	ldr	r2, [pc, #64]	; (8001644 <HAL_UART_MspInit+0x88>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_UART_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001616:	f44f 7340 	mov.w	r3, #768	; 0x300
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001628:	2307      	movs	r3, #7
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <HAL_UART_MspInit+0x8c>)
 8001634:	f000 faaa 	bl	8001b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40004800 	.word	0x40004800
 8001644:	40023800 	.word	0x40023800
 8001648:	40020c00 	.word	0x40020c00

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <NMI_Handler+0x4>

08001652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <MemManage_Handler+0x4>

0800165e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <UsageFault_Handler+0x4>

0800166a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001698:	f000 f922 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <TIM3_IRQHandler+0x10>)
 80016a6:	f001 faef 	bl	8002c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200000d4 	.word	0x200000d4

080016b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	e00a      	b.n	80016dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016c6:	f3af 8000 	nop.w
 80016ca:	4601      	mov	r1, r0
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	60ba      	str	r2, [r7, #8]
 80016d2:	b2ca      	uxtb	r2, r1
 80016d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbf0      	blt.n	80016c6 <_read+0x12>
  }

  return len;
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_close>:
  }
  return len;
}

int _close(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001716:	605a      	str	r2, [r3, #4]
  return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_isatty>:

int _isatty(int file)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001760:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <_sbrk+0x5c>)
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <_sbrk+0x60>)
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <_sbrk+0x64>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <_sbrk+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d207      	bcs.n	8001798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001788:	f002 fea4 	bl	80044d4 <__errno>
 800178c:	4603      	mov	r3, r0
 800178e:	220c      	movs	r2, #12
 8001790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e009      	b.n	80017ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <_sbrk+0x64>)
 80017a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20030000 	.word	0x20030000
 80017b8:	00000400 	.word	0x00000400
 80017bc:	20000170 	.word	0x20000170
 80017c0:	20000188 	.word	0x20000188

080017c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001820 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ee:	490e      	ldr	r1, [pc, #56]	; (8001828 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001804:	4c0b      	ldr	r4, [pc, #44]	; (8001834 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001812:	f7ff ffd7 	bl	80017c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001816:	f002 fe63 	bl	80044e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181a:	f7ff fb99 	bl	8000f50 <main>
  bx  lr    
 800181e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001820:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800182c:	080057d8 	.word	0x080057d8
  ldr r2, =_sbss
 8001830:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001834:	20000188 	.word	0x20000188

08001838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <HAL_Init+0x40>)
 8001846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <HAL_Init+0x40>)
 8001852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	; (800187c <HAL_Init+0x40>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f94f 	bl	8001b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186a:	200f      	movs	r0, #15
 800186c:	f000 f808 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001870:	f7ff fdd4 	bl	800141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_InitTick+0x54>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_InitTick+0x58>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f967 	bl	8001b72 <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 f92f 	bl	8001b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	; (80018dc <HAL_InitTick+0x5c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000008 	.word	0x20000008
 8001904:	20000174 	.word	0x20000174

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000174 	.word	0x20000174

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff ffee 	bl	8001908 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffde 	bl	8001908 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000008 	.word	0x20000008

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db0b      	blt.n	80019f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4907      	ldr	r1, [pc, #28]	; (8001a04 <__NVIC_EnableIRQ+0x38>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	; (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	; 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad4:	d301      	bcc.n	8001ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00f      	b.n	8001afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <SysTick_Config+0x40>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f7ff ff8e 	bl	8001a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <SysTick_Config+0x40>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <SysTick_Config+0x40>)
 8001af4:	2207      	movs	r2, #7
 8001af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	e000e010 	.word	0xe000e010

08001b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff29 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b30:	f7ff ff3e 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	6978      	ldr	r0, [r7, #20]
 8001b3c:	f7ff ff8e 	bl	8001a5c <NVIC_EncodePriority>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff5d 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff31 	bl	80019cc <__NVIC_EnableIRQ>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ffa2 	bl	8001ac4 <SysTick_Config>
 8001b80:	4603      	mov	r3, r0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	e177      	b.n	8001e98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	f040 8166 	bne.w	8001e92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d005      	beq.n	8001bde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d130      	bne.n	8001c40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c14:	2201      	movs	r2, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 0201 	and.w	r2, r3, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d017      	beq.n	8001c7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d123      	bne.n	8001cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	08da      	lsrs	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3208      	adds	r2, #8
 8001c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	08da      	lsrs	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3208      	adds	r2, #8
 8001cca:	69b9      	ldr	r1, [r7, #24]
 8001ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0203 	and.w	r2, r3, #3
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80c0 	beq.w	8001e92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b66      	ldr	r3, [pc, #408]	; (8001eb0 <HAL_GPIO_Init+0x324>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	4a65      	ldr	r2, [pc, #404]	; (8001eb0 <HAL_GPIO_Init+0x324>)
 8001d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d20:	6453      	str	r3, [r2, #68]	; 0x44
 8001d22:	4b63      	ldr	r3, [pc, #396]	; (8001eb0 <HAL_GPIO_Init+0x324>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d2e:	4a61      	ldr	r2, [pc, #388]	; (8001eb4 <HAL_GPIO_Init+0x328>)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	3302      	adds	r3, #2
 8001d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	220f      	movs	r2, #15
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a58      	ldr	r2, [pc, #352]	; (8001eb8 <HAL_GPIO_Init+0x32c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d037      	beq.n	8001dca <HAL_GPIO_Init+0x23e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a57      	ldr	r2, [pc, #348]	; (8001ebc <HAL_GPIO_Init+0x330>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d031      	beq.n	8001dc6 <HAL_GPIO_Init+0x23a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a56      	ldr	r2, [pc, #344]	; (8001ec0 <HAL_GPIO_Init+0x334>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d02b      	beq.n	8001dc2 <HAL_GPIO_Init+0x236>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a55      	ldr	r2, [pc, #340]	; (8001ec4 <HAL_GPIO_Init+0x338>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d025      	beq.n	8001dbe <HAL_GPIO_Init+0x232>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a54      	ldr	r2, [pc, #336]	; (8001ec8 <HAL_GPIO_Init+0x33c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d01f      	beq.n	8001dba <HAL_GPIO_Init+0x22e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a53      	ldr	r2, [pc, #332]	; (8001ecc <HAL_GPIO_Init+0x340>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d019      	beq.n	8001db6 <HAL_GPIO_Init+0x22a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a52      	ldr	r2, [pc, #328]	; (8001ed0 <HAL_GPIO_Init+0x344>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_GPIO_Init+0x226>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a51      	ldr	r2, [pc, #324]	; (8001ed4 <HAL_GPIO_Init+0x348>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00d      	beq.n	8001dae <HAL_GPIO_Init+0x222>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a50      	ldr	r2, [pc, #320]	; (8001ed8 <HAL_GPIO_Init+0x34c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <HAL_GPIO_Init+0x21e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4f      	ldr	r2, [pc, #316]	; (8001edc <HAL_GPIO_Init+0x350>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d101      	bne.n	8001da6 <HAL_GPIO_Init+0x21a>
 8001da2:	2309      	movs	r3, #9
 8001da4:	e012      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001da6:	230a      	movs	r3, #10
 8001da8:	e010      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001daa:	2308      	movs	r3, #8
 8001dac:	e00e      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001dae:	2307      	movs	r3, #7
 8001db0:	e00c      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001db2:	2306      	movs	r3, #6
 8001db4:	e00a      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001db6:	2305      	movs	r3, #5
 8001db8:	e008      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001dba:	2304      	movs	r3, #4
 8001dbc:	e006      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e004      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e002      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_GPIO_Init+0x240>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	f002 0203 	and.w	r2, r2, #3
 8001dd2:	0092      	lsls	r2, r2, #2
 8001dd4:	4093      	lsls	r3, r2
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ddc:	4935      	ldr	r1, [pc, #212]	; (8001eb4 <HAL_GPIO_Init+0x328>)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	089b      	lsrs	r3, r3, #2
 8001de2:	3302      	adds	r3, #2
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dea:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <HAL_GPIO_Init+0x354>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e0e:	4a34      	ldr	r2, [pc, #208]	; (8001ee0 <HAL_GPIO_Init+0x354>)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e14:	4b32      	ldr	r3, [pc, #200]	; (8001ee0 <HAL_GPIO_Init+0x354>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e38:	4a29      	ldr	r2, [pc, #164]	; (8001ee0 <HAL_GPIO_Init+0x354>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e3e:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <HAL_GPIO_Init+0x354>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e62:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <HAL_GPIO_Init+0x354>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e68:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_GPIO_Init+0x354>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e8c:	4a14      	ldr	r2, [pc, #80]	; (8001ee0 <HAL_GPIO_Init+0x354>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3301      	adds	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2b0f      	cmp	r3, #15
 8001e9c:	f67f ae84 	bls.w	8001ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3724      	adds	r7, #36	; 0x24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40013800 	.word	0x40013800
 8001eb8:	40020000 	.word	0x40020000
 8001ebc:	40020400 	.word	0x40020400
 8001ec0:	40020800 	.word	0x40020800
 8001ec4:	40020c00 	.word	0x40020c00
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40021400 	.word	0x40021400
 8001ed0:	40021800 	.word	0x40021800
 8001ed4:	40021c00 	.word	0x40021c00
 8001ed8:	40022000 	.word	0x40022000
 8001edc:	40022400 	.word	0x40022400
 8001ee0:	40013c00 	.word	0x40013c00

08001ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef4:	787b      	ldrb	r3, [r7, #1]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001efa:	887a      	ldrh	r2, [r7, #2]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f00:	e003      	b.n	8001f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f02:	887b      	ldrh	r3, [r7, #2]
 8001f04:	041a      	lsls	r2, r3, #16
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	619a      	str	r2, [r3, #24]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e267      	b.n	80023fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d075      	beq.n	8002022 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f36:	4b88      	ldr	r3, [pc, #544]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d00c      	beq.n	8001f5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f42:	4b85      	ldr	r3, [pc, #532]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d112      	bne.n	8001f74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f4e:	4b82      	ldr	r3, [pc, #520]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f5a:	d10b      	bne.n	8001f74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	4b7e      	ldr	r3, [pc, #504]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d05b      	beq.n	8002020 <HAL_RCC_OscConfig+0x108>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d157      	bne.n	8002020 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e242      	b.n	80023fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7c:	d106      	bne.n	8001f8c <HAL_RCC_OscConfig+0x74>
 8001f7e:	4b76      	ldr	r3, [pc, #472]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a75      	ldr	r2, [pc, #468]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e01d      	b.n	8001fc8 <HAL_RCC_OscConfig+0xb0>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x98>
 8001f96:	4b70      	ldr	r3, [pc, #448]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a6f      	ldr	r2, [pc, #444]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b6d      	ldr	r3, [pc, #436]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a6c      	ldr	r2, [pc, #432]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0xb0>
 8001fb0:	4b69      	ldr	r3, [pc, #420]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a68      	ldr	r2, [pc, #416]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8001fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	4b66      	ldr	r3, [pc, #408]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a65      	ldr	r2, [pc, #404]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8001fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d013      	beq.n	8001ff8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff fc9a 	bl	8001908 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7ff fc96 	bl	8001908 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	; 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e207      	b.n	80023fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	4b5b      	ldr	r3, [pc, #364]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0xc0>
 8001ff6:	e014      	b.n	8002022 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fc86 	bl	8001908 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002000:	f7ff fc82 	bl	8001908 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e1f3      	b.n	80023fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002012:	4b51      	ldr	r3, [pc, #324]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0xe8>
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d063      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800202e:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800203a:	4b47      	ldr	r3, [pc, #284]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002042:	2b08      	cmp	r3, #8
 8002044:	d11c      	bne.n	8002080 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002046:	4b44      	ldr	r3, [pc, #272]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d116      	bne.n	8002080 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	4b41      	ldr	r3, [pc, #260]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <HAL_RCC_OscConfig+0x152>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e1c7      	b.n	80023fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206a:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4937      	ldr	r1, [pc, #220]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	e03a      	b.n	80020f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d020      	beq.n	80020ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002088:	4b34      	ldr	r3, [pc, #208]	; (800215c <HAL_RCC_OscConfig+0x244>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208e:	f7ff fc3b 	bl	8001908 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002096:	f7ff fc37 	bl	8001908 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e1a8      	b.n	80023fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a8:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b4:	4b28      	ldr	r3, [pc, #160]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4925      	ldr	r1, [pc, #148]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
 80020c8:	e015      	b.n	80020f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ca:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_RCC_OscConfig+0x244>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7ff fc1a 	bl	8001908 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d8:	f7ff fc16 	bl	8001908 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e187      	b.n	80023fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ea:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d036      	beq.n	8002170 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d016      	beq.n	8002138 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <HAL_RCC_OscConfig+0x248>)
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002110:	f7ff fbfa 	bl	8001908 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002118:	f7ff fbf6 	bl	8001908 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e167      	b.n	80023fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_RCC_OscConfig+0x240>)
 800212c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x200>
 8002136:	e01b      	b.n	8002170 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_RCC_OscConfig+0x248>)
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213e:	f7ff fbe3 	bl	8001908 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002144:	e00e      	b.n	8002164 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002146:	f7ff fbdf 	bl	8001908 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d907      	bls.n	8002164 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e150      	b.n	80023fa <HAL_RCC_OscConfig+0x4e2>
 8002158:	40023800 	.word	0x40023800
 800215c:	42470000 	.word	0x42470000
 8002160:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002164:	4b88      	ldr	r3, [pc, #544]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 8002166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1ea      	bne.n	8002146 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 8097 	beq.w	80022ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002182:	4b81      	ldr	r3, [pc, #516]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10f      	bne.n	80021ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	4b7d      	ldr	r3, [pc, #500]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a7c      	ldr	r2, [pc, #496]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b7a      	ldr	r3, [pc, #488]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021aa:	2301      	movs	r3, #1
 80021ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ae:	4b77      	ldr	r3, [pc, #476]	; (800238c <HAL_RCC_OscConfig+0x474>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d118      	bne.n	80021ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ba:	4b74      	ldr	r3, [pc, #464]	; (800238c <HAL_RCC_OscConfig+0x474>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a73      	ldr	r2, [pc, #460]	; (800238c <HAL_RCC_OscConfig+0x474>)
 80021c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c6:	f7ff fb9f 	bl	8001908 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ce:	f7ff fb9b 	bl	8001908 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e10c      	b.n	80023fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e0:	4b6a      	ldr	r3, [pc, #424]	; (800238c <HAL_RCC_OscConfig+0x474>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d106      	bne.n	8002202 <HAL_RCC_OscConfig+0x2ea>
 80021f4:	4b64      	ldr	r3, [pc, #400]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	4a63      	ldr	r2, [pc, #396]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002200:	e01c      	b.n	800223c <HAL_RCC_OscConfig+0x324>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0x30c>
 800220a:	4b5f      	ldr	r3, [pc, #380]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	4a5e      	ldr	r2, [pc, #376]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	6713      	str	r3, [r2, #112]	; 0x70
 8002216:	4b5c      	ldr	r3, [pc, #368]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221a:	4a5b      	ldr	r2, [pc, #364]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6713      	str	r3, [r2, #112]	; 0x70
 8002222:	e00b      	b.n	800223c <HAL_RCC_OscConfig+0x324>
 8002224:	4b58      	ldr	r3, [pc, #352]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	4a57      	ldr	r2, [pc, #348]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 800222a:	f023 0301 	bic.w	r3, r3, #1
 800222e:	6713      	str	r3, [r2, #112]	; 0x70
 8002230:	4b55      	ldr	r3, [pc, #340]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	4a54      	ldr	r2, [pc, #336]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 8002236:	f023 0304 	bic.w	r3, r3, #4
 800223a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d015      	beq.n	8002270 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002244:	f7ff fb60 	bl	8001908 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224a:	e00a      	b.n	8002262 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800224c:	f7ff fb5c 	bl	8001908 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	; 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e0cb      	b.n	80023fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002262:	4b49      	ldr	r3, [pc, #292]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0ee      	beq.n	800224c <HAL_RCC_OscConfig+0x334>
 800226e:	e014      	b.n	800229a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002270:	f7ff fb4a 	bl	8001908 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002276:	e00a      	b.n	800228e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002278:	f7ff fb46 	bl	8001908 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	; 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e0b5      	b.n	80023fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228e:	4b3e      	ldr	r3, [pc, #248]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1ee      	bne.n	8002278 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800229a:	7dfb      	ldrb	r3, [r7, #23]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d105      	bne.n	80022ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a0:	4b39      	ldr	r3, [pc, #228]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	4a38      	ldr	r2, [pc, #224]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 80022a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80a1 	beq.w	80023f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022b6:	4b34      	ldr	r3, [pc, #208]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d05c      	beq.n	800237c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d141      	bne.n	800234e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ca:	4b31      	ldr	r3, [pc, #196]	; (8002390 <HAL_RCC_OscConfig+0x478>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7ff fb1a 	bl	8001908 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d8:	f7ff fb16 	bl	8001908 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e087      	b.n	80023fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ea:	4b27      	ldr	r3, [pc, #156]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69da      	ldr	r2, [r3, #28]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	019b      	lsls	r3, r3, #6
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	085b      	lsrs	r3, r3, #1
 800230e:	3b01      	subs	r3, #1
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	061b      	lsls	r3, r3, #24
 800231a:	491b      	ldr	r1, [pc, #108]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <HAL_RCC_OscConfig+0x478>)
 8002322:	2201      	movs	r2, #1
 8002324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002326:	f7ff faef 	bl	8001908 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800232e:	f7ff faeb 	bl	8001908 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e05c      	b.n	80023fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x416>
 800234c:	e054      	b.n	80023f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_RCC_OscConfig+0x478>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7ff fad8 	bl	8001908 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235c:	f7ff fad4 	bl	8001908 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e045      	b.n	80023fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_RCC_OscConfig+0x470>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x444>
 800237a:	e03d      	b.n	80023f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d107      	bne.n	8002394 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e038      	b.n	80023fa <HAL_RCC_OscConfig+0x4e2>
 8002388:	40023800 	.word	0x40023800
 800238c:	40007000 	.word	0x40007000
 8002390:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <HAL_RCC_OscConfig+0x4ec>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d028      	beq.n	80023f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d121      	bne.n	80023f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d11a      	bne.n	80023f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023c4:	4013      	ands	r3, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d111      	bne.n	80023f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	085b      	lsrs	r3, r3, #1
 80023dc:	3b01      	subs	r3, #1
 80023de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d107      	bne.n	80023f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800

08002408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0cc      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800241c:	4b68      	ldr	r3, [pc, #416]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d90c      	bls.n	8002444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b65      	ldr	r3, [pc, #404]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b63      	ldr	r3, [pc, #396]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0b8      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800245c:	4b59      	ldr	r3, [pc, #356]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a58      	ldr	r2, [pc, #352]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002474:	4b53      	ldr	r3, [pc, #332]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a52      	ldr	r2, [pc, #328]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800247e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002480:	4b50      	ldr	r3, [pc, #320]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	494d      	ldr	r1, [pc, #308]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d044      	beq.n	8002528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b47      	ldr	r3, [pc, #284]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d119      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e07f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d003      	beq.n	80024c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c6:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d109      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e06f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d6:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e067      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e6:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f023 0203 	bic.w	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4934      	ldr	r1, [pc, #208]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f8:	f7ff fa06 	bl	8001908 <HAL_GetTick>
 80024fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002500:	f7ff fa02 	bl	8001908 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	; 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e04f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 020c 	and.w	r2, r3, #12
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	429a      	cmp	r2, r3
 8002526:	d1eb      	bne.n	8002500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d20c      	bcs.n	8002550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e032      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4916      	ldr	r1, [pc, #88]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	490e      	ldr	r1, [pc, #56]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800258e:	f000 f821 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 8002592:	4602      	mov	r2, r0
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	490a      	ldr	r1, [pc, #40]	; (80025c8 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	5ccb      	ldrb	r3, [r1, r3]
 80025a2:	fa22 f303 	lsr.w	r3, r2, r3
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff f966 	bl	8001880 <HAL_InitTick>

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023c00 	.word	0x40023c00
 80025c4:	40023800 	.word	0x40023800
 80025c8:	08005718 	.word	0x08005718
 80025cc:	20000000 	.word	0x20000000
 80025d0:	20000004 	.word	0x20000004

080025d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d8:	b094      	sub	sp, #80	; 0x50
 80025da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	647b      	str	r3, [r7, #68]	; 0x44
 80025e0:	2300      	movs	r3, #0
 80025e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025e4:	2300      	movs	r3, #0
 80025e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ec:	4b79      	ldr	r3, [pc, #484]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d00d      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0x40>
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	f200 80e1 	bhi.w	80027c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x34>
 8002602:	2b04      	cmp	r3, #4
 8002604:	d003      	beq.n	800260e <HAL_RCC_GetSysClockFreq+0x3a>
 8002606:	e0db      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002608:	4b73      	ldr	r3, [pc, #460]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800260a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800260c:	e0db      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800260e:	4b73      	ldr	r3, [pc, #460]	; (80027dc <HAL_RCC_GetSysClockFreq+0x208>)
 8002610:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002612:	e0d8      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002614:	4b6f      	ldr	r3, [pc, #444]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800261c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800261e:	4b6d      	ldr	r3, [pc, #436]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d063      	beq.n	80026f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800262a:	4b6a      	ldr	r3, [pc, #424]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	099b      	lsrs	r3, r3, #6
 8002630:	2200      	movs	r2, #0
 8002632:	63bb      	str	r3, [r7, #56]	; 0x38
 8002634:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
 800263e:	2300      	movs	r3, #0
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
 8002642:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002646:	4622      	mov	r2, r4
 8002648:	462b      	mov	r3, r5
 800264a:	f04f 0000 	mov.w	r0, #0
 800264e:	f04f 0100 	mov.w	r1, #0
 8002652:	0159      	lsls	r1, r3, #5
 8002654:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002658:	0150      	lsls	r0, r2, #5
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4621      	mov	r1, r4
 8002660:	1a51      	subs	r1, r2, r1
 8002662:	6139      	str	r1, [r7, #16]
 8002664:	4629      	mov	r1, r5
 8002666:	eb63 0301 	sbc.w	r3, r3, r1
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002678:	4659      	mov	r1, fp
 800267a:	018b      	lsls	r3, r1, #6
 800267c:	4651      	mov	r1, sl
 800267e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002682:	4651      	mov	r1, sl
 8002684:	018a      	lsls	r2, r1, #6
 8002686:	4651      	mov	r1, sl
 8002688:	ebb2 0801 	subs.w	r8, r2, r1
 800268c:	4659      	mov	r1, fp
 800268e:	eb63 0901 	sbc.w	r9, r3, r1
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800269e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026a6:	4690      	mov	r8, r2
 80026a8:	4699      	mov	r9, r3
 80026aa:	4623      	mov	r3, r4
 80026ac:	eb18 0303 	adds.w	r3, r8, r3
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	462b      	mov	r3, r5
 80026b4:	eb49 0303 	adc.w	r3, r9, r3
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026c6:	4629      	mov	r1, r5
 80026c8:	024b      	lsls	r3, r1, #9
 80026ca:	4621      	mov	r1, r4
 80026cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026d0:	4621      	mov	r1, r4
 80026d2:	024a      	lsls	r2, r1, #9
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026da:	2200      	movs	r2, #0
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80026de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026e4:	f7fe f9c2 	bl	8000a6c <__aeabi_uldivmod>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4613      	mov	r3, r2
 80026ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026f0:	e058      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f2:	4b38      	ldr	r3, [pc, #224]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	099b      	lsrs	r3, r3, #6
 80026f8:	2200      	movs	r2, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	4611      	mov	r1, r2
 80026fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002702:	623b      	str	r3, [r7, #32]
 8002704:	2300      	movs	r3, #0
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
 8002708:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800270c:	4642      	mov	r2, r8
 800270e:	464b      	mov	r3, r9
 8002710:	f04f 0000 	mov.w	r0, #0
 8002714:	f04f 0100 	mov.w	r1, #0
 8002718:	0159      	lsls	r1, r3, #5
 800271a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800271e:	0150      	lsls	r0, r2, #5
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4641      	mov	r1, r8
 8002726:	ebb2 0a01 	subs.w	sl, r2, r1
 800272a:	4649      	mov	r1, r9
 800272c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800273c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002740:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002744:	ebb2 040a 	subs.w	r4, r2, sl
 8002748:	eb63 050b 	sbc.w	r5, r3, fp
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	00eb      	lsls	r3, r5, #3
 8002756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800275a:	00e2      	lsls	r2, r4, #3
 800275c:	4614      	mov	r4, r2
 800275e:	461d      	mov	r5, r3
 8002760:	4643      	mov	r3, r8
 8002762:	18e3      	adds	r3, r4, r3
 8002764:	603b      	str	r3, [r7, #0]
 8002766:	464b      	mov	r3, r9
 8002768:	eb45 0303 	adc.w	r3, r5, r3
 800276c:	607b      	str	r3, [r7, #4]
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	e9d7 4500 	ldrd	r4, r5, [r7]
 800277a:	4629      	mov	r1, r5
 800277c:	028b      	lsls	r3, r1, #10
 800277e:	4621      	mov	r1, r4
 8002780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002784:	4621      	mov	r1, r4
 8002786:	028a      	lsls	r2, r1, #10
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800278e:	2200      	movs	r2, #0
 8002790:	61bb      	str	r3, [r7, #24]
 8002792:	61fa      	str	r2, [r7, #28]
 8002794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002798:	f7fe f968 	bl	8000a6c <__aeabi_uldivmod>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4613      	mov	r3, r2
 80027a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	0c1b      	lsrs	r3, r3, #16
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	3301      	adds	r3, #1
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027be:	e002      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80027c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3750      	adds	r7, #80	; 0x50
 80027cc:	46bd      	mov	sp, r7
 80027ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800
 80027d8:	00f42400 	.word	0x00f42400
 80027dc:	007a1200 	.word	0x007a1200

080027e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000000 	.word	0x20000000

080027f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027fc:	f7ff fff0 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 8002800:	4602      	mov	r2, r0
 8002802:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	0a9b      	lsrs	r3, r3, #10
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	4903      	ldr	r1, [pc, #12]	; (800281c <HAL_RCC_GetPCLK1Freq+0x24>)
 800280e:	5ccb      	ldrb	r3, [r1, r3]
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40023800 	.word	0x40023800
 800281c:	08005728 	.word	0x08005728

08002820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002824:	f7ff ffdc 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	0b5b      	lsrs	r3, r3, #13
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	4903      	ldr	r1, [pc, #12]	; (8002844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40023800 	.word	0x40023800
 8002844:	08005728 	.word	0x08005728

08002848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e041      	b.n	80028de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fe fe1c 	bl	80014ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3304      	adds	r3, #4
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f000 fd98 	bl	80033bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e041      	b.n	800297c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7fe fdad 	bl	800146c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2202      	movs	r2, #2
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	4619      	mov	r1, r3
 8002924:	4610      	mov	r0, r2
 8002926:	f000 fd49 	bl	80033bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e041      	b.n	8002a1a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f839 	bl	8002a22 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3304      	adds	r3, #4
 80029c0:	4619      	mov	r1, r3
 80029c2:	4610      	mov	r0, r2
 80029c4:	f000 fcfa 	bl	80033bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <HAL_TIM_IC_Start_IT+0x1e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	e013      	b.n	8002a7e <HAL_TIM_IC_Start_IT+0x46>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d104      	bne.n	8002a66 <HAL_TIM_IC_Start_IT+0x2e>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	e00b      	b.n	8002a7e <HAL_TIM_IC_Start_IT+0x46>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_IC_Start_IT+0x3e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	e003      	b.n	8002a7e <HAL_TIM_IC_Start_IT+0x46>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d104      	bne.n	8002a90 <HAL_TIM_IC_Start_IT+0x58>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	e013      	b.n	8002ab8 <HAL_TIM_IC_Start_IT+0x80>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d104      	bne.n	8002aa0 <HAL_TIM_IC_Start_IT+0x68>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e00b      	b.n	8002ab8 <HAL_TIM_IC_Start_IT+0x80>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d104      	bne.n	8002ab0 <HAL_TIM_IC_Start_IT+0x78>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e003      	b.n	8002ab8 <HAL_TIM_IC_Start_IT+0x80>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002aba:	7bbb      	ldrb	r3, [r7, #14]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d102      	bne.n	8002ac6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ac0:	7b7b      	ldrb	r3, [r7, #13]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d001      	beq.n	8002aca <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0cc      	b.n	8002c64 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d104      	bne.n	8002ada <HAL_TIM_IC_Start_IT+0xa2>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ad8:	e013      	b.n	8002b02 <HAL_TIM_IC_Start_IT+0xca>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d104      	bne.n	8002aea <HAL_TIM_IC_Start_IT+0xb2>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ae8:	e00b      	b.n	8002b02 <HAL_TIM_IC_Start_IT+0xca>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d104      	bne.n	8002afa <HAL_TIM_IC_Start_IT+0xc2>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af8:	e003      	b.n	8002b02 <HAL_TIM_IC_Start_IT+0xca>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d104      	bne.n	8002b12 <HAL_TIM_IC_Start_IT+0xda>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b10:	e013      	b.n	8002b3a <HAL_TIM_IC_Start_IT+0x102>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d104      	bne.n	8002b22 <HAL_TIM_IC_Start_IT+0xea>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b20:	e00b      	b.n	8002b3a <HAL_TIM_IC_Start_IT+0x102>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d104      	bne.n	8002b32 <HAL_TIM_IC_Start_IT+0xfa>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b30:	e003      	b.n	8002b3a <HAL_TIM_IC_Start_IT+0x102>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2202      	movs	r2, #2
 8002b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b0c      	cmp	r3, #12
 8002b3e:	d841      	bhi.n	8002bc4 <HAL_TIM_IC_Start_IT+0x18c>
 8002b40:	a201      	add	r2, pc, #4	; (adr r2, 8002b48 <HAL_TIM_IC_Start_IT+0x110>)
 8002b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b46:	bf00      	nop
 8002b48:	08002b7d 	.word	0x08002b7d
 8002b4c:	08002bc5 	.word	0x08002bc5
 8002b50:	08002bc5 	.word	0x08002bc5
 8002b54:	08002bc5 	.word	0x08002bc5
 8002b58:	08002b8f 	.word	0x08002b8f
 8002b5c:	08002bc5 	.word	0x08002bc5
 8002b60:	08002bc5 	.word	0x08002bc5
 8002b64:	08002bc5 	.word	0x08002bc5
 8002b68:	08002ba1 	.word	0x08002ba1
 8002b6c:	08002bc5 	.word	0x08002bc5
 8002b70:	08002bc5 	.word	0x08002bc5
 8002b74:	08002bc5 	.word	0x08002bc5
 8002b78:	08002bb3 	.word	0x08002bb3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0202 	orr.w	r2, r2, #2
 8002b8a:	60da      	str	r2, [r3, #12]
      break;
 8002b8c:	e01d      	b.n	8002bca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0204 	orr.w	r2, r2, #4
 8002b9c:	60da      	str	r2, [r3, #12]
      break;
 8002b9e:	e014      	b.n	8002bca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0208 	orr.w	r2, r2, #8
 8002bae:	60da      	str	r2, [r3, #12]
      break;
 8002bb0:	e00b      	b.n	8002bca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0210 	orr.w	r2, r2, #16
 8002bc0:	60da      	str	r2, [r3, #12]
      break;
 8002bc2:	e002      	b.n	8002bca <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d148      	bne.n	8002c62 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	6839      	ldr	r1, [r7, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f001 f803 	bl	8003be4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <HAL_TIM_IC_Start_IT+0x234>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d022      	beq.n	8002c2e <HAL_TIM_IC_Start_IT+0x1f6>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d01d      	beq.n	8002c2e <HAL_TIM_IC_Start_IT+0x1f6>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1e      	ldr	r2, [pc, #120]	; (8002c70 <HAL_TIM_IC_Start_IT+0x238>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d018      	beq.n	8002c2e <HAL_TIM_IC_Start_IT+0x1f6>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <HAL_TIM_IC_Start_IT+0x23c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <HAL_TIM_IC_Start_IT+0x1f6>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a1b      	ldr	r2, [pc, #108]	; (8002c78 <HAL_TIM_IC_Start_IT+0x240>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d00e      	beq.n	8002c2e <HAL_TIM_IC_Start_IT+0x1f6>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a19      	ldr	r2, [pc, #100]	; (8002c7c <HAL_TIM_IC_Start_IT+0x244>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d009      	beq.n	8002c2e <HAL_TIM_IC_Start_IT+0x1f6>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a18      	ldr	r2, [pc, #96]	; (8002c80 <HAL_TIM_IC_Start_IT+0x248>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d004      	beq.n	8002c2e <HAL_TIM_IC_Start_IT+0x1f6>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a16      	ldr	r2, [pc, #88]	; (8002c84 <HAL_TIM_IC_Start_IT+0x24c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d111      	bne.n	8002c52 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b06      	cmp	r3, #6
 8002c3e:	d010      	beq.n	8002c62 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c50:	e007      	b.n	8002c62 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0201 	orr.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40010000 	.word	0x40010000
 8002c70:	40000400 	.word	0x40000400
 8002c74:	40000800 	.word	0x40000800
 8002c78:	40000c00 	.word	0x40000c00
 8002c7c:	40010400 	.word	0x40010400
 8002c80:	40014000 	.word	0x40014000
 8002c84:	40001800 	.word	0x40001800

08002c88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d122      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d11b      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0202 	mvn.w	r2, #2
 8002cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fe f86c 	bl	8000da8 <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e005      	b.n	8002cde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fb54 	bl	8003380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fb5b 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d122      	bne.n	8002d38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d11b      	bne.n	8002d38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0204 	mvn.w	r2, #4
 8002d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7fe f842 	bl	8000da8 <HAL_TIM_IC_CaptureCallback>
 8002d24:	e005      	b.n	8002d32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fb2a 	bl	8003380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 fb31 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d122      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d11b      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0208 	mvn.w	r2, #8
 8002d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2204      	movs	r2, #4
 8002d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fe f818 	bl	8000da8 <HAL_TIM_IC_CaptureCallback>
 8002d78:	e005      	b.n	8002d86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fb00 	bl	8003380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fb07 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b10      	cmp	r3, #16
 8002d98:	d122      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d11b      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0210 	mvn.w	r2, #16
 8002db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2208      	movs	r2, #8
 8002db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fd ffee 	bl	8000da8 <HAL_TIM_IC_CaptureCallback>
 8002dcc:	e005      	b.n	8002dda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fad6 	bl	8003380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 fadd 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d10e      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d107      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0201 	mvn.w	r2, #1
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fab0 	bl	800336c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e16:	2b80      	cmp	r3, #128	; 0x80
 8002e18:	d10e      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e24:	2b80      	cmp	r3, #128	; 0x80
 8002e26:	d107      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 ff82 	bl	8003d3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e42:	2b40      	cmp	r3, #64	; 0x40
 8002e44:	d10e      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e50:	2b40      	cmp	r3, #64	; 0x40
 8002e52:	d107      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 faa2 	bl	80033a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d10e      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	d107      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0220 	mvn.w	r2, #32
 8002e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 ff4c 	bl	8003d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e088      	b.n	8002fc8 <HAL_TIM_IC_ConfigChannel+0x130>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d11b      	bne.n	8002efc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	6819      	ldr	r1, [r3, #0]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f000 fcc2 	bl	800385c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 020c 	bic.w	r2, r2, #12
 8002ee6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6999      	ldr	r1, [r3, #24]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	619a      	str	r2, [r3, #24]
 8002efa:	e060      	b.n	8002fbe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d11c      	bne.n	8002f3c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	6819      	ldr	r1, [r3, #0]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f000 fd46 	bl	80039a2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699a      	ldr	r2, [r3, #24]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002f24:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6999      	ldr	r1, [r3, #24]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	021a      	lsls	r2, r3, #8
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	619a      	str	r2, [r3, #24]
 8002f3a:	e040      	b.n	8002fbe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d11b      	bne.n	8002f7a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	6819      	ldr	r1, [r3, #0]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f000 fd93 	bl	8003a7c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 020c 	bic.w	r2, r2, #12
 8002f64:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69d9      	ldr	r1, [r3, #28]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	61da      	str	r2, [r3, #28]
 8002f78:	e021      	b.n	8002fbe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b0c      	cmp	r3, #12
 8002f7e:	d11c      	bne.n	8002fba <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	6819      	ldr	r1, [r3, #0]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f000 fdb0 	bl	8003af4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002fa2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69d9      	ldr	r1, [r3, #28]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	021a      	lsls	r2, r3, #8
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	61da      	str	r2, [r3, #28]
 8002fb8:	e001      	b.n	8002fbe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e0ae      	b.n	800314c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	f200 809f 	bhi.w	800313c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003039 	.word	0x08003039
 8003008:	0800313d 	.word	0x0800313d
 800300c:	0800313d 	.word	0x0800313d
 8003010:	0800313d 	.word	0x0800313d
 8003014:	08003079 	.word	0x08003079
 8003018:	0800313d 	.word	0x0800313d
 800301c:	0800313d 	.word	0x0800313d
 8003020:	0800313d 	.word	0x0800313d
 8003024:	080030bb 	.word	0x080030bb
 8003028:	0800313d 	.word	0x0800313d
 800302c:	0800313d 	.word	0x0800313d
 8003030:	0800313d 	.word	0x0800313d
 8003034:	080030fb 	.word	0x080030fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fa5c 	bl	80034fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0208 	orr.w	r2, r2, #8
 8003052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0204 	bic.w	r2, r2, #4
 8003062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6999      	ldr	r1, [r3, #24]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	619a      	str	r2, [r3, #24]
      break;
 8003076:	e064      	b.n	8003142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	4618      	mov	r0, r3
 8003080:	f000 faac 	bl	80035dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6999      	ldr	r1, [r3, #24]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	021a      	lsls	r2, r3, #8
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	619a      	str	r2, [r3, #24]
      break;
 80030b8:	e043      	b.n	8003142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fb01 	bl	80036c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69da      	ldr	r2, [r3, #28]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0208 	orr.w	r2, r2, #8
 80030d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0204 	bic.w	r2, r2, #4
 80030e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69d9      	ldr	r1, [r3, #28]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	61da      	str	r2, [r3, #28]
      break;
 80030f8:	e023      	b.n	8003142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fb55 	bl	80037b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69da      	ldr	r2, [r3, #28]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69d9      	ldr	r1, [r3, #28]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	021a      	lsls	r2, r3, #8
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	61da      	str	r2, [r3, #28]
      break;
 800313a:	e002      	b.n	8003142 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	75fb      	strb	r3, [r7, #23]
      break;
 8003140:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800314a:	7dfb      	ldrb	r3, [r7, #23]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_TIM_ConfigClockSource+0x1c>
 800316c:	2302      	movs	r3, #2
 800316e:	e0b4      	b.n	80032da <HAL_TIM_ConfigClockSource+0x186>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800318e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003196:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a8:	d03e      	beq.n	8003228 <HAL_TIM_ConfigClockSource+0xd4>
 80031aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ae:	f200 8087 	bhi.w	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b6:	f000 8086 	beq.w	80032c6 <HAL_TIM_ConfigClockSource+0x172>
 80031ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031be:	d87f      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031c0:	2b70      	cmp	r3, #112	; 0x70
 80031c2:	d01a      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0xa6>
 80031c4:	2b70      	cmp	r3, #112	; 0x70
 80031c6:	d87b      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031c8:	2b60      	cmp	r3, #96	; 0x60
 80031ca:	d050      	beq.n	800326e <HAL_TIM_ConfigClockSource+0x11a>
 80031cc:	2b60      	cmp	r3, #96	; 0x60
 80031ce:	d877      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031d0:	2b50      	cmp	r3, #80	; 0x50
 80031d2:	d03c      	beq.n	800324e <HAL_TIM_ConfigClockSource+0xfa>
 80031d4:	2b50      	cmp	r3, #80	; 0x50
 80031d6:	d873      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031d8:	2b40      	cmp	r3, #64	; 0x40
 80031da:	d058      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x13a>
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d86f      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031e0:	2b30      	cmp	r3, #48	; 0x30
 80031e2:	d064      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x15a>
 80031e4:	2b30      	cmp	r3, #48	; 0x30
 80031e6:	d86b      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d060      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x15a>
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d867      	bhi.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d05c      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x15a>
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d05a      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x15a>
 80031f8:	e062      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6899      	ldr	r1, [r3, #8]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f000 fccb 	bl	8003ba4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800321c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	609a      	str	r2, [r3, #8]
      break;
 8003226:	e04f      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	6899      	ldr	r1, [r3, #8]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f000 fcb4 	bl	8003ba4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800324a:	609a      	str	r2, [r3, #8]
      break;
 800324c:	e03c      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6859      	ldr	r1, [r3, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	461a      	mov	r2, r3
 800325c:	f000 fb72 	bl	8003944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2150      	movs	r1, #80	; 0x50
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fc81 	bl	8003b6e <TIM_ITRx_SetConfig>
      break;
 800326c:	e02c      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6859      	ldr	r1, [r3, #4]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	461a      	mov	r2, r3
 800327c:	f000 fbce 	bl	8003a1c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2160      	movs	r1, #96	; 0x60
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fc71 	bl	8003b6e <TIM_ITRx_SetConfig>
      break;
 800328c:	e01c      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6859      	ldr	r1, [r3, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	461a      	mov	r2, r3
 800329c:	f000 fb52 	bl	8003944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2140      	movs	r1, #64	; 0x40
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fc61 	bl	8003b6e <TIM_ITRx_SetConfig>
      break;
 80032ac:	e00c      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4619      	mov	r1, r3
 80032b8:	4610      	mov	r0, r2
 80032ba:	f000 fc58 	bl	8003b6e <TIM_ITRx_SetConfig>
      break;
 80032be:	e003      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
      break;
 80032c4:	e000      	b.n	80032c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b0c      	cmp	r3, #12
 80032f6:	d831      	bhi.n	800335c <HAL_TIM_ReadCapturedValue+0x78>
 80032f8:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <HAL_TIM_ReadCapturedValue+0x1c>)
 80032fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fe:	bf00      	nop
 8003300:	08003335 	.word	0x08003335
 8003304:	0800335d 	.word	0x0800335d
 8003308:	0800335d 	.word	0x0800335d
 800330c:	0800335d 	.word	0x0800335d
 8003310:	0800333f 	.word	0x0800333f
 8003314:	0800335d 	.word	0x0800335d
 8003318:	0800335d 	.word	0x0800335d
 800331c:	0800335d 	.word	0x0800335d
 8003320:	08003349 	.word	0x08003349
 8003324:	0800335d 	.word	0x0800335d
 8003328:	0800335d 	.word	0x0800335d
 800332c:	0800335d 	.word	0x0800335d
 8003330:	08003353 	.word	0x08003353
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	60fb      	str	r3, [r7, #12]

      break;
 800333c:	e00f      	b.n	800335e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	60fb      	str	r3, [r7, #12]

      break;
 8003346:	e00a      	b.n	800335e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334e:	60fb      	str	r3, [r7, #12]

      break;
 8003350:	e005      	b.n	800335e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	60fb      	str	r3, [r7, #12]

      break;
 800335a:	e000      	b.n	800335e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800335c:	bf00      	nop
  }

  return tmpreg;
 800335e:	68fb      	ldr	r3, [r7, #12]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a40      	ldr	r2, [pc, #256]	; (80034d0 <TIM_Base_SetConfig+0x114>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d013      	beq.n	80033fc <TIM_Base_SetConfig+0x40>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033da:	d00f      	beq.n	80033fc <TIM_Base_SetConfig+0x40>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a3d      	ldr	r2, [pc, #244]	; (80034d4 <TIM_Base_SetConfig+0x118>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00b      	beq.n	80033fc <TIM_Base_SetConfig+0x40>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a3c      	ldr	r2, [pc, #240]	; (80034d8 <TIM_Base_SetConfig+0x11c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d007      	beq.n	80033fc <TIM_Base_SetConfig+0x40>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a3b      	ldr	r2, [pc, #236]	; (80034dc <TIM_Base_SetConfig+0x120>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <TIM_Base_SetConfig+0x40>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a3a      	ldr	r2, [pc, #232]	; (80034e0 <TIM_Base_SetConfig+0x124>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d108      	bne.n	800340e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a2f      	ldr	r2, [pc, #188]	; (80034d0 <TIM_Base_SetConfig+0x114>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d02b      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341c:	d027      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a2c      	ldr	r2, [pc, #176]	; (80034d4 <TIM_Base_SetConfig+0x118>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d023      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a2b      	ldr	r2, [pc, #172]	; (80034d8 <TIM_Base_SetConfig+0x11c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01f      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a2a      	ldr	r2, [pc, #168]	; (80034dc <TIM_Base_SetConfig+0x120>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d01b      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a29      	ldr	r2, [pc, #164]	; (80034e0 <TIM_Base_SetConfig+0x124>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d017      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a28      	ldr	r2, [pc, #160]	; (80034e4 <TIM_Base_SetConfig+0x128>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a27      	ldr	r2, [pc, #156]	; (80034e8 <TIM_Base_SetConfig+0x12c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00f      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a26      	ldr	r2, [pc, #152]	; (80034ec <TIM_Base_SetConfig+0x130>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00b      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a25      	ldr	r2, [pc, #148]	; (80034f0 <TIM_Base_SetConfig+0x134>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d007      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a24      	ldr	r2, [pc, #144]	; (80034f4 <TIM_Base_SetConfig+0x138>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d003      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a23      	ldr	r2, [pc, #140]	; (80034f8 <TIM_Base_SetConfig+0x13c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d108      	bne.n	8003480 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a0a      	ldr	r2, [pc, #40]	; (80034d0 <TIM_Base_SetConfig+0x114>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d003      	beq.n	80034b4 <TIM_Base_SetConfig+0xf8>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a0c      	ldr	r2, [pc, #48]	; (80034e0 <TIM_Base_SetConfig+0x124>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d103      	bne.n	80034bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	615a      	str	r2, [r3, #20]
}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40010000 	.word	0x40010000
 80034d4:	40000400 	.word	0x40000400
 80034d8:	40000800 	.word	0x40000800
 80034dc:	40000c00 	.word	0x40000c00
 80034e0:	40010400 	.word	0x40010400
 80034e4:	40014000 	.word	0x40014000
 80034e8:	40014400 	.word	0x40014400
 80034ec:	40014800 	.word	0x40014800
 80034f0:	40001800 	.word	0x40001800
 80034f4:	40001c00 	.word	0x40001c00
 80034f8:	40002000 	.word	0x40002000

080034fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	f023 0201 	bic.w	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0303 	bic.w	r3, r3, #3
 8003532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f023 0302 	bic.w	r3, r3, #2
 8003544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a20      	ldr	r2, [pc, #128]	; (80035d4 <TIM_OC1_SetConfig+0xd8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d003      	beq.n	8003560 <TIM_OC1_SetConfig+0x64>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <TIM_OC1_SetConfig+0xdc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d10c      	bne.n	800357a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f023 0308 	bic.w	r3, r3, #8
 8003566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f023 0304 	bic.w	r3, r3, #4
 8003578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a15      	ldr	r2, [pc, #84]	; (80035d4 <TIM_OC1_SetConfig+0xd8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d003      	beq.n	800358a <TIM_OC1_SetConfig+0x8e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <TIM_OC1_SetConfig+0xdc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d111      	bne.n	80035ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	621a      	str	r2, [r3, #32]
}
 80035c8:	bf00      	nop
 80035ca:	371c      	adds	r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40010000 	.word	0x40010000
 80035d8:	40010400 	.word	0x40010400

080035dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f023 0210 	bic.w	r2, r3, #16
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800360a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f023 0320 	bic.w	r3, r3, #32
 8003626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a22      	ldr	r2, [pc, #136]	; (80036c0 <TIM_OC2_SetConfig+0xe4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <TIM_OC2_SetConfig+0x68>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a21      	ldr	r2, [pc, #132]	; (80036c4 <TIM_OC2_SetConfig+0xe8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d10d      	bne.n	8003660 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800364a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800365e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a17      	ldr	r2, [pc, #92]	; (80036c0 <TIM_OC2_SetConfig+0xe4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d003      	beq.n	8003670 <TIM_OC2_SetConfig+0x94>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a16      	ldr	r2, [pc, #88]	; (80036c4 <TIM_OC2_SetConfig+0xe8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d113      	bne.n	8003698 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800367e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	621a      	str	r2, [r3, #32]
}
 80036b2:	bf00      	nop
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40010000 	.word	0x40010000
 80036c4:	40010400 	.word	0x40010400

080036c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0303 	bic.w	r3, r3, #3
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a21      	ldr	r2, [pc, #132]	; (80037a8 <TIM_OC3_SetConfig+0xe0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_OC3_SetConfig+0x66>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a20      	ldr	r2, [pc, #128]	; (80037ac <TIM_OC3_SetConfig+0xe4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d10d      	bne.n	800374a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a16      	ldr	r2, [pc, #88]	; (80037a8 <TIM_OC3_SetConfig+0xe0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d003      	beq.n	800375a <TIM_OC3_SetConfig+0x92>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a15      	ldr	r2, [pc, #84]	; (80037ac <TIM_OC3_SetConfig+0xe4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d113      	bne.n	8003782 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	621a      	str	r2, [r3, #32]
}
 800379c:	bf00      	nop
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	40010000 	.word	0x40010000
 80037ac:	40010400 	.word	0x40010400

080037b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	031b      	lsls	r3, r3, #12
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a12      	ldr	r2, [pc, #72]	; (8003854 <TIM_OC4_SetConfig+0xa4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_OC4_SetConfig+0x68>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a11      	ldr	r2, [pc, #68]	; (8003858 <TIM_OC4_SetConfig+0xa8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d109      	bne.n	800382c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800381e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	019b      	lsls	r3, r3, #6
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40010000 	.word	0x40010000
 8003858:	40010400 	.word	0x40010400

0800385c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f023 0201 	bic.w	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4a28      	ldr	r2, [pc, #160]	; (8003928 <TIM_TI1_SetConfig+0xcc>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01b      	beq.n	80038c2 <TIM_TI1_SetConfig+0x66>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003890:	d017      	beq.n	80038c2 <TIM_TI1_SetConfig+0x66>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a25      	ldr	r2, [pc, #148]	; (800392c <TIM_TI1_SetConfig+0xd0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <TIM_TI1_SetConfig+0x66>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4a24      	ldr	r2, [pc, #144]	; (8003930 <TIM_TI1_SetConfig+0xd4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00f      	beq.n	80038c2 <TIM_TI1_SetConfig+0x66>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4a23      	ldr	r2, [pc, #140]	; (8003934 <TIM_TI1_SetConfig+0xd8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00b      	beq.n	80038c2 <TIM_TI1_SetConfig+0x66>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4a22      	ldr	r2, [pc, #136]	; (8003938 <TIM_TI1_SetConfig+0xdc>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d007      	beq.n	80038c2 <TIM_TI1_SetConfig+0x66>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4a21      	ldr	r2, [pc, #132]	; (800393c <TIM_TI1_SetConfig+0xe0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d003      	beq.n	80038c2 <TIM_TI1_SetConfig+0x66>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a20      	ldr	r2, [pc, #128]	; (8003940 <TIM_TI1_SetConfig+0xe4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <TIM_TI1_SetConfig+0x6a>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <TIM_TI1_SetConfig+0x6c>
 80038c6:	2300      	movs	r3, #0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f023 0303 	bic.w	r3, r3, #3
 80038d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e003      	b.n	80038e6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f023 030a 	bic.w	r3, r3, #10
 8003900:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f003 030a 	and.w	r3, r3, #10
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	621a      	str	r2, [r3, #32]
}
 800391a:	bf00      	nop
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40010000 	.word	0x40010000
 800392c:	40000400 	.word	0x40000400
 8003930:	40000800 	.word	0x40000800
 8003934:	40000c00 	.word	0x40000c00
 8003938:	40010400 	.word	0x40010400
 800393c:	40014000 	.word	0x40014000
 8003940:	40001800 	.word	0x40001800

08003944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f023 0201 	bic.w	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800396e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f023 030a 	bic.w	r3, r3, #10
 8003980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b087      	sub	sp, #28
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
 80039ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f023 0210 	bic.w	r2, r3, #16
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	031b      	lsls	r3, r3, #12
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	621a      	str	r2, [r3, #32]
}
 8003a10:	bf00      	nop
 8003a12:	371c      	adds	r7, #28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f023 0210 	bic.w	r2, r3, #16
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	031b      	lsls	r3, r3, #12
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	621a      	str	r2, [r3, #32]
}
 8003a70:	bf00      	nop
 8003a72:	371c      	adds	r7, #28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f023 0303 	bic.w	r3, r3, #3
 8003aa8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ab8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003acc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	621a      	str	r2, [r3, #32]
}
 8003ae8:	bf00      	nop
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	021b      	lsls	r3, r3, #8
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b32:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	031b      	lsls	r3, r3, #12
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003b46:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	031b      	lsls	r3, r3, #12
 8003b4c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	621a      	str	r2, [r3, #32]
}
 8003b62:	bf00      	nop
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f043 0307 	orr.w	r3, r3, #7
 8003b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	609a      	str	r2, [r3, #8]
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	021a      	lsls	r2, r3, #8
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	609a      	str	r2, [r3, #8]
}
 8003bd8:	bf00      	nop
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 031f 	and.w	r3, r3, #31
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1a      	ldr	r2, [r3, #32]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	401a      	ands	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a1a      	ldr	r2, [r3, #32]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	621a      	str	r2, [r3, #32]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e05a      	b.n	8003cfe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a21      	ldr	r2, [pc, #132]	; (8003d0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d022      	beq.n	8003cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c94:	d01d      	beq.n	8003cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1d      	ldr	r2, [pc, #116]	; (8003d10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d018      	beq.n	8003cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1b      	ldr	r2, [pc, #108]	; (8003d14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d013      	beq.n	8003cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1a      	ldr	r2, [pc, #104]	; (8003d18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00e      	beq.n	8003cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a18      	ldr	r2, [pc, #96]	; (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d009      	beq.n	8003cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a17      	ldr	r2, [pc, #92]	; (8003d20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d004      	beq.n	8003cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d10c      	bne.n	8003cec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40010000 	.word	0x40010000
 8003d10:	40000400 	.word	0x40000400
 8003d14:	40000800 	.word	0x40000800
 8003d18:	40000c00 	.word	0x40000c00
 8003d1c:	40010400 	.word	0x40010400
 8003d20:	40014000 	.word	0x40014000
 8003d24:	40001800 	.word	0x40001800

08003d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e03f      	b.n	8003de2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fd fc20 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2224      	movs	r2, #36	; 0x24
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f929 	bl	8003fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003da8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003db8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b08a      	sub	sp, #40	; 0x28
 8003dee:	af02      	add	r7, sp, #8
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	603b      	str	r3, [r7, #0]
 8003df6:	4613      	mov	r3, r2
 8003df8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b20      	cmp	r3, #32
 8003e08:	d17c      	bne.n	8003f04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_UART_Transmit+0x2c>
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e075      	b.n	8003f06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_UART_Transmit+0x3e>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e06e      	b.n	8003f06 <HAL_UART_Transmit+0x11c>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2221      	movs	r2, #33	; 0x21
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e3e:	f7fd fd63 	bl	8001908 <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	88fa      	ldrh	r2, [r7, #6]
 8003e4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e58:	d108      	bne.n	8003e6c <HAL_UART_Transmit+0x82>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d104      	bne.n	8003e6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	e003      	b.n	8003e74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e7c:	e02a      	b.n	8003ed4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2200      	movs	r2, #0
 8003e86:	2180      	movs	r1, #128	; 0x80
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 f840 	bl	8003f0e <UART_WaitOnFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e036      	b.n	8003f06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10b      	bne.n	8003eb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	e007      	b.n	8003ec6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	781a      	ldrb	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1cf      	bne.n	8003e7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2140      	movs	r1, #64	; 0x40
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f810 	bl	8003f0e <UART_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e006      	b.n	8003f06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	e000      	b.n	8003f06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
  }
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3720      	adds	r7, #32
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b090      	sub	sp, #64	; 0x40
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1e:	e050      	b.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	d04c      	beq.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d007      	beq.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f2e:	f7fd fceb 	bl	8001908 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d241      	bcs.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	330c      	adds	r3, #12
 8003f44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	330c      	adds	r3, #12
 8003f5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f5e:	637a      	str	r2, [r7, #52]	; 0x34
 8003f60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e5      	bne.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3314      	adds	r3, #20
 8003f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	613b      	str	r3, [r7, #16]
   return(result);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3314      	adds	r3, #20
 8003f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f92:	623a      	str	r2, [r7, #32]
 8003f94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	69f9      	ldr	r1, [r7, #28]
 8003f98:	6a3a      	ldr	r2, [r7, #32]
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e5      	bne.n	8003f72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e00f      	b.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	bf0c      	ite	eq
 8003fd2:	2301      	moveq	r3, #1
 8003fd4:	2300      	movne	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d09f      	beq.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3740      	adds	r7, #64	; 0x40
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff0:	b0c0      	sub	sp, #256	; 0x100
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004008:	68d9      	ldr	r1, [r3, #12]
 800400a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	ea40 0301 	orr.w	r3, r0, r1
 8004014:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	431a      	orrs	r2, r3
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	431a      	orrs	r2, r3
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004044:	f021 010c 	bic.w	r1, r1, #12
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004052:	430b      	orrs	r3, r1
 8004054:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004066:	6999      	ldr	r1, [r3, #24]
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	ea40 0301 	orr.w	r3, r0, r1
 8004072:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	4b8f      	ldr	r3, [pc, #572]	; (80042b8 <UART_SetConfig+0x2cc>)
 800407c:	429a      	cmp	r2, r3
 800407e:	d005      	beq.n	800408c <UART_SetConfig+0xa0>
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	4b8d      	ldr	r3, [pc, #564]	; (80042bc <UART_SetConfig+0x2d0>)
 8004088:	429a      	cmp	r2, r3
 800408a:	d104      	bne.n	8004096 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800408c:	f7fe fbc8 	bl	8002820 <HAL_RCC_GetPCLK2Freq>
 8004090:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004094:	e003      	b.n	800409e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004096:	f7fe fbaf 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 800409a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a8:	f040 810c 	bne.w	80042c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b0:	2200      	movs	r2, #0
 80040b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040be:	4622      	mov	r2, r4
 80040c0:	462b      	mov	r3, r5
 80040c2:	1891      	adds	r1, r2, r2
 80040c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80040c6:	415b      	adcs	r3, r3
 80040c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040ce:	4621      	mov	r1, r4
 80040d0:	eb12 0801 	adds.w	r8, r2, r1
 80040d4:	4629      	mov	r1, r5
 80040d6:	eb43 0901 	adc.w	r9, r3, r1
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ee:	4690      	mov	r8, r2
 80040f0:	4699      	mov	r9, r3
 80040f2:	4623      	mov	r3, r4
 80040f4:	eb18 0303 	adds.w	r3, r8, r3
 80040f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040fc:	462b      	mov	r3, r5
 80040fe:	eb49 0303 	adc.w	r3, r9, r3
 8004102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004112:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004116:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800411a:	460b      	mov	r3, r1
 800411c:	18db      	adds	r3, r3, r3
 800411e:	653b      	str	r3, [r7, #80]	; 0x50
 8004120:	4613      	mov	r3, r2
 8004122:	eb42 0303 	adc.w	r3, r2, r3
 8004126:	657b      	str	r3, [r7, #84]	; 0x54
 8004128:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800412c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004130:	f7fc fc9c 	bl	8000a6c <__aeabi_uldivmod>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4b61      	ldr	r3, [pc, #388]	; (80042c0 <UART_SetConfig+0x2d4>)
 800413a:	fba3 2302 	umull	r2, r3, r3, r2
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	011c      	lsls	r4, r3, #4
 8004142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004146:	2200      	movs	r2, #0
 8004148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800414c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004150:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004154:	4642      	mov	r2, r8
 8004156:	464b      	mov	r3, r9
 8004158:	1891      	adds	r1, r2, r2
 800415a:	64b9      	str	r1, [r7, #72]	; 0x48
 800415c:	415b      	adcs	r3, r3
 800415e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004160:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004164:	4641      	mov	r1, r8
 8004166:	eb12 0a01 	adds.w	sl, r2, r1
 800416a:	4649      	mov	r1, r9
 800416c:	eb43 0b01 	adc.w	fp, r3, r1
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800417c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004184:	4692      	mov	sl, r2
 8004186:	469b      	mov	fp, r3
 8004188:	4643      	mov	r3, r8
 800418a:	eb1a 0303 	adds.w	r3, sl, r3
 800418e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004192:	464b      	mov	r3, r9
 8004194:	eb4b 0303 	adc.w	r3, fp, r3
 8004198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041b0:	460b      	mov	r3, r1
 80041b2:	18db      	adds	r3, r3, r3
 80041b4:	643b      	str	r3, [r7, #64]	; 0x40
 80041b6:	4613      	mov	r3, r2
 80041b8:	eb42 0303 	adc.w	r3, r2, r3
 80041bc:	647b      	str	r3, [r7, #68]	; 0x44
 80041be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041c6:	f7fc fc51 	bl	8000a6c <__aeabi_uldivmod>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4611      	mov	r1, r2
 80041d0:	4b3b      	ldr	r3, [pc, #236]	; (80042c0 <UART_SetConfig+0x2d4>)
 80041d2:	fba3 2301 	umull	r2, r3, r3, r1
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	2264      	movs	r2, #100	; 0x64
 80041da:	fb02 f303 	mul.w	r3, r2, r3
 80041de:	1acb      	subs	r3, r1, r3
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041e6:	4b36      	ldr	r3, [pc, #216]	; (80042c0 <UART_SetConfig+0x2d4>)
 80041e8:	fba3 2302 	umull	r2, r3, r3, r2
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041f4:	441c      	add	r4, r3
 80041f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004200:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004204:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004208:	4642      	mov	r2, r8
 800420a:	464b      	mov	r3, r9
 800420c:	1891      	adds	r1, r2, r2
 800420e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004210:	415b      	adcs	r3, r3
 8004212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004214:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004218:	4641      	mov	r1, r8
 800421a:	1851      	adds	r1, r2, r1
 800421c:	6339      	str	r1, [r7, #48]	; 0x30
 800421e:	4649      	mov	r1, r9
 8004220:	414b      	adcs	r3, r1
 8004222:	637b      	str	r3, [r7, #52]	; 0x34
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004230:	4659      	mov	r1, fp
 8004232:	00cb      	lsls	r3, r1, #3
 8004234:	4651      	mov	r1, sl
 8004236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800423a:	4651      	mov	r1, sl
 800423c:	00ca      	lsls	r2, r1, #3
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	4603      	mov	r3, r0
 8004244:	4642      	mov	r2, r8
 8004246:	189b      	adds	r3, r3, r2
 8004248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800424c:	464b      	mov	r3, r9
 800424e:	460a      	mov	r2, r1
 8004250:	eb42 0303 	adc.w	r3, r2, r3
 8004254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004264:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800426c:	460b      	mov	r3, r1
 800426e:	18db      	adds	r3, r3, r3
 8004270:	62bb      	str	r3, [r7, #40]	; 0x28
 8004272:	4613      	mov	r3, r2
 8004274:	eb42 0303 	adc.w	r3, r2, r3
 8004278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800427a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800427e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004282:	f7fc fbf3 	bl	8000a6c <__aeabi_uldivmod>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <UART_SetConfig+0x2d4>)
 800428c:	fba3 1302 	umull	r1, r3, r3, r2
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	2164      	movs	r1, #100	; 0x64
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	3332      	adds	r3, #50	; 0x32
 800429e:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <UART_SetConfig+0x2d4>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	f003 0207 	and.w	r2, r3, #7
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4422      	add	r2, r4
 80042b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042b4:	e105      	b.n	80044c2 <UART_SetConfig+0x4d6>
 80042b6:	bf00      	nop
 80042b8:	40011000 	.word	0x40011000
 80042bc:	40011400 	.word	0x40011400
 80042c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c8:	2200      	movs	r2, #0
 80042ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042d6:	4642      	mov	r2, r8
 80042d8:	464b      	mov	r3, r9
 80042da:	1891      	adds	r1, r2, r2
 80042dc:	6239      	str	r1, [r7, #32]
 80042de:	415b      	adcs	r3, r3
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
 80042e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042e6:	4641      	mov	r1, r8
 80042e8:	1854      	adds	r4, r2, r1
 80042ea:	4649      	mov	r1, r9
 80042ec:	eb43 0501 	adc.w	r5, r3, r1
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	00eb      	lsls	r3, r5, #3
 80042fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042fe:	00e2      	lsls	r2, r4, #3
 8004300:	4614      	mov	r4, r2
 8004302:	461d      	mov	r5, r3
 8004304:	4643      	mov	r3, r8
 8004306:	18e3      	adds	r3, r4, r3
 8004308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800430c:	464b      	mov	r3, r9
 800430e:	eb45 0303 	adc.w	r3, r5, r3
 8004312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004332:	4629      	mov	r1, r5
 8004334:	008b      	lsls	r3, r1, #2
 8004336:	4621      	mov	r1, r4
 8004338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800433c:	4621      	mov	r1, r4
 800433e:	008a      	lsls	r2, r1, #2
 8004340:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004344:	f7fc fb92 	bl	8000a6c <__aeabi_uldivmod>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4b60      	ldr	r3, [pc, #384]	; (80044d0 <UART_SetConfig+0x4e4>)
 800434e:	fba3 2302 	umull	r2, r3, r3, r2
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	011c      	lsls	r4, r3, #4
 8004356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800435a:	2200      	movs	r2, #0
 800435c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004360:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004364:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004368:	4642      	mov	r2, r8
 800436a:	464b      	mov	r3, r9
 800436c:	1891      	adds	r1, r2, r2
 800436e:	61b9      	str	r1, [r7, #24]
 8004370:	415b      	adcs	r3, r3
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004378:	4641      	mov	r1, r8
 800437a:	1851      	adds	r1, r2, r1
 800437c:	6139      	str	r1, [r7, #16]
 800437e:	4649      	mov	r1, r9
 8004380:	414b      	adcs	r3, r1
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004390:	4659      	mov	r1, fp
 8004392:	00cb      	lsls	r3, r1, #3
 8004394:	4651      	mov	r1, sl
 8004396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800439a:	4651      	mov	r1, sl
 800439c:	00ca      	lsls	r2, r1, #3
 800439e:	4610      	mov	r0, r2
 80043a0:	4619      	mov	r1, r3
 80043a2:	4603      	mov	r3, r0
 80043a4:	4642      	mov	r2, r8
 80043a6:	189b      	adds	r3, r3, r2
 80043a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043ac:	464b      	mov	r3, r9
 80043ae:	460a      	mov	r2, r1
 80043b0:	eb42 0303 	adc.w	r3, r2, r3
 80043b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80043c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043d0:	4649      	mov	r1, r9
 80043d2:	008b      	lsls	r3, r1, #2
 80043d4:	4641      	mov	r1, r8
 80043d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043da:	4641      	mov	r1, r8
 80043dc:	008a      	lsls	r2, r1, #2
 80043de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043e2:	f7fc fb43 	bl	8000a6c <__aeabi_uldivmod>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <UART_SetConfig+0x4e4>)
 80043ec:	fba3 1302 	umull	r1, r3, r3, r2
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	2164      	movs	r1, #100	; 0x64
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	3332      	adds	r3, #50	; 0x32
 80043fe:	4a34      	ldr	r2, [pc, #208]	; (80044d0 <UART_SetConfig+0x4e4>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800440a:	441c      	add	r4, r3
 800440c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004410:	2200      	movs	r2, #0
 8004412:	673b      	str	r3, [r7, #112]	; 0x70
 8004414:	677a      	str	r2, [r7, #116]	; 0x74
 8004416:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800441a:	4642      	mov	r2, r8
 800441c:	464b      	mov	r3, r9
 800441e:	1891      	adds	r1, r2, r2
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	415b      	adcs	r3, r3
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800442a:	4641      	mov	r1, r8
 800442c:	1851      	adds	r1, r2, r1
 800442e:	6039      	str	r1, [r7, #0]
 8004430:	4649      	mov	r1, r9
 8004432:	414b      	adcs	r3, r1
 8004434:	607b      	str	r3, [r7, #4]
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004442:	4659      	mov	r1, fp
 8004444:	00cb      	lsls	r3, r1, #3
 8004446:	4651      	mov	r1, sl
 8004448:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800444c:	4651      	mov	r1, sl
 800444e:	00ca      	lsls	r2, r1, #3
 8004450:	4610      	mov	r0, r2
 8004452:	4619      	mov	r1, r3
 8004454:	4603      	mov	r3, r0
 8004456:	4642      	mov	r2, r8
 8004458:	189b      	adds	r3, r3, r2
 800445a:	66bb      	str	r3, [r7, #104]	; 0x68
 800445c:	464b      	mov	r3, r9
 800445e:	460a      	mov	r2, r1
 8004460:	eb42 0303 	adc.w	r3, r2, r3
 8004464:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	663b      	str	r3, [r7, #96]	; 0x60
 8004470:	667a      	str	r2, [r7, #100]	; 0x64
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800447e:	4649      	mov	r1, r9
 8004480:	008b      	lsls	r3, r1, #2
 8004482:	4641      	mov	r1, r8
 8004484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004488:	4641      	mov	r1, r8
 800448a:	008a      	lsls	r2, r1, #2
 800448c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004490:	f7fc faec 	bl	8000a6c <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <UART_SetConfig+0x4e4>)
 800449a:	fba3 1302 	umull	r1, r3, r3, r2
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	2164      	movs	r1, #100	; 0x64
 80044a2:	fb01 f303 	mul.w	r3, r1, r3
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	3332      	adds	r3, #50	; 0x32
 80044ac:	4a08      	ldr	r2, [pc, #32]	; (80044d0 <UART_SetConfig+0x4e4>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	f003 020f 	and.w	r2, r3, #15
 80044b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4422      	add	r2, r4
 80044c0:	609a      	str	r2, [r3, #8]
}
 80044c2:	bf00      	nop
 80044c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044c8:	46bd      	mov	sp, r7
 80044ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ce:	bf00      	nop
 80044d0:	51eb851f 	.word	0x51eb851f

080044d4 <__errno>:
 80044d4:	4b01      	ldr	r3, [pc, #4]	; (80044dc <__errno+0x8>)
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	2000000c 	.word	0x2000000c

080044e0 <__libc_init_array>:
 80044e0:	b570      	push	{r4, r5, r6, lr}
 80044e2:	4d0d      	ldr	r5, [pc, #52]	; (8004518 <__libc_init_array+0x38>)
 80044e4:	4c0d      	ldr	r4, [pc, #52]	; (800451c <__libc_init_array+0x3c>)
 80044e6:	1b64      	subs	r4, r4, r5
 80044e8:	10a4      	asrs	r4, r4, #2
 80044ea:	2600      	movs	r6, #0
 80044ec:	42a6      	cmp	r6, r4
 80044ee:	d109      	bne.n	8004504 <__libc_init_array+0x24>
 80044f0:	4d0b      	ldr	r5, [pc, #44]	; (8004520 <__libc_init_array+0x40>)
 80044f2:	4c0c      	ldr	r4, [pc, #48]	; (8004524 <__libc_init_array+0x44>)
 80044f4:	f001 f8f2 	bl	80056dc <_init>
 80044f8:	1b64      	subs	r4, r4, r5
 80044fa:	10a4      	asrs	r4, r4, #2
 80044fc:	2600      	movs	r6, #0
 80044fe:	42a6      	cmp	r6, r4
 8004500:	d105      	bne.n	800450e <__libc_init_array+0x2e>
 8004502:	bd70      	pop	{r4, r5, r6, pc}
 8004504:	f855 3b04 	ldr.w	r3, [r5], #4
 8004508:	4798      	blx	r3
 800450a:	3601      	adds	r6, #1
 800450c:	e7ee      	b.n	80044ec <__libc_init_array+0xc>
 800450e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004512:	4798      	blx	r3
 8004514:	3601      	adds	r6, #1
 8004516:	e7f2      	b.n	80044fe <__libc_init_array+0x1e>
 8004518:	080057d0 	.word	0x080057d0
 800451c:	080057d0 	.word	0x080057d0
 8004520:	080057d0 	.word	0x080057d0
 8004524:	080057d4 	.word	0x080057d4

08004528 <memset>:
 8004528:	4402      	add	r2, r0
 800452a:	4603      	mov	r3, r0
 800452c:	4293      	cmp	r3, r2
 800452e:	d100      	bne.n	8004532 <memset+0xa>
 8004530:	4770      	bx	lr
 8004532:	f803 1b01 	strb.w	r1, [r3], #1
 8004536:	e7f9      	b.n	800452c <memset+0x4>

08004538 <iprintf>:
 8004538:	b40f      	push	{r0, r1, r2, r3}
 800453a:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <iprintf+0x2c>)
 800453c:	b513      	push	{r0, r1, r4, lr}
 800453e:	681c      	ldr	r4, [r3, #0]
 8004540:	b124      	cbz	r4, 800454c <iprintf+0x14>
 8004542:	69a3      	ldr	r3, [r4, #24]
 8004544:	b913      	cbnz	r3, 800454c <iprintf+0x14>
 8004546:	4620      	mov	r0, r4
 8004548:	f000 fb24 	bl	8004b94 <__sinit>
 800454c:	ab05      	add	r3, sp, #20
 800454e:	9a04      	ldr	r2, [sp, #16]
 8004550:	68a1      	ldr	r1, [r4, #8]
 8004552:	9301      	str	r3, [sp, #4]
 8004554:	4620      	mov	r0, r4
 8004556:	f000 fd35 	bl	8004fc4 <_vfiprintf_r>
 800455a:	b002      	add	sp, #8
 800455c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004560:	b004      	add	sp, #16
 8004562:	4770      	bx	lr
 8004564:	2000000c 	.word	0x2000000c

08004568 <_puts_r>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	460e      	mov	r6, r1
 800456c:	4605      	mov	r5, r0
 800456e:	b118      	cbz	r0, 8004578 <_puts_r+0x10>
 8004570:	6983      	ldr	r3, [r0, #24]
 8004572:	b90b      	cbnz	r3, 8004578 <_puts_r+0x10>
 8004574:	f000 fb0e 	bl	8004b94 <__sinit>
 8004578:	69ab      	ldr	r3, [r5, #24]
 800457a:	68ac      	ldr	r4, [r5, #8]
 800457c:	b913      	cbnz	r3, 8004584 <_puts_r+0x1c>
 800457e:	4628      	mov	r0, r5
 8004580:	f000 fb08 	bl	8004b94 <__sinit>
 8004584:	4b2c      	ldr	r3, [pc, #176]	; (8004638 <_puts_r+0xd0>)
 8004586:	429c      	cmp	r4, r3
 8004588:	d120      	bne.n	80045cc <_puts_r+0x64>
 800458a:	686c      	ldr	r4, [r5, #4]
 800458c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800458e:	07db      	lsls	r3, r3, #31
 8004590:	d405      	bmi.n	800459e <_puts_r+0x36>
 8004592:	89a3      	ldrh	r3, [r4, #12]
 8004594:	0598      	lsls	r0, r3, #22
 8004596:	d402      	bmi.n	800459e <_puts_r+0x36>
 8004598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800459a:	f000 fb99 	bl	8004cd0 <__retarget_lock_acquire_recursive>
 800459e:	89a3      	ldrh	r3, [r4, #12]
 80045a0:	0719      	lsls	r1, r3, #28
 80045a2:	d51d      	bpl.n	80045e0 <_puts_r+0x78>
 80045a4:	6923      	ldr	r3, [r4, #16]
 80045a6:	b1db      	cbz	r3, 80045e0 <_puts_r+0x78>
 80045a8:	3e01      	subs	r6, #1
 80045aa:	68a3      	ldr	r3, [r4, #8]
 80045ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80045b0:	3b01      	subs	r3, #1
 80045b2:	60a3      	str	r3, [r4, #8]
 80045b4:	bb39      	cbnz	r1, 8004606 <_puts_r+0x9e>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	da38      	bge.n	800462c <_puts_r+0xc4>
 80045ba:	4622      	mov	r2, r4
 80045bc:	210a      	movs	r1, #10
 80045be:	4628      	mov	r0, r5
 80045c0:	f000 f90e 	bl	80047e0 <__swbuf_r>
 80045c4:	3001      	adds	r0, #1
 80045c6:	d011      	beq.n	80045ec <_puts_r+0x84>
 80045c8:	250a      	movs	r5, #10
 80045ca:	e011      	b.n	80045f0 <_puts_r+0x88>
 80045cc:	4b1b      	ldr	r3, [pc, #108]	; (800463c <_puts_r+0xd4>)
 80045ce:	429c      	cmp	r4, r3
 80045d0:	d101      	bne.n	80045d6 <_puts_r+0x6e>
 80045d2:	68ac      	ldr	r4, [r5, #8]
 80045d4:	e7da      	b.n	800458c <_puts_r+0x24>
 80045d6:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <_puts_r+0xd8>)
 80045d8:	429c      	cmp	r4, r3
 80045da:	bf08      	it	eq
 80045dc:	68ec      	ldreq	r4, [r5, #12]
 80045de:	e7d5      	b.n	800458c <_puts_r+0x24>
 80045e0:	4621      	mov	r1, r4
 80045e2:	4628      	mov	r0, r5
 80045e4:	f000 f94e 	bl	8004884 <__swsetup_r>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d0dd      	beq.n	80045a8 <_puts_r+0x40>
 80045ec:	f04f 35ff 	mov.w	r5, #4294967295
 80045f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045f2:	07da      	lsls	r2, r3, #31
 80045f4:	d405      	bmi.n	8004602 <_puts_r+0x9a>
 80045f6:	89a3      	ldrh	r3, [r4, #12]
 80045f8:	059b      	lsls	r3, r3, #22
 80045fa:	d402      	bmi.n	8004602 <_puts_r+0x9a>
 80045fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045fe:	f000 fb68 	bl	8004cd2 <__retarget_lock_release_recursive>
 8004602:	4628      	mov	r0, r5
 8004604:	bd70      	pop	{r4, r5, r6, pc}
 8004606:	2b00      	cmp	r3, #0
 8004608:	da04      	bge.n	8004614 <_puts_r+0xac>
 800460a:	69a2      	ldr	r2, [r4, #24]
 800460c:	429a      	cmp	r2, r3
 800460e:	dc06      	bgt.n	800461e <_puts_r+0xb6>
 8004610:	290a      	cmp	r1, #10
 8004612:	d004      	beq.n	800461e <_puts_r+0xb6>
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	6022      	str	r2, [r4, #0]
 800461a:	7019      	strb	r1, [r3, #0]
 800461c:	e7c5      	b.n	80045aa <_puts_r+0x42>
 800461e:	4622      	mov	r2, r4
 8004620:	4628      	mov	r0, r5
 8004622:	f000 f8dd 	bl	80047e0 <__swbuf_r>
 8004626:	3001      	adds	r0, #1
 8004628:	d1bf      	bne.n	80045aa <_puts_r+0x42>
 800462a:	e7df      	b.n	80045ec <_puts_r+0x84>
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	250a      	movs	r5, #10
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	6022      	str	r2, [r4, #0]
 8004634:	701d      	strb	r5, [r3, #0]
 8004636:	e7db      	b.n	80045f0 <_puts_r+0x88>
 8004638:	08005754 	.word	0x08005754
 800463c:	08005774 	.word	0x08005774
 8004640:	08005734 	.word	0x08005734

08004644 <puts>:
 8004644:	4b02      	ldr	r3, [pc, #8]	; (8004650 <puts+0xc>)
 8004646:	4601      	mov	r1, r0
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	f7ff bf8d 	b.w	8004568 <_puts_r>
 800464e:	bf00      	nop
 8004650:	2000000c 	.word	0x2000000c

08004654 <setvbuf>:
 8004654:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004658:	461d      	mov	r5, r3
 800465a:	4b5d      	ldr	r3, [pc, #372]	; (80047d0 <setvbuf+0x17c>)
 800465c:	681f      	ldr	r7, [r3, #0]
 800465e:	4604      	mov	r4, r0
 8004660:	460e      	mov	r6, r1
 8004662:	4690      	mov	r8, r2
 8004664:	b127      	cbz	r7, 8004670 <setvbuf+0x1c>
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	b913      	cbnz	r3, 8004670 <setvbuf+0x1c>
 800466a:	4638      	mov	r0, r7
 800466c:	f000 fa92 	bl	8004b94 <__sinit>
 8004670:	4b58      	ldr	r3, [pc, #352]	; (80047d4 <setvbuf+0x180>)
 8004672:	429c      	cmp	r4, r3
 8004674:	d167      	bne.n	8004746 <setvbuf+0xf2>
 8004676:	687c      	ldr	r4, [r7, #4]
 8004678:	f1b8 0f02 	cmp.w	r8, #2
 800467c:	d006      	beq.n	800468c <setvbuf+0x38>
 800467e:	f1b8 0f01 	cmp.w	r8, #1
 8004682:	f200 809f 	bhi.w	80047c4 <setvbuf+0x170>
 8004686:	2d00      	cmp	r5, #0
 8004688:	f2c0 809c 	blt.w	80047c4 <setvbuf+0x170>
 800468c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800468e:	07db      	lsls	r3, r3, #31
 8004690:	d405      	bmi.n	800469e <setvbuf+0x4a>
 8004692:	89a3      	ldrh	r3, [r4, #12]
 8004694:	0598      	lsls	r0, r3, #22
 8004696:	d402      	bmi.n	800469e <setvbuf+0x4a>
 8004698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800469a:	f000 fb19 	bl	8004cd0 <__retarget_lock_acquire_recursive>
 800469e:	4621      	mov	r1, r4
 80046a0:	4638      	mov	r0, r7
 80046a2:	f000 f9e3 	bl	8004a6c <_fflush_r>
 80046a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046a8:	b141      	cbz	r1, 80046bc <setvbuf+0x68>
 80046aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046ae:	4299      	cmp	r1, r3
 80046b0:	d002      	beq.n	80046b8 <setvbuf+0x64>
 80046b2:	4638      	mov	r0, r7
 80046b4:	f000 fb7c 	bl	8004db0 <_free_r>
 80046b8:	2300      	movs	r3, #0
 80046ba:	6363      	str	r3, [r4, #52]	; 0x34
 80046bc:	2300      	movs	r3, #0
 80046be:	61a3      	str	r3, [r4, #24]
 80046c0:	6063      	str	r3, [r4, #4]
 80046c2:	89a3      	ldrh	r3, [r4, #12]
 80046c4:	0619      	lsls	r1, r3, #24
 80046c6:	d503      	bpl.n	80046d0 <setvbuf+0x7c>
 80046c8:	6921      	ldr	r1, [r4, #16]
 80046ca:	4638      	mov	r0, r7
 80046cc:	f000 fb70 	bl	8004db0 <_free_r>
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80046d6:	f023 0303 	bic.w	r3, r3, #3
 80046da:	f1b8 0f02 	cmp.w	r8, #2
 80046de:	81a3      	strh	r3, [r4, #12]
 80046e0:	d06c      	beq.n	80047bc <setvbuf+0x168>
 80046e2:	ab01      	add	r3, sp, #4
 80046e4:	466a      	mov	r2, sp
 80046e6:	4621      	mov	r1, r4
 80046e8:	4638      	mov	r0, r7
 80046ea:	f000 faf3 	bl	8004cd4 <__swhatbuf_r>
 80046ee:	89a3      	ldrh	r3, [r4, #12]
 80046f0:	4318      	orrs	r0, r3
 80046f2:	81a0      	strh	r0, [r4, #12]
 80046f4:	2d00      	cmp	r5, #0
 80046f6:	d130      	bne.n	800475a <setvbuf+0x106>
 80046f8:	9d00      	ldr	r5, [sp, #0]
 80046fa:	4628      	mov	r0, r5
 80046fc:	f000 fb50 	bl	8004da0 <malloc>
 8004700:	4606      	mov	r6, r0
 8004702:	2800      	cmp	r0, #0
 8004704:	d155      	bne.n	80047b2 <setvbuf+0x15e>
 8004706:	f8dd 9000 	ldr.w	r9, [sp]
 800470a:	45a9      	cmp	r9, r5
 800470c:	d14a      	bne.n	80047a4 <setvbuf+0x150>
 800470e:	f04f 35ff 	mov.w	r5, #4294967295
 8004712:	2200      	movs	r2, #0
 8004714:	60a2      	str	r2, [r4, #8]
 8004716:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800471a:	6022      	str	r2, [r4, #0]
 800471c:	6122      	str	r2, [r4, #16]
 800471e:	2201      	movs	r2, #1
 8004720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004724:	6162      	str	r2, [r4, #20]
 8004726:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004728:	f043 0302 	orr.w	r3, r3, #2
 800472c:	07d2      	lsls	r2, r2, #31
 800472e:	81a3      	strh	r3, [r4, #12]
 8004730:	d405      	bmi.n	800473e <setvbuf+0xea>
 8004732:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004736:	d102      	bne.n	800473e <setvbuf+0xea>
 8004738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800473a:	f000 faca 	bl	8004cd2 <__retarget_lock_release_recursive>
 800473e:	4628      	mov	r0, r5
 8004740:	b003      	add	sp, #12
 8004742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004746:	4b24      	ldr	r3, [pc, #144]	; (80047d8 <setvbuf+0x184>)
 8004748:	429c      	cmp	r4, r3
 800474a:	d101      	bne.n	8004750 <setvbuf+0xfc>
 800474c:	68bc      	ldr	r4, [r7, #8]
 800474e:	e793      	b.n	8004678 <setvbuf+0x24>
 8004750:	4b22      	ldr	r3, [pc, #136]	; (80047dc <setvbuf+0x188>)
 8004752:	429c      	cmp	r4, r3
 8004754:	bf08      	it	eq
 8004756:	68fc      	ldreq	r4, [r7, #12]
 8004758:	e78e      	b.n	8004678 <setvbuf+0x24>
 800475a:	2e00      	cmp	r6, #0
 800475c:	d0cd      	beq.n	80046fa <setvbuf+0xa6>
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	b913      	cbnz	r3, 8004768 <setvbuf+0x114>
 8004762:	4638      	mov	r0, r7
 8004764:	f000 fa16 	bl	8004b94 <__sinit>
 8004768:	f1b8 0f01 	cmp.w	r8, #1
 800476c:	bf08      	it	eq
 800476e:	89a3      	ldrheq	r3, [r4, #12]
 8004770:	6026      	str	r6, [r4, #0]
 8004772:	bf04      	itt	eq
 8004774:	f043 0301 	orreq.w	r3, r3, #1
 8004778:	81a3      	strheq	r3, [r4, #12]
 800477a:	89a2      	ldrh	r2, [r4, #12]
 800477c:	f012 0308 	ands.w	r3, r2, #8
 8004780:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004784:	d01c      	beq.n	80047c0 <setvbuf+0x16c>
 8004786:	07d3      	lsls	r3, r2, #31
 8004788:	bf41      	itttt	mi
 800478a:	2300      	movmi	r3, #0
 800478c:	426d      	negmi	r5, r5
 800478e:	60a3      	strmi	r3, [r4, #8]
 8004790:	61a5      	strmi	r5, [r4, #24]
 8004792:	bf58      	it	pl
 8004794:	60a5      	strpl	r5, [r4, #8]
 8004796:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004798:	f015 0501 	ands.w	r5, r5, #1
 800479c:	d115      	bne.n	80047ca <setvbuf+0x176>
 800479e:	f412 7f00 	tst.w	r2, #512	; 0x200
 80047a2:	e7c8      	b.n	8004736 <setvbuf+0xe2>
 80047a4:	4648      	mov	r0, r9
 80047a6:	f000 fafb 	bl	8004da0 <malloc>
 80047aa:	4606      	mov	r6, r0
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d0ae      	beq.n	800470e <setvbuf+0xba>
 80047b0:	464d      	mov	r5, r9
 80047b2:	89a3      	ldrh	r3, [r4, #12]
 80047b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b8:	81a3      	strh	r3, [r4, #12]
 80047ba:	e7d0      	b.n	800475e <setvbuf+0x10a>
 80047bc:	2500      	movs	r5, #0
 80047be:	e7a8      	b.n	8004712 <setvbuf+0xbe>
 80047c0:	60a3      	str	r3, [r4, #8]
 80047c2:	e7e8      	b.n	8004796 <setvbuf+0x142>
 80047c4:	f04f 35ff 	mov.w	r5, #4294967295
 80047c8:	e7b9      	b.n	800473e <setvbuf+0xea>
 80047ca:	2500      	movs	r5, #0
 80047cc:	e7b7      	b.n	800473e <setvbuf+0xea>
 80047ce:	bf00      	nop
 80047d0:	2000000c 	.word	0x2000000c
 80047d4:	08005754 	.word	0x08005754
 80047d8:	08005774 	.word	0x08005774
 80047dc:	08005734 	.word	0x08005734

080047e0 <__swbuf_r>:
 80047e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e2:	460e      	mov	r6, r1
 80047e4:	4614      	mov	r4, r2
 80047e6:	4605      	mov	r5, r0
 80047e8:	b118      	cbz	r0, 80047f2 <__swbuf_r+0x12>
 80047ea:	6983      	ldr	r3, [r0, #24]
 80047ec:	b90b      	cbnz	r3, 80047f2 <__swbuf_r+0x12>
 80047ee:	f000 f9d1 	bl	8004b94 <__sinit>
 80047f2:	4b21      	ldr	r3, [pc, #132]	; (8004878 <__swbuf_r+0x98>)
 80047f4:	429c      	cmp	r4, r3
 80047f6:	d12b      	bne.n	8004850 <__swbuf_r+0x70>
 80047f8:	686c      	ldr	r4, [r5, #4]
 80047fa:	69a3      	ldr	r3, [r4, #24]
 80047fc:	60a3      	str	r3, [r4, #8]
 80047fe:	89a3      	ldrh	r3, [r4, #12]
 8004800:	071a      	lsls	r2, r3, #28
 8004802:	d52f      	bpl.n	8004864 <__swbuf_r+0x84>
 8004804:	6923      	ldr	r3, [r4, #16]
 8004806:	b36b      	cbz	r3, 8004864 <__swbuf_r+0x84>
 8004808:	6923      	ldr	r3, [r4, #16]
 800480a:	6820      	ldr	r0, [r4, #0]
 800480c:	1ac0      	subs	r0, r0, r3
 800480e:	6963      	ldr	r3, [r4, #20]
 8004810:	b2f6      	uxtb	r6, r6
 8004812:	4283      	cmp	r3, r0
 8004814:	4637      	mov	r7, r6
 8004816:	dc04      	bgt.n	8004822 <__swbuf_r+0x42>
 8004818:	4621      	mov	r1, r4
 800481a:	4628      	mov	r0, r5
 800481c:	f000 f926 	bl	8004a6c <_fflush_r>
 8004820:	bb30      	cbnz	r0, 8004870 <__swbuf_r+0x90>
 8004822:	68a3      	ldr	r3, [r4, #8]
 8004824:	3b01      	subs	r3, #1
 8004826:	60a3      	str	r3, [r4, #8]
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	6022      	str	r2, [r4, #0]
 800482e:	701e      	strb	r6, [r3, #0]
 8004830:	6963      	ldr	r3, [r4, #20]
 8004832:	3001      	adds	r0, #1
 8004834:	4283      	cmp	r3, r0
 8004836:	d004      	beq.n	8004842 <__swbuf_r+0x62>
 8004838:	89a3      	ldrh	r3, [r4, #12]
 800483a:	07db      	lsls	r3, r3, #31
 800483c:	d506      	bpl.n	800484c <__swbuf_r+0x6c>
 800483e:	2e0a      	cmp	r6, #10
 8004840:	d104      	bne.n	800484c <__swbuf_r+0x6c>
 8004842:	4621      	mov	r1, r4
 8004844:	4628      	mov	r0, r5
 8004846:	f000 f911 	bl	8004a6c <_fflush_r>
 800484a:	b988      	cbnz	r0, 8004870 <__swbuf_r+0x90>
 800484c:	4638      	mov	r0, r7
 800484e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004850:	4b0a      	ldr	r3, [pc, #40]	; (800487c <__swbuf_r+0x9c>)
 8004852:	429c      	cmp	r4, r3
 8004854:	d101      	bne.n	800485a <__swbuf_r+0x7a>
 8004856:	68ac      	ldr	r4, [r5, #8]
 8004858:	e7cf      	b.n	80047fa <__swbuf_r+0x1a>
 800485a:	4b09      	ldr	r3, [pc, #36]	; (8004880 <__swbuf_r+0xa0>)
 800485c:	429c      	cmp	r4, r3
 800485e:	bf08      	it	eq
 8004860:	68ec      	ldreq	r4, [r5, #12]
 8004862:	e7ca      	b.n	80047fa <__swbuf_r+0x1a>
 8004864:	4621      	mov	r1, r4
 8004866:	4628      	mov	r0, r5
 8004868:	f000 f80c 	bl	8004884 <__swsetup_r>
 800486c:	2800      	cmp	r0, #0
 800486e:	d0cb      	beq.n	8004808 <__swbuf_r+0x28>
 8004870:	f04f 37ff 	mov.w	r7, #4294967295
 8004874:	e7ea      	b.n	800484c <__swbuf_r+0x6c>
 8004876:	bf00      	nop
 8004878:	08005754 	.word	0x08005754
 800487c:	08005774 	.word	0x08005774
 8004880:	08005734 	.word	0x08005734

08004884 <__swsetup_r>:
 8004884:	4b32      	ldr	r3, [pc, #200]	; (8004950 <__swsetup_r+0xcc>)
 8004886:	b570      	push	{r4, r5, r6, lr}
 8004888:	681d      	ldr	r5, [r3, #0]
 800488a:	4606      	mov	r6, r0
 800488c:	460c      	mov	r4, r1
 800488e:	b125      	cbz	r5, 800489a <__swsetup_r+0x16>
 8004890:	69ab      	ldr	r3, [r5, #24]
 8004892:	b913      	cbnz	r3, 800489a <__swsetup_r+0x16>
 8004894:	4628      	mov	r0, r5
 8004896:	f000 f97d 	bl	8004b94 <__sinit>
 800489a:	4b2e      	ldr	r3, [pc, #184]	; (8004954 <__swsetup_r+0xd0>)
 800489c:	429c      	cmp	r4, r3
 800489e:	d10f      	bne.n	80048c0 <__swsetup_r+0x3c>
 80048a0:	686c      	ldr	r4, [r5, #4]
 80048a2:	89a3      	ldrh	r3, [r4, #12]
 80048a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048a8:	0719      	lsls	r1, r3, #28
 80048aa:	d42c      	bmi.n	8004906 <__swsetup_r+0x82>
 80048ac:	06dd      	lsls	r5, r3, #27
 80048ae:	d411      	bmi.n	80048d4 <__swsetup_r+0x50>
 80048b0:	2309      	movs	r3, #9
 80048b2:	6033      	str	r3, [r6, #0]
 80048b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048b8:	81a3      	strh	r3, [r4, #12]
 80048ba:	f04f 30ff 	mov.w	r0, #4294967295
 80048be:	e03e      	b.n	800493e <__swsetup_r+0xba>
 80048c0:	4b25      	ldr	r3, [pc, #148]	; (8004958 <__swsetup_r+0xd4>)
 80048c2:	429c      	cmp	r4, r3
 80048c4:	d101      	bne.n	80048ca <__swsetup_r+0x46>
 80048c6:	68ac      	ldr	r4, [r5, #8]
 80048c8:	e7eb      	b.n	80048a2 <__swsetup_r+0x1e>
 80048ca:	4b24      	ldr	r3, [pc, #144]	; (800495c <__swsetup_r+0xd8>)
 80048cc:	429c      	cmp	r4, r3
 80048ce:	bf08      	it	eq
 80048d0:	68ec      	ldreq	r4, [r5, #12]
 80048d2:	e7e6      	b.n	80048a2 <__swsetup_r+0x1e>
 80048d4:	0758      	lsls	r0, r3, #29
 80048d6:	d512      	bpl.n	80048fe <__swsetup_r+0x7a>
 80048d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048da:	b141      	cbz	r1, 80048ee <__swsetup_r+0x6a>
 80048dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048e0:	4299      	cmp	r1, r3
 80048e2:	d002      	beq.n	80048ea <__swsetup_r+0x66>
 80048e4:	4630      	mov	r0, r6
 80048e6:	f000 fa63 	bl	8004db0 <_free_r>
 80048ea:	2300      	movs	r3, #0
 80048ec:	6363      	str	r3, [r4, #52]	; 0x34
 80048ee:	89a3      	ldrh	r3, [r4, #12]
 80048f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048f4:	81a3      	strh	r3, [r4, #12]
 80048f6:	2300      	movs	r3, #0
 80048f8:	6063      	str	r3, [r4, #4]
 80048fa:	6923      	ldr	r3, [r4, #16]
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	89a3      	ldrh	r3, [r4, #12]
 8004900:	f043 0308 	orr.w	r3, r3, #8
 8004904:	81a3      	strh	r3, [r4, #12]
 8004906:	6923      	ldr	r3, [r4, #16]
 8004908:	b94b      	cbnz	r3, 800491e <__swsetup_r+0x9a>
 800490a:	89a3      	ldrh	r3, [r4, #12]
 800490c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004914:	d003      	beq.n	800491e <__swsetup_r+0x9a>
 8004916:	4621      	mov	r1, r4
 8004918:	4630      	mov	r0, r6
 800491a:	f000 fa01 	bl	8004d20 <__smakebuf_r>
 800491e:	89a0      	ldrh	r0, [r4, #12]
 8004920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004924:	f010 0301 	ands.w	r3, r0, #1
 8004928:	d00a      	beq.n	8004940 <__swsetup_r+0xbc>
 800492a:	2300      	movs	r3, #0
 800492c:	60a3      	str	r3, [r4, #8]
 800492e:	6963      	ldr	r3, [r4, #20]
 8004930:	425b      	negs	r3, r3
 8004932:	61a3      	str	r3, [r4, #24]
 8004934:	6923      	ldr	r3, [r4, #16]
 8004936:	b943      	cbnz	r3, 800494a <__swsetup_r+0xc6>
 8004938:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800493c:	d1ba      	bne.n	80048b4 <__swsetup_r+0x30>
 800493e:	bd70      	pop	{r4, r5, r6, pc}
 8004940:	0781      	lsls	r1, r0, #30
 8004942:	bf58      	it	pl
 8004944:	6963      	ldrpl	r3, [r4, #20]
 8004946:	60a3      	str	r3, [r4, #8]
 8004948:	e7f4      	b.n	8004934 <__swsetup_r+0xb0>
 800494a:	2000      	movs	r0, #0
 800494c:	e7f7      	b.n	800493e <__swsetup_r+0xba>
 800494e:	bf00      	nop
 8004950:	2000000c 	.word	0x2000000c
 8004954:	08005754 	.word	0x08005754
 8004958:	08005774 	.word	0x08005774
 800495c:	08005734 	.word	0x08005734

08004960 <__sflush_r>:
 8004960:	898a      	ldrh	r2, [r1, #12]
 8004962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004966:	4605      	mov	r5, r0
 8004968:	0710      	lsls	r0, r2, #28
 800496a:	460c      	mov	r4, r1
 800496c:	d458      	bmi.n	8004a20 <__sflush_r+0xc0>
 800496e:	684b      	ldr	r3, [r1, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	dc05      	bgt.n	8004980 <__sflush_r+0x20>
 8004974:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	dc02      	bgt.n	8004980 <__sflush_r+0x20>
 800497a:	2000      	movs	r0, #0
 800497c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004980:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004982:	2e00      	cmp	r6, #0
 8004984:	d0f9      	beq.n	800497a <__sflush_r+0x1a>
 8004986:	2300      	movs	r3, #0
 8004988:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800498c:	682f      	ldr	r7, [r5, #0]
 800498e:	602b      	str	r3, [r5, #0]
 8004990:	d032      	beq.n	80049f8 <__sflush_r+0x98>
 8004992:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004994:	89a3      	ldrh	r3, [r4, #12]
 8004996:	075a      	lsls	r2, r3, #29
 8004998:	d505      	bpl.n	80049a6 <__sflush_r+0x46>
 800499a:	6863      	ldr	r3, [r4, #4]
 800499c:	1ac0      	subs	r0, r0, r3
 800499e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049a0:	b10b      	cbz	r3, 80049a6 <__sflush_r+0x46>
 80049a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049a4:	1ac0      	subs	r0, r0, r3
 80049a6:	2300      	movs	r3, #0
 80049a8:	4602      	mov	r2, r0
 80049aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049ac:	6a21      	ldr	r1, [r4, #32]
 80049ae:	4628      	mov	r0, r5
 80049b0:	47b0      	blx	r6
 80049b2:	1c43      	adds	r3, r0, #1
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	d106      	bne.n	80049c6 <__sflush_r+0x66>
 80049b8:	6829      	ldr	r1, [r5, #0]
 80049ba:	291d      	cmp	r1, #29
 80049bc:	d82c      	bhi.n	8004a18 <__sflush_r+0xb8>
 80049be:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <__sflush_r+0x108>)
 80049c0:	40ca      	lsrs	r2, r1
 80049c2:	07d6      	lsls	r6, r2, #31
 80049c4:	d528      	bpl.n	8004a18 <__sflush_r+0xb8>
 80049c6:	2200      	movs	r2, #0
 80049c8:	6062      	str	r2, [r4, #4]
 80049ca:	04d9      	lsls	r1, r3, #19
 80049cc:	6922      	ldr	r2, [r4, #16]
 80049ce:	6022      	str	r2, [r4, #0]
 80049d0:	d504      	bpl.n	80049dc <__sflush_r+0x7c>
 80049d2:	1c42      	adds	r2, r0, #1
 80049d4:	d101      	bne.n	80049da <__sflush_r+0x7a>
 80049d6:	682b      	ldr	r3, [r5, #0]
 80049d8:	b903      	cbnz	r3, 80049dc <__sflush_r+0x7c>
 80049da:	6560      	str	r0, [r4, #84]	; 0x54
 80049dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049de:	602f      	str	r7, [r5, #0]
 80049e0:	2900      	cmp	r1, #0
 80049e2:	d0ca      	beq.n	800497a <__sflush_r+0x1a>
 80049e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049e8:	4299      	cmp	r1, r3
 80049ea:	d002      	beq.n	80049f2 <__sflush_r+0x92>
 80049ec:	4628      	mov	r0, r5
 80049ee:	f000 f9df 	bl	8004db0 <_free_r>
 80049f2:	2000      	movs	r0, #0
 80049f4:	6360      	str	r0, [r4, #52]	; 0x34
 80049f6:	e7c1      	b.n	800497c <__sflush_r+0x1c>
 80049f8:	6a21      	ldr	r1, [r4, #32]
 80049fa:	2301      	movs	r3, #1
 80049fc:	4628      	mov	r0, r5
 80049fe:	47b0      	blx	r6
 8004a00:	1c41      	adds	r1, r0, #1
 8004a02:	d1c7      	bne.n	8004994 <__sflush_r+0x34>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0c4      	beq.n	8004994 <__sflush_r+0x34>
 8004a0a:	2b1d      	cmp	r3, #29
 8004a0c:	d001      	beq.n	8004a12 <__sflush_r+0xb2>
 8004a0e:	2b16      	cmp	r3, #22
 8004a10:	d101      	bne.n	8004a16 <__sflush_r+0xb6>
 8004a12:	602f      	str	r7, [r5, #0]
 8004a14:	e7b1      	b.n	800497a <__sflush_r+0x1a>
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a1c:	81a3      	strh	r3, [r4, #12]
 8004a1e:	e7ad      	b.n	800497c <__sflush_r+0x1c>
 8004a20:	690f      	ldr	r7, [r1, #16]
 8004a22:	2f00      	cmp	r7, #0
 8004a24:	d0a9      	beq.n	800497a <__sflush_r+0x1a>
 8004a26:	0793      	lsls	r3, r2, #30
 8004a28:	680e      	ldr	r6, [r1, #0]
 8004a2a:	bf08      	it	eq
 8004a2c:	694b      	ldreq	r3, [r1, #20]
 8004a2e:	600f      	str	r7, [r1, #0]
 8004a30:	bf18      	it	ne
 8004a32:	2300      	movne	r3, #0
 8004a34:	eba6 0807 	sub.w	r8, r6, r7
 8004a38:	608b      	str	r3, [r1, #8]
 8004a3a:	f1b8 0f00 	cmp.w	r8, #0
 8004a3e:	dd9c      	ble.n	800497a <__sflush_r+0x1a>
 8004a40:	6a21      	ldr	r1, [r4, #32]
 8004a42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a44:	4643      	mov	r3, r8
 8004a46:	463a      	mov	r2, r7
 8004a48:	4628      	mov	r0, r5
 8004a4a:	47b0      	blx	r6
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	dc06      	bgt.n	8004a5e <__sflush_r+0xfe>
 8004a50:	89a3      	ldrh	r3, [r4, #12]
 8004a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a56:	81a3      	strh	r3, [r4, #12]
 8004a58:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5c:	e78e      	b.n	800497c <__sflush_r+0x1c>
 8004a5e:	4407      	add	r7, r0
 8004a60:	eba8 0800 	sub.w	r8, r8, r0
 8004a64:	e7e9      	b.n	8004a3a <__sflush_r+0xda>
 8004a66:	bf00      	nop
 8004a68:	20400001 	.word	0x20400001

08004a6c <_fflush_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	690b      	ldr	r3, [r1, #16]
 8004a70:	4605      	mov	r5, r0
 8004a72:	460c      	mov	r4, r1
 8004a74:	b913      	cbnz	r3, 8004a7c <_fflush_r+0x10>
 8004a76:	2500      	movs	r5, #0
 8004a78:	4628      	mov	r0, r5
 8004a7a:	bd38      	pop	{r3, r4, r5, pc}
 8004a7c:	b118      	cbz	r0, 8004a86 <_fflush_r+0x1a>
 8004a7e:	6983      	ldr	r3, [r0, #24]
 8004a80:	b90b      	cbnz	r3, 8004a86 <_fflush_r+0x1a>
 8004a82:	f000 f887 	bl	8004b94 <__sinit>
 8004a86:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <_fflush_r+0x6c>)
 8004a88:	429c      	cmp	r4, r3
 8004a8a:	d11b      	bne.n	8004ac4 <_fflush_r+0x58>
 8004a8c:	686c      	ldr	r4, [r5, #4]
 8004a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0ef      	beq.n	8004a76 <_fflush_r+0xa>
 8004a96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a98:	07d0      	lsls	r0, r2, #31
 8004a9a:	d404      	bmi.n	8004aa6 <_fflush_r+0x3a>
 8004a9c:	0599      	lsls	r1, r3, #22
 8004a9e:	d402      	bmi.n	8004aa6 <_fflush_r+0x3a>
 8004aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aa2:	f000 f915 	bl	8004cd0 <__retarget_lock_acquire_recursive>
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	f7ff ff59 	bl	8004960 <__sflush_r>
 8004aae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ab0:	07da      	lsls	r2, r3, #31
 8004ab2:	4605      	mov	r5, r0
 8004ab4:	d4e0      	bmi.n	8004a78 <_fflush_r+0xc>
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	059b      	lsls	r3, r3, #22
 8004aba:	d4dd      	bmi.n	8004a78 <_fflush_r+0xc>
 8004abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004abe:	f000 f908 	bl	8004cd2 <__retarget_lock_release_recursive>
 8004ac2:	e7d9      	b.n	8004a78 <_fflush_r+0xc>
 8004ac4:	4b05      	ldr	r3, [pc, #20]	; (8004adc <_fflush_r+0x70>)
 8004ac6:	429c      	cmp	r4, r3
 8004ac8:	d101      	bne.n	8004ace <_fflush_r+0x62>
 8004aca:	68ac      	ldr	r4, [r5, #8]
 8004acc:	e7df      	b.n	8004a8e <_fflush_r+0x22>
 8004ace:	4b04      	ldr	r3, [pc, #16]	; (8004ae0 <_fflush_r+0x74>)
 8004ad0:	429c      	cmp	r4, r3
 8004ad2:	bf08      	it	eq
 8004ad4:	68ec      	ldreq	r4, [r5, #12]
 8004ad6:	e7da      	b.n	8004a8e <_fflush_r+0x22>
 8004ad8:	08005754 	.word	0x08005754
 8004adc:	08005774 	.word	0x08005774
 8004ae0:	08005734 	.word	0x08005734

08004ae4 <std>:
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	b510      	push	{r4, lr}
 8004ae8:	4604      	mov	r4, r0
 8004aea:	e9c0 3300 	strd	r3, r3, [r0]
 8004aee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004af2:	6083      	str	r3, [r0, #8]
 8004af4:	8181      	strh	r1, [r0, #12]
 8004af6:	6643      	str	r3, [r0, #100]	; 0x64
 8004af8:	81c2      	strh	r2, [r0, #14]
 8004afa:	6183      	str	r3, [r0, #24]
 8004afc:	4619      	mov	r1, r3
 8004afe:	2208      	movs	r2, #8
 8004b00:	305c      	adds	r0, #92	; 0x5c
 8004b02:	f7ff fd11 	bl	8004528 <memset>
 8004b06:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <std+0x38>)
 8004b08:	6263      	str	r3, [r4, #36]	; 0x24
 8004b0a:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <std+0x3c>)
 8004b0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b0e:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <std+0x40>)
 8004b10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b12:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <std+0x44>)
 8004b14:	6224      	str	r4, [r4, #32]
 8004b16:	6323      	str	r3, [r4, #48]	; 0x30
 8004b18:	bd10      	pop	{r4, pc}
 8004b1a:	bf00      	nop
 8004b1c:	0800556d 	.word	0x0800556d
 8004b20:	0800558f 	.word	0x0800558f
 8004b24:	080055c7 	.word	0x080055c7
 8004b28:	080055eb 	.word	0x080055eb

08004b2c <_cleanup_r>:
 8004b2c:	4901      	ldr	r1, [pc, #4]	; (8004b34 <_cleanup_r+0x8>)
 8004b2e:	f000 b8af 	b.w	8004c90 <_fwalk_reent>
 8004b32:	bf00      	nop
 8004b34:	08004a6d 	.word	0x08004a6d

08004b38 <__sfmoreglue>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	2268      	movs	r2, #104	; 0x68
 8004b3c:	1e4d      	subs	r5, r1, #1
 8004b3e:	4355      	muls	r5, r2
 8004b40:	460e      	mov	r6, r1
 8004b42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b46:	f000 f99f 	bl	8004e88 <_malloc_r>
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	b140      	cbz	r0, 8004b60 <__sfmoreglue+0x28>
 8004b4e:	2100      	movs	r1, #0
 8004b50:	e9c0 1600 	strd	r1, r6, [r0]
 8004b54:	300c      	adds	r0, #12
 8004b56:	60a0      	str	r0, [r4, #8]
 8004b58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b5c:	f7ff fce4 	bl	8004528 <memset>
 8004b60:	4620      	mov	r0, r4
 8004b62:	bd70      	pop	{r4, r5, r6, pc}

08004b64 <__sfp_lock_acquire>:
 8004b64:	4801      	ldr	r0, [pc, #4]	; (8004b6c <__sfp_lock_acquire+0x8>)
 8004b66:	f000 b8b3 	b.w	8004cd0 <__retarget_lock_acquire_recursive>
 8004b6a:	bf00      	nop
 8004b6c:	20000179 	.word	0x20000179

08004b70 <__sfp_lock_release>:
 8004b70:	4801      	ldr	r0, [pc, #4]	; (8004b78 <__sfp_lock_release+0x8>)
 8004b72:	f000 b8ae 	b.w	8004cd2 <__retarget_lock_release_recursive>
 8004b76:	bf00      	nop
 8004b78:	20000179 	.word	0x20000179

08004b7c <__sinit_lock_acquire>:
 8004b7c:	4801      	ldr	r0, [pc, #4]	; (8004b84 <__sinit_lock_acquire+0x8>)
 8004b7e:	f000 b8a7 	b.w	8004cd0 <__retarget_lock_acquire_recursive>
 8004b82:	bf00      	nop
 8004b84:	2000017a 	.word	0x2000017a

08004b88 <__sinit_lock_release>:
 8004b88:	4801      	ldr	r0, [pc, #4]	; (8004b90 <__sinit_lock_release+0x8>)
 8004b8a:	f000 b8a2 	b.w	8004cd2 <__retarget_lock_release_recursive>
 8004b8e:	bf00      	nop
 8004b90:	2000017a 	.word	0x2000017a

08004b94 <__sinit>:
 8004b94:	b510      	push	{r4, lr}
 8004b96:	4604      	mov	r4, r0
 8004b98:	f7ff fff0 	bl	8004b7c <__sinit_lock_acquire>
 8004b9c:	69a3      	ldr	r3, [r4, #24]
 8004b9e:	b11b      	cbz	r3, 8004ba8 <__sinit+0x14>
 8004ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ba4:	f7ff bff0 	b.w	8004b88 <__sinit_lock_release>
 8004ba8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004bac:	6523      	str	r3, [r4, #80]	; 0x50
 8004bae:	4b13      	ldr	r3, [pc, #76]	; (8004bfc <__sinit+0x68>)
 8004bb0:	4a13      	ldr	r2, [pc, #76]	; (8004c00 <__sinit+0x6c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004bb6:	42a3      	cmp	r3, r4
 8004bb8:	bf04      	itt	eq
 8004bba:	2301      	moveq	r3, #1
 8004bbc:	61a3      	streq	r3, [r4, #24]
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f000 f820 	bl	8004c04 <__sfp>
 8004bc4:	6060      	str	r0, [r4, #4]
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f000 f81c 	bl	8004c04 <__sfp>
 8004bcc:	60a0      	str	r0, [r4, #8]
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f000 f818 	bl	8004c04 <__sfp>
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	60e0      	str	r0, [r4, #12]
 8004bd8:	2104      	movs	r1, #4
 8004bda:	6860      	ldr	r0, [r4, #4]
 8004bdc:	f7ff ff82 	bl	8004ae4 <std>
 8004be0:	68a0      	ldr	r0, [r4, #8]
 8004be2:	2201      	movs	r2, #1
 8004be4:	2109      	movs	r1, #9
 8004be6:	f7ff ff7d 	bl	8004ae4 <std>
 8004bea:	68e0      	ldr	r0, [r4, #12]
 8004bec:	2202      	movs	r2, #2
 8004bee:	2112      	movs	r1, #18
 8004bf0:	f7ff ff78 	bl	8004ae4 <std>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	61a3      	str	r3, [r4, #24]
 8004bf8:	e7d2      	b.n	8004ba0 <__sinit+0xc>
 8004bfa:	bf00      	nop
 8004bfc:	08005730 	.word	0x08005730
 8004c00:	08004b2d 	.word	0x08004b2d

08004c04 <__sfp>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	4607      	mov	r7, r0
 8004c08:	f7ff ffac 	bl	8004b64 <__sfp_lock_acquire>
 8004c0c:	4b1e      	ldr	r3, [pc, #120]	; (8004c88 <__sfp+0x84>)
 8004c0e:	681e      	ldr	r6, [r3, #0]
 8004c10:	69b3      	ldr	r3, [r6, #24]
 8004c12:	b913      	cbnz	r3, 8004c1a <__sfp+0x16>
 8004c14:	4630      	mov	r0, r6
 8004c16:	f7ff ffbd 	bl	8004b94 <__sinit>
 8004c1a:	3648      	adds	r6, #72	; 0x48
 8004c1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	d503      	bpl.n	8004c2c <__sfp+0x28>
 8004c24:	6833      	ldr	r3, [r6, #0]
 8004c26:	b30b      	cbz	r3, 8004c6c <__sfp+0x68>
 8004c28:	6836      	ldr	r6, [r6, #0]
 8004c2a:	e7f7      	b.n	8004c1c <__sfp+0x18>
 8004c2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c30:	b9d5      	cbnz	r5, 8004c68 <__sfp+0x64>
 8004c32:	4b16      	ldr	r3, [pc, #88]	; (8004c8c <__sfp+0x88>)
 8004c34:	60e3      	str	r3, [r4, #12]
 8004c36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c3a:	6665      	str	r5, [r4, #100]	; 0x64
 8004c3c:	f000 f847 	bl	8004cce <__retarget_lock_init_recursive>
 8004c40:	f7ff ff96 	bl	8004b70 <__sfp_lock_release>
 8004c44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c4c:	6025      	str	r5, [r4, #0]
 8004c4e:	61a5      	str	r5, [r4, #24]
 8004c50:	2208      	movs	r2, #8
 8004c52:	4629      	mov	r1, r5
 8004c54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c58:	f7ff fc66 	bl	8004528 <memset>
 8004c5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c64:	4620      	mov	r0, r4
 8004c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c68:	3468      	adds	r4, #104	; 0x68
 8004c6a:	e7d9      	b.n	8004c20 <__sfp+0x1c>
 8004c6c:	2104      	movs	r1, #4
 8004c6e:	4638      	mov	r0, r7
 8004c70:	f7ff ff62 	bl	8004b38 <__sfmoreglue>
 8004c74:	4604      	mov	r4, r0
 8004c76:	6030      	str	r0, [r6, #0]
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	d1d5      	bne.n	8004c28 <__sfp+0x24>
 8004c7c:	f7ff ff78 	bl	8004b70 <__sfp_lock_release>
 8004c80:	230c      	movs	r3, #12
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	e7ee      	b.n	8004c64 <__sfp+0x60>
 8004c86:	bf00      	nop
 8004c88:	08005730 	.word	0x08005730
 8004c8c:	ffff0001 	.word	0xffff0001

08004c90 <_fwalk_reent>:
 8004c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c94:	4606      	mov	r6, r0
 8004c96:	4688      	mov	r8, r1
 8004c98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c9c:	2700      	movs	r7, #0
 8004c9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ca2:	f1b9 0901 	subs.w	r9, r9, #1
 8004ca6:	d505      	bpl.n	8004cb4 <_fwalk_reent+0x24>
 8004ca8:	6824      	ldr	r4, [r4, #0]
 8004caa:	2c00      	cmp	r4, #0
 8004cac:	d1f7      	bne.n	8004c9e <_fwalk_reent+0xe>
 8004cae:	4638      	mov	r0, r7
 8004cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cb4:	89ab      	ldrh	r3, [r5, #12]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d907      	bls.n	8004cca <_fwalk_reent+0x3a>
 8004cba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	d003      	beq.n	8004cca <_fwalk_reent+0x3a>
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	4630      	mov	r0, r6
 8004cc6:	47c0      	blx	r8
 8004cc8:	4307      	orrs	r7, r0
 8004cca:	3568      	adds	r5, #104	; 0x68
 8004ccc:	e7e9      	b.n	8004ca2 <_fwalk_reent+0x12>

08004cce <__retarget_lock_init_recursive>:
 8004cce:	4770      	bx	lr

08004cd0 <__retarget_lock_acquire_recursive>:
 8004cd0:	4770      	bx	lr

08004cd2 <__retarget_lock_release_recursive>:
 8004cd2:	4770      	bx	lr

08004cd4 <__swhatbuf_r>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	460e      	mov	r6, r1
 8004cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cdc:	2900      	cmp	r1, #0
 8004cde:	b096      	sub	sp, #88	; 0x58
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	461d      	mov	r5, r3
 8004ce4:	da08      	bge.n	8004cf8 <__swhatbuf_r+0x24>
 8004ce6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	602a      	str	r2, [r5, #0]
 8004cee:	061a      	lsls	r2, r3, #24
 8004cf0:	d410      	bmi.n	8004d14 <__swhatbuf_r+0x40>
 8004cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cf6:	e00e      	b.n	8004d16 <__swhatbuf_r+0x42>
 8004cf8:	466a      	mov	r2, sp
 8004cfa:	f000 fc9d 	bl	8005638 <_fstat_r>
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	dbf1      	blt.n	8004ce6 <__swhatbuf_r+0x12>
 8004d02:	9a01      	ldr	r2, [sp, #4]
 8004d04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d0c:	425a      	negs	r2, r3
 8004d0e:	415a      	adcs	r2, r3
 8004d10:	602a      	str	r2, [r5, #0]
 8004d12:	e7ee      	b.n	8004cf2 <__swhatbuf_r+0x1e>
 8004d14:	2340      	movs	r3, #64	; 0x40
 8004d16:	2000      	movs	r0, #0
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	b016      	add	sp, #88	; 0x58
 8004d1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d20 <__smakebuf_r>:
 8004d20:	898b      	ldrh	r3, [r1, #12]
 8004d22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d24:	079d      	lsls	r5, r3, #30
 8004d26:	4606      	mov	r6, r0
 8004d28:	460c      	mov	r4, r1
 8004d2a:	d507      	bpl.n	8004d3c <__smakebuf_r+0x1c>
 8004d2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	6123      	str	r3, [r4, #16]
 8004d34:	2301      	movs	r3, #1
 8004d36:	6163      	str	r3, [r4, #20]
 8004d38:	b002      	add	sp, #8
 8004d3a:	bd70      	pop	{r4, r5, r6, pc}
 8004d3c:	ab01      	add	r3, sp, #4
 8004d3e:	466a      	mov	r2, sp
 8004d40:	f7ff ffc8 	bl	8004cd4 <__swhatbuf_r>
 8004d44:	9900      	ldr	r1, [sp, #0]
 8004d46:	4605      	mov	r5, r0
 8004d48:	4630      	mov	r0, r6
 8004d4a:	f000 f89d 	bl	8004e88 <_malloc_r>
 8004d4e:	b948      	cbnz	r0, 8004d64 <__smakebuf_r+0x44>
 8004d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d54:	059a      	lsls	r2, r3, #22
 8004d56:	d4ef      	bmi.n	8004d38 <__smakebuf_r+0x18>
 8004d58:	f023 0303 	bic.w	r3, r3, #3
 8004d5c:	f043 0302 	orr.w	r3, r3, #2
 8004d60:	81a3      	strh	r3, [r4, #12]
 8004d62:	e7e3      	b.n	8004d2c <__smakebuf_r+0xc>
 8004d64:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <__smakebuf_r+0x7c>)
 8004d66:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d68:	89a3      	ldrh	r3, [r4, #12]
 8004d6a:	6020      	str	r0, [r4, #0]
 8004d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d70:	81a3      	strh	r3, [r4, #12]
 8004d72:	9b00      	ldr	r3, [sp, #0]
 8004d74:	6163      	str	r3, [r4, #20]
 8004d76:	9b01      	ldr	r3, [sp, #4]
 8004d78:	6120      	str	r0, [r4, #16]
 8004d7a:	b15b      	cbz	r3, 8004d94 <__smakebuf_r+0x74>
 8004d7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d80:	4630      	mov	r0, r6
 8004d82:	f000 fc6b 	bl	800565c <_isatty_r>
 8004d86:	b128      	cbz	r0, 8004d94 <__smakebuf_r+0x74>
 8004d88:	89a3      	ldrh	r3, [r4, #12]
 8004d8a:	f023 0303 	bic.w	r3, r3, #3
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	81a3      	strh	r3, [r4, #12]
 8004d94:	89a0      	ldrh	r0, [r4, #12]
 8004d96:	4305      	orrs	r5, r0
 8004d98:	81a5      	strh	r5, [r4, #12]
 8004d9a:	e7cd      	b.n	8004d38 <__smakebuf_r+0x18>
 8004d9c:	08004b2d 	.word	0x08004b2d

08004da0 <malloc>:
 8004da0:	4b02      	ldr	r3, [pc, #8]	; (8004dac <malloc+0xc>)
 8004da2:	4601      	mov	r1, r0
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	f000 b86f 	b.w	8004e88 <_malloc_r>
 8004daa:	bf00      	nop
 8004dac:	2000000c 	.word	0x2000000c

08004db0 <_free_r>:
 8004db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004db2:	2900      	cmp	r1, #0
 8004db4:	d044      	beq.n	8004e40 <_free_r+0x90>
 8004db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dba:	9001      	str	r0, [sp, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f1a1 0404 	sub.w	r4, r1, #4
 8004dc2:	bfb8      	it	lt
 8004dc4:	18e4      	addlt	r4, r4, r3
 8004dc6:	f000 fc6b 	bl	80056a0 <__malloc_lock>
 8004dca:	4a1e      	ldr	r2, [pc, #120]	; (8004e44 <_free_r+0x94>)
 8004dcc:	9801      	ldr	r0, [sp, #4]
 8004dce:	6813      	ldr	r3, [r2, #0]
 8004dd0:	b933      	cbnz	r3, 8004de0 <_free_r+0x30>
 8004dd2:	6063      	str	r3, [r4, #4]
 8004dd4:	6014      	str	r4, [r2, #0]
 8004dd6:	b003      	add	sp, #12
 8004dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ddc:	f000 bc66 	b.w	80056ac <__malloc_unlock>
 8004de0:	42a3      	cmp	r3, r4
 8004de2:	d908      	bls.n	8004df6 <_free_r+0x46>
 8004de4:	6825      	ldr	r5, [r4, #0]
 8004de6:	1961      	adds	r1, r4, r5
 8004de8:	428b      	cmp	r3, r1
 8004dea:	bf01      	itttt	eq
 8004dec:	6819      	ldreq	r1, [r3, #0]
 8004dee:	685b      	ldreq	r3, [r3, #4]
 8004df0:	1949      	addeq	r1, r1, r5
 8004df2:	6021      	streq	r1, [r4, #0]
 8004df4:	e7ed      	b.n	8004dd2 <_free_r+0x22>
 8004df6:	461a      	mov	r2, r3
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	b10b      	cbz	r3, 8004e00 <_free_r+0x50>
 8004dfc:	42a3      	cmp	r3, r4
 8004dfe:	d9fa      	bls.n	8004df6 <_free_r+0x46>
 8004e00:	6811      	ldr	r1, [r2, #0]
 8004e02:	1855      	adds	r5, r2, r1
 8004e04:	42a5      	cmp	r5, r4
 8004e06:	d10b      	bne.n	8004e20 <_free_r+0x70>
 8004e08:	6824      	ldr	r4, [r4, #0]
 8004e0a:	4421      	add	r1, r4
 8004e0c:	1854      	adds	r4, r2, r1
 8004e0e:	42a3      	cmp	r3, r4
 8004e10:	6011      	str	r1, [r2, #0]
 8004e12:	d1e0      	bne.n	8004dd6 <_free_r+0x26>
 8004e14:	681c      	ldr	r4, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	6053      	str	r3, [r2, #4]
 8004e1a:	4421      	add	r1, r4
 8004e1c:	6011      	str	r1, [r2, #0]
 8004e1e:	e7da      	b.n	8004dd6 <_free_r+0x26>
 8004e20:	d902      	bls.n	8004e28 <_free_r+0x78>
 8004e22:	230c      	movs	r3, #12
 8004e24:	6003      	str	r3, [r0, #0]
 8004e26:	e7d6      	b.n	8004dd6 <_free_r+0x26>
 8004e28:	6825      	ldr	r5, [r4, #0]
 8004e2a:	1961      	adds	r1, r4, r5
 8004e2c:	428b      	cmp	r3, r1
 8004e2e:	bf04      	itt	eq
 8004e30:	6819      	ldreq	r1, [r3, #0]
 8004e32:	685b      	ldreq	r3, [r3, #4]
 8004e34:	6063      	str	r3, [r4, #4]
 8004e36:	bf04      	itt	eq
 8004e38:	1949      	addeq	r1, r1, r5
 8004e3a:	6021      	streq	r1, [r4, #0]
 8004e3c:	6054      	str	r4, [r2, #4]
 8004e3e:	e7ca      	b.n	8004dd6 <_free_r+0x26>
 8004e40:	b003      	add	sp, #12
 8004e42:	bd30      	pop	{r4, r5, pc}
 8004e44:	2000017c 	.word	0x2000017c

08004e48 <sbrk_aligned>:
 8004e48:	b570      	push	{r4, r5, r6, lr}
 8004e4a:	4e0e      	ldr	r6, [pc, #56]	; (8004e84 <sbrk_aligned+0x3c>)
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	6831      	ldr	r1, [r6, #0]
 8004e50:	4605      	mov	r5, r0
 8004e52:	b911      	cbnz	r1, 8004e5a <sbrk_aligned+0x12>
 8004e54:	f000 fb7a 	bl	800554c <_sbrk_r>
 8004e58:	6030      	str	r0, [r6, #0]
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	f000 fb75 	bl	800554c <_sbrk_r>
 8004e62:	1c43      	adds	r3, r0, #1
 8004e64:	d00a      	beq.n	8004e7c <sbrk_aligned+0x34>
 8004e66:	1cc4      	adds	r4, r0, #3
 8004e68:	f024 0403 	bic.w	r4, r4, #3
 8004e6c:	42a0      	cmp	r0, r4
 8004e6e:	d007      	beq.n	8004e80 <sbrk_aligned+0x38>
 8004e70:	1a21      	subs	r1, r4, r0
 8004e72:	4628      	mov	r0, r5
 8004e74:	f000 fb6a 	bl	800554c <_sbrk_r>
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d101      	bne.n	8004e80 <sbrk_aligned+0x38>
 8004e7c:	f04f 34ff 	mov.w	r4, #4294967295
 8004e80:	4620      	mov	r0, r4
 8004e82:	bd70      	pop	{r4, r5, r6, pc}
 8004e84:	20000180 	.word	0x20000180

08004e88 <_malloc_r>:
 8004e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e8c:	1ccd      	adds	r5, r1, #3
 8004e8e:	f025 0503 	bic.w	r5, r5, #3
 8004e92:	3508      	adds	r5, #8
 8004e94:	2d0c      	cmp	r5, #12
 8004e96:	bf38      	it	cc
 8004e98:	250c      	movcc	r5, #12
 8004e9a:	2d00      	cmp	r5, #0
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	db01      	blt.n	8004ea4 <_malloc_r+0x1c>
 8004ea0:	42a9      	cmp	r1, r5
 8004ea2:	d905      	bls.n	8004eb0 <_malloc_r+0x28>
 8004ea4:	230c      	movs	r3, #12
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	2600      	movs	r6, #0
 8004eaa:	4630      	mov	r0, r6
 8004eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eb0:	4e2e      	ldr	r6, [pc, #184]	; (8004f6c <_malloc_r+0xe4>)
 8004eb2:	f000 fbf5 	bl	80056a0 <__malloc_lock>
 8004eb6:	6833      	ldr	r3, [r6, #0]
 8004eb8:	461c      	mov	r4, r3
 8004eba:	bb34      	cbnz	r4, 8004f0a <_malloc_r+0x82>
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	f7ff ffc2 	bl	8004e48 <sbrk_aligned>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	d14d      	bne.n	8004f66 <_malloc_r+0xde>
 8004eca:	6834      	ldr	r4, [r6, #0]
 8004ecc:	4626      	mov	r6, r4
 8004ece:	2e00      	cmp	r6, #0
 8004ed0:	d140      	bne.n	8004f54 <_malloc_r+0xcc>
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	4631      	mov	r1, r6
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	eb04 0803 	add.w	r8, r4, r3
 8004edc:	f000 fb36 	bl	800554c <_sbrk_r>
 8004ee0:	4580      	cmp	r8, r0
 8004ee2:	d13a      	bne.n	8004f5a <_malloc_r+0xd2>
 8004ee4:	6821      	ldr	r1, [r4, #0]
 8004ee6:	3503      	adds	r5, #3
 8004ee8:	1a6d      	subs	r5, r5, r1
 8004eea:	f025 0503 	bic.w	r5, r5, #3
 8004eee:	3508      	adds	r5, #8
 8004ef0:	2d0c      	cmp	r5, #12
 8004ef2:	bf38      	it	cc
 8004ef4:	250c      	movcc	r5, #12
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	4638      	mov	r0, r7
 8004efa:	f7ff ffa5 	bl	8004e48 <sbrk_aligned>
 8004efe:	3001      	adds	r0, #1
 8004f00:	d02b      	beq.n	8004f5a <_malloc_r+0xd2>
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	442b      	add	r3, r5
 8004f06:	6023      	str	r3, [r4, #0]
 8004f08:	e00e      	b.n	8004f28 <_malloc_r+0xa0>
 8004f0a:	6822      	ldr	r2, [r4, #0]
 8004f0c:	1b52      	subs	r2, r2, r5
 8004f0e:	d41e      	bmi.n	8004f4e <_malloc_r+0xc6>
 8004f10:	2a0b      	cmp	r2, #11
 8004f12:	d916      	bls.n	8004f42 <_malloc_r+0xba>
 8004f14:	1961      	adds	r1, r4, r5
 8004f16:	42a3      	cmp	r3, r4
 8004f18:	6025      	str	r5, [r4, #0]
 8004f1a:	bf18      	it	ne
 8004f1c:	6059      	strne	r1, [r3, #4]
 8004f1e:	6863      	ldr	r3, [r4, #4]
 8004f20:	bf08      	it	eq
 8004f22:	6031      	streq	r1, [r6, #0]
 8004f24:	5162      	str	r2, [r4, r5]
 8004f26:	604b      	str	r3, [r1, #4]
 8004f28:	4638      	mov	r0, r7
 8004f2a:	f104 060b 	add.w	r6, r4, #11
 8004f2e:	f000 fbbd 	bl	80056ac <__malloc_unlock>
 8004f32:	f026 0607 	bic.w	r6, r6, #7
 8004f36:	1d23      	adds	r3, r4, #4
 8004f38:	1af2      	subs	r2, r6, r3
 8004f3a:	d0b6      	beq.n	8004eaa <_malloc_r+0x22>
 8004f3c:	1b9b      	subs	r3, r3, r6
 8004f3e:	50a3      	str	r3, [r4, r2]
 8004f40:	e7b3      	b.n	8004eaa <_malloc_r+0x22>
 8004f42:	6862      	ldr	r2, [r4, #4]
 8004f44:	42a3      	cmp	r3, r4
 8004f46:	bf0c      	ite	eq
 8004f48:	6032      	streq	r2, [r6, #0]
 8004f4a:	605a      	strne	r2, [r3, #4]
 8004f4c:	e7ec      	b.n	8004f28 <_malloc_r+0xa0>
 8004f4e:	4623      	mov	r3, r4
 8004f50:	6864      	ldr	r4, [r4, #4]
 8004f52:	e7b2      	b.n	8004eba <_malloc_r+0x32>
 8004f54:	4634      	mov	r4, r6
 8004f56:	6876      	ldr	r6, [r6, #4]
 8004f58:	e7b9      	b.n	8004ece <_malloc_r+0x46>
 8004f5a:	230c      	movs	r3, #12
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	4638      	mov	r0, r7
 8004f60:	f000 fba4 	bl	80056ac <__malloc_unlock>
 8004f64:	e7a1      	b.n	8004eaa <_malloc_r+0x22>
 8004f66:	6025      	str	r5, [r4, #0]
 8004f68:	e7de      	b.n	8004f28 <_malloc_r+0xa0>
 8004f6a:	bf00      	nop
 8004f6c:	2000017c 	.word	0x2000017c

08004f70 <__sfputc_r>:
 8004f70:	6893      	ldr	r3, [r2, #8]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	b410      	push	{r4}
 8004f78:	6093      	str	r3, [r2, #8]
 8004f7a:	da08      	bge.n	8004f8e <__sfputc_r+0x1e>
 8004f7c:	6994      	ldr	r4, [r2, #24]
 8004f7e:	42a3      	cmp	r3, r4
 8004f80:	db01      	blt.n	8004f86 <__sfputc_r+0x16>
 8004f82:	290a      	cmp	r1, #10
 8004f84:	d103      	bne.n	8004f8e <__sfputc_r+0x1e>
 8004f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f8a:	f7ff bc29 	b.w	80047e0 <__swbuf_r>
 8004f8e:	6813      	ldr	r3, [r2, #0]
 8004f90:	1c58      	adds	r0, r3, #1
 8004f92:	6010      	str	r0, [r2, #0]
 8004f94:	7019      	strb	r1, [r3, #0]
 8004f96:	4608      	mov	r0, r1
 8004f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <__sfputs_r>:
 8004f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa0:	4606      	mov	r6, r0
 8004fa2:	460f      	mov	r7, r1
 8004fa4:	4614      	mov	r4, r2
 8004fa6:	18d5      	adds	r5, r2, r3
 8004fa8:	42ac      	cmp	r4, r5
 8004faa:	d101      	bne.n	8004fb0 <__sfputs_r+0x12>
 8004fac:	2000      	movs	r0, #0
 8004fae:	e007      	b.n	8004fc0 <__sfputs_r+0x22>
 8004fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb4:	463a      	mov	r2, r7
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f7ff ffda 	bl	8004f70 <__sfputc_r>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	d1f3      	bne.n	8004fa8 <__sfputs_r+0xa>
 8004fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fc4 <_vfiprintf_r>:
 8004fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc8:	460d      	mov	r5, r1
 8004fca:	b09d      	sub	sp, #116	; 0x74
 8004fcc:	4614      	mov	r4, r2
 8004fce:	4698      	mov	r8, r3
 8004fd0:	4606      	mov	r6, r0
 8004fd2:	b118      	cbz	r0, 8004fdc <_vfiprintf_r+0x18>
 8004fd4:	6983      	ldr	r3, [r0, #24]
 8004fd6:	b90b      	cbnz	r3, 8004fdc <_vfiprintf_r+0x18>
 8004fd8:	f7ff fddc 	bl	8004b94 <__sinit>
 8004fdc:	4b89      	ldr	r3, [pc, #548]	; (8005204 <_vfiprintf_r+0x240>)
 8004fde:	429d      	cmp	r5, r3
 8004fe0:	d11b      	bne.n	800501a <_vfiprintf_r+0x56>
 8004fe2:	6875      	ldr	r5, [r6, #4]
 8004fe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fe6:	07d9      	lsls	r1, r3, #31
 8004fe8:	d405      	bmi.n	8004ff6 <_vfiprintf_r+0x32>
 8004fea:	89ab      	ldrh	r3, [r5, #12]
 8004fec:	059a      	lsls	r2, r3, #22
 8004fee:	d402      	bmi.n	8004ff6 <_vfiprintf_r+0x32>
 8004ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ff2:	f7ff fe6d 	bl	8004cd0 <__retarget_lock_acquire_recursive>
 8004ff6:	89ab      	ldrh	r3, [r5, #12]
 8004ff8:	071b      	lsls	r3, r3, #28
 8004ffa:	d501      	bpl.n	8005000 <_vfiprintf_r+0x3c>
 8004ffc:	692b      	ldr	r3, [r5, #16]
 8004ffe:	b9eb      	cbnz	r3, 800503c <_vfiprintf_r+0x78>
 8005000:	4629      	mov	r1, r5
 8005002:	4630      	mov	r0, r6
 8005004:	f7ff fc3e 	bl	8004884 <__swsetup_r>
 8005008:	b1c0      	cbz	r0, 800503c <_vfiprintf_r+0x78>
 800500a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800500c:	07dc      	lsls	r4, r3, #31
 800500e:	d50e      	bpl.n	800502e <_vfiprintf_r+0x6a>
 8005010:	f04f 30ff 	mov.w	r0, #4294967295
 8005014:	b01d      	add	sp, #116	; 0x74
 8005016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800501a:	4b7b      	ldr	r3, [pc, #492]	; (8005208 <_vfiprintf_r+0x244>)
 800501c:	429d      	cmp	r5, r3
 800501e:	d101      	bne.n	8005024 <_vfiprintf_r+0x60>
 8005020:	68b5      	ldr	r5, [r6, #8]
 8005022:	e7df      	b.n	8004fe4 <_vfiprintf_r+0x20>
 8005024:	4b79      	ldr	r3, [pc, #484]	; (800520c <_vfiprintf_r+0x248>)
 8005026:	429d      	cmp	r5, r3
 8005028:	bf08      	it	eq
 800502a:	68f5      	ldreq	r5, [r6, #12]
 800502c:	e7da      	b.n	8004fe4 <_vfiprintf_r+0x20>
 800502e:	89ab      	ldrh	r3, [r5, #12]
 8005030:	0598      	lsls	r0, r3, #22
 8005032:	d4ed      	bmi.n	8005010 <_vfiprintf_r+0x4c>
 8005034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005036:	f7ff fe4c 	bl	8004cd2 <__retarget_lock_release_recursive>
 800503a:	e7e9      	b.n	8005010 <_vfiprintf_r+0x4c>
 800503c:	2300      	movs	r3, #0
 800503e:	9309      	str	r3, [sp, #36]	; 0x24
 8005040:	2320      	movs	r3, #32
 8005042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005046:	f8cd 800c 	str.w	r8, [sp, #12]
 800504a:	2330      	movs	r3, #48	; 0x30
 800504c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005210 <_vfiprintf_r+0x24c>
 8005050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005054:	f04f 0901 	mov.w	r9, #1
 8005058:	4623      	mov	r3, r4
 800505a:	469a      	mov	sl, r3
 800505c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005060:	b10a      	cbz	r2, 8005066 <_vfiprintf_r+0xa2>
 8005062:	2a25      	cmp	r2, #37	; 0x25
 8005064:	d1f9      	bne.n	800505a <_vfiprintf_r+0x96>
 8005066:	ebba 0b04 	subs.w	fp, sl, r4
 800506a:	d00b      	beq.n	8005084 <_vfiprintf_r+0xc0>
 800506c:	465b      	mov	r3, fp
 800506e:	4622      	mov	r2, r4
 8005070:	4629      	mov	r1, r5
 8005072:	4630      	mov	r0, r6
 8005074:	f7ff ff93 	bl	8004f9e <__sfputs_r>
 8005078:	3001      	adds	r0, #1
 800507a:	f000 80aa 	beq.w	80051d2 <_vfiprintf_r+0x20e>
 800507e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005080:	445a      	add	r2, fp
 8005082:	9209      	str	r2, [sp, #36]	; 0x24
 8005084:	f89a 3000 	ldrb.w	r3, [sl]
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 80a2 	beq.w	80051d2 <_vfiprintf_r+0x20e>
 800508e:	2300      	movs	r3, #0
 8005090:	f04f 32ff 	mov.w	r2, #4294967295
 8005094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005098:	f10a 0a01 	add.w	sl, sl, #1
 800509c:	9304      	str	r3, [sp, #16]
 800509e:	9307      	str	r3, [sp, #28]
 80050a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050a4:	931a      	str	r3, [sp, #104]	; 0x68
 80050a6:	4654      	mov	r4, sl
 80050a8:	2205      	movs	r2, #5
 80050aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ae:	4858      	ldr	r0, [pc, #352]	; (8005210 <_vfiprintf_r+0x24c>)
 80050b0:	f7fb f89e 	bl	80001f0 <memchr>
 80050b4:	9a04      	ldr	r2, [sp, #16]
 80050b6:	b9d8      	cbnz	r0, 80050f0 <_vfiprintf_r+0x12c>
 80050b8:	06d1      	lsls	r1, r2, #27
 80050ba:	bf44      	itt	mi
 80050bc:	2320      	movmi	r3, #32
 80050be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050c2:	0713      	lsls	r3, r2, #28
 80050c4:	bf44      	itt	mi
 80050c6:	232b      	movmi	r3, #43	; 0x2b
 80050c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050cc:	f89a 3000 	ldrb.w	r3, [sl]
 80050d0:	2b2a      	cmp	r3, #42	; 0x2a
 80050d2:	d015      	beq.n	8005100 <_vfiprintf_r+0x13c>
 80050d4:	9a07      	ldr	r2, [sp, #28]
 80050d6:	4654      	mov	r4, sl
 80050d8:	2000      	movs	r0, #0
 80050da:	f04f 0c0a 	mov.w	ip, #10
 80050de:	4621      	mov	r1, r4
 80050e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050e4:	3b30      	subs	r3, #48	; 0x30
 80050e6:	2b09      	cmp	r3, #9
 80050e8:	d94e      	bls.n	8005188 <_vfiprintf_r+0x1c4>
 80050ea:	b1b0      	cbz	r0, 800511a <_vfiprintf_r+0x156>
 80050ec:	9207      	str	r2, [sp, #28]
 80050ee:	e014      	b.n	800511a <_vfiprintf_r+0x156>
 80050f0:	eba0 0308 	sub.w	r3, r0, r8
 80050f4:	fa09 f303 	lsl.w	r3, r9, r3
 80050f8:	4313      	orrs	r3, r2
 80050fa:	9304      	str	r3, [sp, #16]
 80050fc:	46a2      	mov	sl, r4
 80050fe:	e7d2      	b.n	80050a6 <_vfiprintf_r+0xe2>
 8005100:	9b03      	ldr	r3, [sp, #12]
 8005102:	1d19      	adds	r1, r3, #4
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	9103      	str	r1, [sp, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	bfbb      	ittet	lt
 800510c:	425b      	neglt	r3, r3
 800510e:	f042 0202 	orrlt.w	r2, r2, #2
 8005112:	9307      	strge	r3, [sp, #28]
 8005114:	9307      	strlt	r3, [sp, #28]
 8005116:	bfb8      	it	lt
 8005118:	9204      	strlt	r2, [sp, #16]
 800511a:	7823      	ldrb	r3, [r4, #0]
 800511c:	2b2e      	cmp	r3, #46	; 0x2e
 800511e:	d10c      	bne.n	800513a <_vfiprintf_r+0x176>
 8005120:	7863      	ldrb	r3, [r4, #1]
 8005122:	2b2a      	cmp	r3, #42	; 0x2a
 8005124:	d135      	bne.n	8005192 <_vfiprintf_r+0x1ce>
 8005126:	9b03      	ldr	r3, [sp, #12]
 8005128:	1d1a      	adds	r2, r3, #4
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	9203      	str	r2, [sp, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	bfb8      	it	lt
 8005132:	f04f 33ff 	movlt.w	r3, #4294967295
 8005136:	3402      	adds	r4, #2
 8005138:	9305      	str	r3, [sp, #20]
 800513a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005220 <_vfiprintf_r+0x25c>
 800513e:	7821      	ldrb	r1, [r4, #0]
 8005140:	2203      	movs	r2, #3
 8005142:	4650      	mov	r0, sl
 8005144:	f7fb f854 	bl	80001f0 <memchr>
 8005148:	b140      	cbz	r0, 800515c <_vfiprintf_r+0x198>
 800514a:	2340      	movs	r3, #64	; 0x40
 800514c:	eba0 000a 	sub.w	r0, r0, sl
 8005150:	fa03 f000 	lsl.w	r0, r3, r0
 8005154:	9b04      	ldr	r3, [sp, #16]
 8005156:	4303      	orrs	r3, r0
 8005158:	3401      	adds	r4, #1
 800515a:	9304      	str	r3, [sp, #16]
 800515c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005160:	482c      	ldr	r0, [pc, #176]	; (8005214 <_vfiprintf_r+0x250>)
 8005162:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005166:	2206      	movs	r2, #6
 8005168:	f7fb f842 	bl	80001f0 <memchr>
 800516c:	2800      	cmp	r0, #0
 800516e:	d03f      	beq.n	80051f0 <_vfiprintf_r+0x22c>
 8005170:	4b29      	ldr	r3, [pc, #164]	; (8005218 <_vfiprintf_r+0x254>)
 8005172:	bb1b      	cbnz	r3, 80051bc <_vfiprintf_r+0x1f8>
 8005174:	9b03      	ldr	r3, [sp, #12]
 8005176:	3307      	adds	r3, #7
 8005178:	f023 0307 	bic.w	r3, r3, #7
 800517c:	3308      	adds	r3, #8
 800517e:	9303      	str	r3, [sp, #12]
 8005180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005182:	443b      	add	r3, r7
 8005184:	9309      	str	r3, [sp, #36]	; 0x24
 8005186:	e767      	b.n	8005058 <_vfiprintf_r+0x94>
 8005188:	fb0c 3202 	mla	r2, ip, r2, r3
 800518c:	460c      	mov	r4, r1
 800518e:	2001      	movs	r0, #1
 8005190:	e7a5      	b.n	80050de <_vfiprintf_r+0x11a>
 8005192:	2300      	movs	r3, #0
 8005194:	3401      	adds	r4, #1
 8005196:	9305      	str	r3, [sp, #20]
 8005198:	4619      	mov	r1, r3
 800519a:	f04f 0c0a 	mov.w	ip, #10
 800519e:	4620      	mov	r0, r4
 80051a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051a4:	3a30      	subs	r2, #48	; 0x30
 80051a6:	2a09      	cmp	r2, #9
 80051a8:	d903      	bls.n	80051b2 <_vfiprintf_r+0x1ee>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0c5      	beq.n	800513a <_vfiprintf_r+0x176>
 80051ae:	9105      	str	r1, [sp, #20]
 80051b0:	e7c3      	b.n	800513a <_vfiprintf_r+0x176>
 80051b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80051b6:	4604      	mov	r4, r0
 80051b8:	2301      	movs	r3, #1
 80051ba:	e7f0      	b.n	800519e <_vfiprintf_r+0x1da>
 80051bc:	ab03      	add	r3, sp, #12
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	462a      	mov	r2, r5
 80051c2:	4b16      	ldr	r3, [pc, #88]	; (800521c <_vfiprintf_r+0x258>)
 80051c4:	a904      	add	r1, sp, #16
 80051c6:	4630      	mov	r0, r6
 80051c8:	f3af 8000 	nop.w
 80051cc:	4607      	mov	r7, r0
 80051ce:	1c78      	adds	r0, r7, #1
 80051d0:	d1d6      	bne.n	8005180 <_vfiprintf_r+0x1bc>
 80051d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051d4:	07d9      	lsls	r1, r3, #31
 80051d6:	d405      	bmi.n	80051e4 <_vfiprintf_r+0x220>
 80051d8:	89ab      	ldrh	r3, [r5, #12]
 80051da:	059a      	lsls	r2, r3, #22
 80051dc:	d402      	bmi.n	80051e4 <_vfiprintf_r+0x220>
 80051de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051e0:	f7ff fd77 	bl	8004cd2 <__retarget_lock_release_recursive>
 80051e4:	89ab      	ldrh	r3, [r5, #12]
 80051e6:	065b      	lsls	r3, r3, #25
 80051e8:	f53f af12 	bmi.w	8005010 <_vfiprintf_r+0x4c>
 80051ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051ee:	e711      	b.n	8005014 <_vfiprintf_r+0x50>
 80051f0:	ab03      	add	r3, sp, #12
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	462a      	mov	r2, r5
 80051f6:	4b09      	ldr	r3, [pc, #36]	; (800521c <_vfiprintf_r+0x258>)
 80051f8:	a904      	add	r1, sp, #16
 80051fa:	4630      	mov	r0, r6
 80051fc:	f000 f880 	bl	8005300 <_printf_i>
 8005200:	e7e4      	b.n	80051cc <_vfiprintf_r+0x208>
 8005202:	bf00      	nop
 8005204:	08005754 	.word	0x08005754
 8005208:	08005774 	.word	0x08005774
 800520c:	08005734 	.word	0x08005734
 8005210:	08005794 	.word	0x08005794
 8005214:	0800579e 	.word	0x0800579e
 8005218:	00000000 	.word	0x00000000
 800521c:	08004f9f 	.word	0x08004f9f
 8005220:	0800579a 	.word	0x0800579a

08005224 <_printf_common>:
 8005224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005228:	4616      	mov	r6, r2
 800522a:	4699      	mov	r9, r3
 800522c:	688a      	ldr	r2, [r1, #8]
 800522e:	690b      	ldr	r3, [r1, #16]
 8005230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005234:	4293      	cmp	r3, r2
 8005236:	bfb8      	it	lt
 8005238:	4613      	movlt	r3, r2
 800523a:	6033      	str	r3, [r6, #0]
 800523c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005240:	4607      	mov	r7, r0
 8005242:	460c      	mov	r4, r1
 8005244:	b10a      	cbz	r2, 800524a <_printf_common+0x26>
 8005246:	3301      	adds	r3, #1
 8005248:	6033      	str	r3, [r6, #0]
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	0699      	lsls	r1, r3, #26
 800524e:	bf42      	ittt	mi
 8005250:	6833      	ldrmi	r3, [r6, #0]
 8005252:	3302      	addmi	r3, #2
 8005254:	6033      	strmi	r3, [r6, #0]
 8005256:	6825      	ldr	r5, [r4, #0]
 8005258:	f015 0506 	ands.w	r5, r5, #6
 800525c:	d106      	bne.n	800526c <_printf_common+0x48>
 800525e:	f104 0a19 	add.w	sl, r4, #25
 8005262:	68e3      	ldr	r3, [r4, #12]
 8005264:	6832      	ldr	r2, [r6, #0]
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	42ab      	cmp	r3, r5
 800526a:	dc26      	bgt.n	80052ba <_printf_common+0x96>
 800526c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005270:	1e13      	subs	r3, r2, #0
 8005272:	6822      	ldr	r2, [r4, #0]
 8005274:	bf18      	it	ne
 8005276:	2301      	movne	r3, #1
 8005278:	0692      	lsls	r2, r2, #26
 800527a:	d42b      	bmi.n	80052d4 <_printf_common+0xb0>
 800527c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005280:	4649      	mov	r1, r9
 8005282:	4638      	mov	r0, r7
 8005284:	47c0      	blx	r8
 8005286:	3001      	adds	r0, #1
 8005288:	d01e      	beq.n	80052c8 <_printf_common+0xa4>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	68e5      	ldr	r5, [r4, #12]
 800528e:	6832      	ldr	r2, [r6, #0]
 8005290:	f003 0306 	and.w	r3, r3, #6
 8005294:	2b04      	cmp	r3, #4
 8005296:	bf08      	it	eq
 8005298:	1aad      	subeq	r5, r5, r2
 800529a:	68a3      	ldr	r3, [r4, #8]
 800529c:	6922      	ldr	r2, [r4, #16]
 800529e:	bf0c      	ite	eq
 80052a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052a4:	2500      	movne	r5, #0
 80052a6:	4293      	cmp	r3, r2
 80052a8:	bfc4      	itt	gt
 80052aa:	1a9b      	subgt	r3, r3, r2
 80052ac:	18ed      	addgt	r5, r5, r3
 80052ae:	2600      	movs	r6, #0
 80052b0:	341a      	adds	r4, #26
 80052b2:	42b5      	cmp	r5, r6
 80052b4:	d11a      	bne.n	80052ec <_printf_common+0xc8>
 80052b6:	2000      	movs	r0, #0
 80052b8:	e008      	b.n	80052cc <_printf_common+0xa8>
 80052ba:	2301      	movs	r3, #1
 80052bc:	4652      	mov	r2, sl
 80052be:	4649      	mov	r1, r9
 80052c0:	4638      	mov	r0, r7
 80052c2:	47c0      	blx	r8
 80052c4:	3001      	adds	r0, #1
 80052c6:	d103      	bne.n	80052d0 <_printf_common+0xac>
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295
 80052cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d0:	3501      	adds	r5, #1
 80052d2:	e7c6      	b.n	8005262 <_printf_common+0x3e>
 80052d4:	18e1      	adds	r1, r4, r3
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	2030      	movs	r0, #48	; 0x30
 80052da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052de:	4422      	add	r2, r4
 80052e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052e8:	3302      	adds	r3, #2
 80052ea:	e7c7      	b.n	800527c <_printf_common+0x58>
 80052ec:	2301      	movs	r3, #1
 80052ee:	4622      	mov	r2, r4
 80052f0:	4649      	mov	r1, r9
 80052f2:	4638      	mov	r0, r7
 80052f4:	47c0      	blx	r8
 80052f6:	3001      	adds	r0, #1
 80052f8:	d0e6      	beq.n	80052c8 <_printf_common+0xa4>
 80052fa:	3601      	adds	r6, #1
 80052fc:	e7d9      	b.n	80052b2 <_printf_common+0x8e>
	...

08005300 <_printf_i>:
 8005300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005304:	7e0f      	ldrb	r7, [r1, #24]
 8005306:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005308:	2f78      	cmp	r7, #120	; 0x78
 800530a:	4691      	mov	r9, r2
 800530c:	4680      	mov	r8, r0
 800530e:	460c      	mov	r4, r1
 8005310:	469a      	mov	sl, r3
 8005312:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005316:	d807      	bhi.n	8005328 <_printf_i+0x28>
 8005318:	2f62      	cmp	r7, #98	; 0x62
 800531a:	d80a      	bhi.n	8005332 <_printf_i+0x32>
 800531c:	2f00      	cmp	r7, #0
 800531e:	f000 80d8 	beq.w	80054d2 <_printf_i+0x1d2>
 8005322:	2f58      	cmp	r7, #88	; 0x58
 8005324:	f000 80a3 	beq.w	800546e <_printf_i+0x16e>
 8005328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800532c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005330:	e03a      	b.n	80053a8 <_printf_i+0xa8>
 8005332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005336:	2b15      	cmp	r3, #21
 8005338:	d8f6      	bhi.n	8005328 <_printf_i+0x28>
 800533a:	a101      	add	r1, pc, #4	; (adr r1, 8005340 <_printf_i+0x40>)
 800533c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005340:	08005399 	.word	0x08005399
 8005344:	080053ad 	.word	0x080053ad
 8005348:	08005329 	.word	0x08005329
 800534c:	08005329 	.word	0x08005329
 8005350:	08005329 	.word	0x08005329
 8005354:	08005329 	.word	0x08005329
 8005358:	080053ad 	.word	0x080053ad
 800535c:	08005329 	.word	0x08005329
 8005360:	08005329 	.word	0x08005329
 8005364:	08005329 	.word	0x08005329
 8005368:	08005329 	.word	0x08005329
 800536c:	080054b9 	.word	0x080054b9
 8005370:	080053dd 	.word	0x080053dd
 8005374:	0800549b 	.word	0x0800549b
 8005378:	08005329 	.word	0x08005329
 800537c:	08005329 	.word	0x08005329
 8005380:	080054db 	.word	0x080054db
 8005384:	08005329 	.word	0x08005329
 8005388:	080053dd 	.word	0x080053dd
 800538c:	08005329 	.word	0x08005329
 8005390:	08005329 	.word	0x08005329
 8005394:	080054a3 	.word	0x080054a3
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	1d1a      	adds	r2, r3, #4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	602a      	str	r2, [r5, #0]
 80053a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0a3      	b.n	80054f4 <_printf_i+0x1f4>
 80053ac:	6820      	ldr	r0, [r4, #0]
 80053ae:	6829      	ldr	r1, [r5, #0]
 80053b0:	0606      	lsls	r6, r0, #24
 80053b2:	f101 0304 	add.w	r3, r1, #4
 80053b6:	d50a      	bpl.n	80053ce <_printf_i+0xce>
 80053b8:	680e      	ldr	r6, [r1, #0]
 80053ba:	602b      	str	r3, [r5, #0]
 80053bc:	2e00      	cmp	r6, #0
 80053be:	da03      	bge.n	80053c8 <_printf_i+0xc8>
 80053c0:	232d      	movs	r3, #45	; 0x2d
 80053c2:	4276      	negs	r6, r6
 80053c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053c8:	485e      	ldr	r0, [pc, #376]	; (8005544 <_printf_i+0x244>)
 80053ca:	230a      	movs	r3, #10
 80053cc:	e019      	b.n	8005402 <_printf_i+0x102>
 80053ce:	680e      	ldr	r6, [r1, #0]
 80053d0:	602b      	str	r3, [r5, #0]
 80053d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053d6:	bf18      	it	ne
 80053d8:	b236      	sxthne	r6, r6
 80053da:	e7ef      	b.n	80053bc <_printf_i+0xbc>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	6820      	ldr	r0, [r4, #0]
 80053e0:	1d19      	adds	r1, r3, #4
 80053e2:	6029      	str	r1, [r5, #0]
 80053e4:	0601      	lsls	r1, r0, #24
 80053e6:	d501      	bpl.n	80053ec <_printf_i+0xec>
 80053e8:	681e      	ldr	r6, [r3, #0]
 80053ea:	e002      	b.n	80053f2 <_printf_i+0xf2>
 80053ec:	0646      	lsls	r6, r0, #25
 80053ee:	d5fb      	bpl.n	80053e8 <_printf_i+0xe8>
 80053f0:	881e      	ldrh	r6, [r3, #0]
 80053f2:	4854      	ldr	r0, [pc, #336]	; (8005544 <_printf_i+0x244>)
 80053f4:	2f6f      	cmp	r7, #111	; 0x6f
 80053f6:	bf0c      	ite	eq
 80053f8:	2308      	moveq	r3, #8
 80053fa:	230a      	movne	r3, #10
 80053fc:	2100      	movs	r1, #0
 80053fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005402:	6865      	ldr	r5, [r4, #4]
 8005404:	60a5      	str	r5, [r4, #8]
 8005406:	2d00      	cmp	r5, #0
 8005408:	bfa2      	ittt	ge
 800540a:	6821      	ldrge	r1, [r4, #0]
 800540c:	f021 0104 	bicge.w	r1, r1, #4
 8005410:	6021      	strge	r1, [r4, #0]
 8005412:	b90e      	cbnz	r6, 8005418 <_printf_i+0x118>
 8005414:	2d00      	cmp	r5, #0
 8005416:	d04d      	beq.n	80054b4 <_printf_i+0x1b4>
 8005418:	4615      	mov	r5, r2
 800541a:	fbb6 f1f3 	udiv	r1, r6, r3
 800541e:	fb03 6711 	mls	r7, r3, r1, r6
 8005422:	5dc7      	ldrb	r7, [r0, r7]
 8005424:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005428:	4637      	mov	r7, r6
 800542a:	42bb      	cmp	r3, r7
 800542c:	460e      	mov	r6, r1
 800542e:	d9f4      	bls.n	800541a <_printf_i+0x11a>
 8005430:	2b08      	cmp	r3, #8
 8005432:	d10b      	bne.n	800544c <_printf_i+0x14c>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	07de      	lsls	r6, r3, #31
 8005438:	d508      	bpl.n	800544c <_printf_i+0x14c>
 800543a:	6923      	ldr	r3, [r4, #16]
 800543c:	6861      	ldr	r1, [r4, #4]
 800543e:	4299      	cmp	r1, r3
 8005440:	bfde      	ittt	le
 8005442:	2330      	movle	r3, #48	; 0x30
 8005444:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005448:	f105 35ff 	addle.w	r5, r5, #4294967295
 800544c:	1b52      	subs	r2, r2, r5
 800544e:	6122      	str	r2, [r4, #16]
 8005450:	f8cd a000 	str.w	sl, [sp]
 8005454:	464b      	mov	r3, r9
 8005456:	aa03      	add	r2, sp, #12
 8005458:	4621      	mov	r1, r4
 800545a:	4640      	mov	r0, r8
 800545c:	f7ff fee2 	bl	8005224 <_printf_common>
 8005460:	3001      	adds	r0, #1
 8005462:	d14c      	bne.n	80054fe <_printf_i+0x1fe>
 8005464:	f04f 30ff 	mov.w	r0, #4294967295
 8005468:	b004      	add	sp, #16
 800546a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800546e:	4835      	ldr	r0, [pc, #212]	; (8005544 <_printf_i+0x244>)
 8005470:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005474:	6829      	ldr	r1, [r5, #0]
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	f851 6b04 	ldr.w	r6, [r1], #4
 800547c:	6029      	str	r1, [r5, #0]
 800547e:	061d      	lsls	r5, r3, #24
 8005480:	d514      	bpl.n	80054ac <_printf_i+0x1ac>
 8005482:	07df      	lsls	r7, r3, #31
 8005484:	bf44      	itt	mi
 8005486:	f043 0320 	orrmi.w	r3, r3, #32
 800548a:	6023      	strmi	r3, [r4, #0]
 800548c:	b91e      	cbnz	r6, 8005496 <_printf_i+0x196>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	f023 0320 	bic.w	r3, r3, #32
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	2310      	movs	r3, #16
 8005498:	e7b0      	b.n	80053fc <_printf_i+0xfc>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	f043 0320 	orr.w	r3, r3, #32
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	2378      	movs	r3, #120	; 0x78
 80054a4:	4828      	ldr	r0, [pc, #160]	; (8005548 <_printf_i+0x248>)
 80054a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054aa:	e7e3      	b.n	8005474 <_printf_i+0x174>
 80054ac:	0659      	lsls	r1, r3, #25
 80054ae:	bf48      	it	mi
 80054b0:	b2b6      	uxthmi	r6, r6
 80054b2:	e7e6      	b.n	8005482 <_printf_i+0x182>
 80054b4:	4615      	mov	r5, r2
 80054b6:	e7bb      	b.n	8005430 <_printf_i+0x130>
 80054b8:	682b      	ldr	r3, [r5, #0]
 80054ba:	6826      	ldr	r6, [r4, #0]
 80054bc:	6961      	ldr	r1, [r4, #20]
 80054be:	1d18      	adds	r0, r3, #4
 80054c0:	6028      	str	r0, [r5, #0]
 80054c2:	0635      	lsls	r5, r6, #24
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	d501      	bpl.n	80054cc <_printf_i+0x1cc>
 80054c8:	6019      	str	r1, [r3, #0]
 80054ca:	e002      	b.n	80054d2 <_printf_i+0x1d2>
 80054cc:	0670      	lsls	r0, r6, #25
 80054ce:	d5fb      	bpl.n	80054c8 <_printf_i+0x1c8>
 80054d0:	8019      	strh	r1, [r3, #0]
 80054d2:	2300      	movs	r3, #0
 80054d4:	6123      	str	r3, [r4, #16]
 80054d6:	4615      	mov	r5, r2
 80054d8:	e7ba      	b.n	8005450 <_printf_i+0x150>
 80054da:	682b      	ldr	r3, [r5, #0]
 80054dc:	1d1a      	adds	r2, r3, #4
 80054de:	602a      	str	r2, [r5, #0]
 80054e0:	681d      	ldr	r5, [r3, #0]
 80054e2:	6862      	ldr	r2, [r4, #4]
 80054e4:	2100      	movs	r1, #0
 80054e6:	4628      	mov	r0, r5
 80054e8:	f7fa fe82 	bl	80001f0 <memchr>
 80054ec:	b108      	cbz	r0, 80054f2 <_printf_i+0x1f2>
 80054ee:	1b40      	subs	r0, r0, r5
 80054f0:	6060      	str	r0, [r4, #4]
 80054f2:	6863      	ldr	r3, [r4, #4]
 80054f4:	6123      	str	r3, [r4, #16]
 80054f6:	2300      	movs	r3, #0
 80054f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054fc:	e7a8      	b.n	8005450 <_printf_i+0x150>
 80054fe:	6923      	ldr	r3, [r4, #16]
 8005500:	462a      	mov	r2, r5
 8005502:	4649      	mov	r1, r9
 8005504:	4640      	mov	r0, r8
 8005506:	47d0      	blx	sl
 8005508:	3001      	adds	r0, #1
 800550a:	d0ab      	beq.n	8005464 <_printf_i+0x164>
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	079b      	lsls	r3, r3, #30
 8005510:	d413      	bmi.n	800553a <_printf_i+0x23a>
 8005512:	68e0      	ldr	r0, [r4, #12]
 8005514:	9b03      	ldr	r3, [sp, #12]
 8005516:	4298      	cmp	r0, r3
 8005518:	bfb8      	it	lt
 800551a:	4618      	movlt	r0, r3
 800551c:	e7a4      	b.n	8005468 <_printf_i+0x168>
 800551e:	2301      	movs	r3, #1
 8005520:	4632      	mov	r2, r6
 8005522:	4649      	mov	r1, r9
 8005524:	4640      	mov	r0, r8
 8005526:	47d0      	blx	sl
 8005528:	3001      	adds	r0, #1
 800552a:	d09b      	beq.n	8005464 <_printf_i+0x164>
 800552c:	3501      	adds	r5, #1
 800552e:	68e3      	ldr	r3, [r4, #12]
 8005530:	9903      	ldr	r1, [sp, #12]
 8005532:	1a5b      	subs	r3, r3, r1
 8005534:	42ab      	cmp	r3, r5
 8005536:	dcf2      	bgt.n	800551e <_printf_i+0x21e>
 8005538:	e7eb      	b.n	8005512 <_printf_i+0x212>
 800553a:	2500      	movs	r5, #0
 800553c:	f104 0619 	add.w	r6, r4, #25
 8005540:	e7f5      	b.n	800552e <_printf_i+0x22e>
 8005542:	bf00      	nop
 8005544:	080057a5 	.word	0x080057a5
 8005548:	080057b6 	.word	0x080057b6

0800554c <_sbrk_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4d06      	ldr	r5, [pc, #24]	; (8005568 <_sbrk_r+0x1c>)
 8005550:	2300      	movs	r3, #0
 8005552:	4604      	mov	r4, r0
 8005554:	4608      	mov	r0, r1
 8005556:	602b      	str	r3, [r5, #0]
 8005558:	f7fc f8fe 	bl	8001758 <_sbrk>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d102      	bne.n	8005566 <_sbrk_r+0x1a>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	b103      	cbz	r3, 8005566 <_sbrk_r+0x1a>
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	20000184 	.word	0x20000184

0800556c <__sread>:
 800556c:	b510      	push	{r4, lr}
 800556e:	460c      	mov	r4, r1
 8005570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005574:	f000 f8a0 	bl	80056b8 <_read_r>
 8005578:	2800      	cmp	r0, #0
 800557a:	bfab      	itete	ge
 800557c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800557e:	89a3      	ldrhlt	r3, [r4, #12]
 8005580:	181b      	addge	r3, r3, r0
 8005582:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005586:	bfac      	ite	ge
 8005588:	6563      	strge	r3, [r4, #84]	; 0x54
 800558a:	81a3      	strhlt	r3, [r4, #12]
 800558c:	bd10      	pop	{r4, pc}

0800558e <__swrite>:
 800558e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005592:	461f      	mov	r7, r3
 8005594:	898b      	ldrh	r3, [r1, #12]
 8005596:	05db      	lsls	r3, r3, #23
 8005598:	4605      	mov	r5, r0
 800559a:	460c      	mov	r4, r1
 800559c:	4616      	mov	r6, r2
 800559e:	d505      	bpl.n	80055ac <__swrite+0x1e>
 80055a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a4:	2302      	movs	r3, #2
 80055a6:	2200      	movs	r2, #0
 80055a8:	f000 f868 	bl	800567c <_lseek_r>
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b6:	81a3      	strh	r3, [r4, #12]
 80055b8:	4632      	mov	r2, r6
 80055ba:	463b      	mov	r3, r7
 80055bc:	4628      	mov	r0, r5
 80055be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055c2:	f000 b817 	b.w	80055f4 <_write_r>

080055c6 <__sseek>:
 80055c6:	b510      	push	{r4, lr}
 80055c8:	460c      	mov	r4, r1
 80055ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ce:	f000 f855 	bl	800567c <_lseek_r>
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	bf15      	itete	ne
 80055d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80055da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055e2:	81a3      	strheq	r3, [r4, #12]
 80055e4:	bf18      	it	ne
 80055e6:	81a3      	strhne	r3, [r4, #12]
 80055e8:	bd10      	pop	{r4, pc}

080055ea <__sclose>:
 80055ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ee:	f000 b813 	b.w	8005618 <_close_r>
	...

080055f4 <_write_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4d07      	ldr	r5, [pc, #28]	; (8005614 <_write_r+0x20>)
 80055f8:	4604      	mov	r4, r0
 80055fa:	4608      	mov	r0, r1
 80055fc:	4611      	mov	r1, r2
 80055fe:	2200      	movs	r2, #0
 8005600:	602a      	str	r2, [r5, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	f7fb fc8e 	bl	8000f24 <_write>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_write_r+0x1e>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	b103      	cbz	r3, 8005612 <_write_r+0x1e>
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	20000184 	.word	0x20000184

08005618 <_close_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4d06      	ldr	r5, [pc, #24]	; (8005634 <_close_r+0x1c>)
 800561c:	2300      	movs	r3, #0
 800561e:	4604      	mov	r4, r0
 8005620:	4608      	mov	r0, r1
 8005622:	602b      	str	r3, [r5, #0]
 8005624:	f7fc f863 	bl	80016ee <_close>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d102      	bne.n	8005632 <_close_r+0x1a>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	b103      	cbz	r3, 8005632 <_close_r+0x1a>
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	20000184 	.word	0x20000184

08005638 <_fstat_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4d07      	ldr	r5, [pc, #28]	; (8005658 <_fstat_r+0x20>)
 800563c:	2300      	movs	r3, #0
 800563e:	4604      	mov	r4, r0
 8005640:	4608      	mov	r0, r1
 8005642:	4611      	mov	r1, r2
 8005644:	602b      	str	r3, [r5, #0]
 8005646:	f7fc f85e 	bl	8001706 <_fstat>
 800564a:	1c43      	adds	r3, r0, #1
 800564c:	d102      	bne.n	8005654 <_fstat_r+0x1c>
 800564e:	682b      	ldr	r3, [r5, #0]
 8005650:	b103      	cbz	r3, 8005654 <_fstat_r+0x1c>
 8005652:	6023      	str	r3, [r4, #0]
 8005654:	bd38      	pop	{r3, r4, r5, pc}
 8005656:	bf00      	nop
 8005658:	20000184 	.word	0x20000184

0800565c <_isatty_r>:
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	4d06      	ldr	r5, [pc, #24]	; (8005678 <_isatty_r+0x1c>)
 8005660:	2300      	movs	r3, #0
 8005662:	4604      	mov	r4, r0
 8005664:	4608      	mov	r0, r1
 8005666:	602b      	str	r3, [r5, #0]
 8005668:	f7fc f85d 	bl	8001726 <_isatty>
 800566c:	1c43      	adds	r3, r0, #1
 800566e:	d102      	bne.n	8005676 <_isatty_r+0x1a>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	b103      	cbz	r3, 8005676 <_isatty_r+0x1a>
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	bd38      	pop	{r3, r4, r5, pc}
 8005678:	20000184 	.word	0x20000184

0800567c <_lseek_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	4d07      	ldr	r5, [pc, #28]	; (800569c <_lseek_r+0x20>)
 8005680:	4604      	mov	r4, r0
 8005682:	4608      	mov	r0, r1
 8005684:	4611      	mov	r1, r2
 8005686:	2200      	movs	r2, #0
 8005688:	602a      	str	r2, [r5, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	f7fc f856 	bl	800173c <_lseek>
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	d102      	bne.n	800569a <_lseek_r+0x1e>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	b103      	cbz	r3, 800569a <_lseek_r+0x1e>
 8005698:	6023      	str	r3, [r4, #0]
 800569a:	bd38      	pop	{r3, r4, r5, pc}
 800569c:	20000184 	.word	0x20000184

080056a0 <__malloc_lock>:
 80056a0:	4801      	ldr	r0, [pc, #4]	; (80056a8 <__malloc_lock+0x8>)
 80056a2:	f7ff bb15 	b.w	8004cd0 <__retarget_lock_acquire_recursive>
 80056a6:	bf00      	nop
 80056a8:	20000178 	.word	0x20000178

080056ac <__malloc_unlock>:
 80056ac:	4801      	ldr	r0, [pc, #4]	; (80056b4 <__malloc_unlock+0x8>)
 80056ae:	f7ff bb10 	b.w	8004cd2 <__retarget_lock_release_recursive>
 80056b2:	bf00      	nop
 80056b4:	20000178 	.word	0x20000178

080056b8 <_read_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4d07      	ldr	r5, [pc, #28]	; (80056d8 <_read_r+0x20>)
 80056bc:	4604      	mov	r4, r0
 80056be:	4608      	mov	r0, r1
 80056c0:	4611      	mov	r1, r2
 80056c2:	2200      	movs	r2, #0
 80056c4:	602a      	str	r2, [r5, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	f7fb fff4 	bl	80016b4 <_read>
 80056cc:	1c43      	adds	r3, r0, #1
 80056ce:	d102      	bne.n	80056d6 <_read_r+0x1e>
 80056d0:	682b      	ldr	r3, [r5, #0]
 80056d2:	b103      	cbz	r3, 80056d6 <_read_r+0x1e>
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	bd38      	pop	{r3, r4, r5, pc}
 80056d8:	20000184 	.word	0x20000184

080056dc <_init>:
 80056dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056de:	bf00      	nop
 80056e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e2:	bc08      	pop	{r3}
 80056e4:	469e      	mov	lr, r3
 80056e6:	4770      	bx	lr

080056e8 <_fini>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	bf00      	nop
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr
